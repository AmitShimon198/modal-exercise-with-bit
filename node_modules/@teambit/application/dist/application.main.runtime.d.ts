import { CLIMain } from '@teambit/cli';
import { SlotRegistry } from '@teambit/harmony';
import { BuilderMain } from '@teambit/builder';
import { LoggerMain } from '@teambit/logger';
import { EnvsMain } from '@teambit/envs';
import { ComponentMain, ComponentID } from '@teambit/component';
import { ApplicationType } from './application-type';
import { Application } from './application';
import { DeploymentProvider } from './deployment-provider';
import { AppService } from './application.service';
export declare type ApplicationTypeSlot = SlotRegistry<ApplicationType[]>;
export declare type ApplicationSlot = SlotRegistry<Application[]>;
export declare type DeploymentProviderSlot = SlotRegistry<DeploymentProvider[]>;
export declare type ApplicationAspectConfig = {};
export declare type ServeAppOptions = {
    defaultPortRange?: number[];
    dev: boolean;
};
export declare class ApplicationMain {
    private appSlot;
    private appTypeSlot;
    private deploymentProviderSlot;
    private envs;
    private componentAspect;
    private appService;
    constructor(appSlot: ApplicationSlot, appTypeSlot: ApplicationTypeSlot, deploymentProviderSlot: DeploymentProviderSlot, envs: EnvsMain, componentAspect: ComponentMain, appService: AppService);
    registerApp(app: Application): this;
    registerApps(apps: Application[]): this;
    listApps(): Application[];
    registerDeploymentProvider(provider: DeploymentProvider): this;
    listProviders(): DeploymentProvider[];
    getApp(appName: string): Application | undefined;
    getAppAspect(appName: string): string | undefined;
    getAppOrThrow(appName: string): Application;
    private computeOptions;
    runApp(appName: string, options?: Partial<ServeAppOptions>): Promise<{
        app: Application;
        port: number;
    }>;
    getAppIdOrThrow(appName: string): ComponentID;
    private createAppContext;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<ApplicationType[]>) | ((registerFn: () => string) => SlotRegistry<Application[]>) | ((registerFn: () => string) => SlotRegistry<DeploymentProvider[]>))[];
    static provider([cli, loggerAspect, builder, envs, component]: [CLIMain, LoggerMain, BuilderMain, EnvsMain, ComponentMain], config: ApplicationAspectConfig, [appTypeSlot, appSlot, deploymentProviderSlot]: [ApplicationTypeSlot, ApplicationSlot, DeploymentProviderSlot]): Promise<ApplicationMain>;
}
