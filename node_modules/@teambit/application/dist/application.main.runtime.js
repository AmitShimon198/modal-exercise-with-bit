"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApplicationMain = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _cli() {
  const data = require("@teambit/cli");

  _cli = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _builder() {
  const data = require("@teambit/builder");

  _builder = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("@teambit/logger");

  _logger = function () {
    return data;
  };

  return data;
}

function _envs() {
  const data = require("@teambit/envs");

  _envs = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = _interopRequireWildcard(require("@teambit/component"));

  _component = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("./exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _application() {
  const data = require("./application.aspect");

  _application = function () {
    return data;
  };

  return data;
}

function _appList() {
  const data = require("./app-list.cmd");

  _appList = function () {
    return data;
  };

  return data;
}

function _deploy() {
  const data = require("./deploy.task");

  _deploy = function () {
    return data;
  };

  return data;
}

function _run() {
  const data = require("./run.cmd");

  _run = function () {
    return data;
  };

  return data;
}

function _application2() {
  const data = require("./application.service");

  _application2 = function () {
    return data;
  };

  return data;
}

function _app() {
  const data = require("./app.cmd");

  _app = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class ApplicationMain {
  constructor(appSlot, appTypeSlot, deploymentProviderSlot, envs, componentAspect, appService) {
    this.appSlot = appSlot;
    this.appTypeSlot = appTypeSlot;
    this.deploymentProviderSlot = deploymentProviderSlot;
    this.envs = envs;
    this.componentAspect = componentAspect;
    this.appService = appService;
  }
  /**
   * register a new app.
   */


  registerApp(app) {
    this.appSlot.register([app]);
    return this;
  }
  /**
   * register multiple apps.
   */


  registerApps(apps) {
    this.appSlot.register(apps);
    return this;
  }
  /**
   * list all registered apps.
   */


  listApps() {
    return (0, _lodash().flatten)(this.appSlot.values());
  }
  /**
   * register new deployment provider like netlify, cloudflare pages or custom deployment.
   */


  registerDeploymentProvider(provider) {
    this.deploymentProviderSlot.register([provider]);
    return this;
  }
  /**
   * list all deployment providers
   */


  listProviders() {
    return (0, _lodash().flatten)(this.deploymentProviderSlot.values());
  }
  /**
   * get an app.
   */


  getApp(appName) {
    const apps = this.listApps();
    return apps.find(app => app.name === appName);
  }
  /**
   * get an app AspectId.
   */


  getAppAspect(appName) {
    var _this$appSlot$toArray;

    return (_this$appSlot$toArray = this.appSlot.toArray().find(([, apps]) => apps.find(app => app.name === appName))) === null || _this$appSlot$toArray === void 0 ? void 0 : _this$appSlot$toArray[0];
  }
  /**
   * get app to throw.
   */


  getAppOrThrow(appName) {
    const app = this.getApp(appName);
    if (!app) throw new (_exceptions().AppNotFound)(appName);
    return app;
  }

  computeOptions(opts) {
    const defaultOpts = {
      dev: false,
      defaultPortRange: [3100, 3500]
    };
    return _objectSpread({
      defaultOpts
    }, opts);
  }

  async runApp(appName, options = {}) {
    const app = this.getAppOrThrow(appName);
    this.computeOptions(options);
    const context = await this.createAppContext(appName);
    if (!context) throw new (_exceptions().AppNotFound)(appName);
    const port = await app.run(context);
    return {
      app,
      port
    };
  }
  /**
   * get the component ID of a certain app.
   */


  getAppIdOrThrow(appName) {
    const maybeApp = this.appSlot.toArray().find(([, apps]) => {
      return apps.find(app => app.name === appName);
    });
    if (!maybeApp) throw new (_exceptions().AppNotFound)(appName);
    return _component().ComponentID.fromString(maybeApp[0]);
  }

  async createAppContext(appName) {
    const host = this.componentAspect.getHost();
    const components = await host.list();
    const id = this.getAppIdOrThrow(appName);
    const component = components.find(c => c.id.isEqual(id));
    if (!component) throw new (_exceptions().AppNotFound)(appName);
    const env = await this.envs.createEnvironment([component]);
    const res = await env.run(this.appService);
    return res.results[0].data;
  }

  static async provider([cli, loggerAspect, builder, envs, component], config, [appTypeSlot, appSlot, deploymentProviderSlot]) {
    const logger = loggerAspect.createLogger(_application().ApplicationAspect.id);
    const appService = new (_application2().AppService)();
    const application = new ApplicationMain(appSlot, appTypeSlot, deploymentProviderSlot, envs, component, appService);
    const appCmd = new (_app().AppCmd)();
    appCmd.commands = [new (_app().AppListCmd)(application)];
    builder.registerTagTasks([new (_deploy().DeployTask)(application)]);
    cli.registerGroup('apps', 'Applications');
    cli.register(new (_run().RunCmd)(application, logger), new (_appList().AppListCmdDeprecated)(application), appCmd);
    return application;
  }

}

exports.ApplicationMain = ApplicationMain;
(0, _defineProperty2().default)(ApplicationMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(ApplicationMain, "dependencies", [_cli().CLIAspect, _logger().LoggerAspect, _builder().BuilderAspect, _envs().EnvsAspect, _component().default]);
(0, _defineProperty2().default)(ApplicationMain, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType()]);

_application().ApplicationAspect.addRuntime(ApplicationMain);

//# sourceMappingURL=application.main.runtime.js.map