{"version":3,"sources":["application.main.runtime.ts"],"names":["ApplicationMain","constructor","appSlot","appTypeSlot","deploymentProviderSlot","envs","componentAspect","appService","registerApp","app","register","registerApps","apps","listApps","values","registerDeploymentProvider","provider","listProviders","getApp","appName","find","name","getAppAspect","toArray","getAppOrThrow","AppNotFound","computeOptions","opts","defaultOpts","dev","defaultPortRange","runApp","options","context","createAppContext","port","run","getAppIdOrThrow","maybeApp","ComponentID","fromString","host","getHost","components","list","id","component","c","isEqual","env","createEnvironment","res","results","data","cli","loggerAspect","builder","config","logger","createLogger","ApplicationAspect","AppService","application","appCmd","AppCmd","commands","AppListCmd","registerTagTasks","DeployTask","registerGroup","RunCmd","AppListCmdDeprecated","MainRuntime","CLIAspect","LoggerAspect","BuilderAspect","EnvsAspect","ComponentAspect","Slot","withType","addRuntime"],"mappings":"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","sourcesContent":["import { MainRuntime, CLIMain, CLIAspect } from '@teambit/cli';\nimport { flatten } from 'lodash';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport ComponentAspect, { ComponentMain, ComponentID } from '@teambit/component';\nimport { ApplicationType } from './application-type';\nimport { Application } from './application';\nimport { DeploymentProvider } from './deployment-provider';\nimport { AppNotFound } from './exceptions';\nimport { ApplicationAspect } from './application.aspect';\nimport { AppListCmdDeprecated } from './app-list.cmd';\nimport { DeployTask } from './deploy.task';\nimport { RunCmd } from './run.cmd';\nimport { AppService } from './application.service';\nimport { AppCmd, AppListCmd } from './app.cmd';\n\nexport type ApplicationTypeSlot = SlotRegistry<ApplicationType[]>;\nexport type ApplicationSlot = SlotRegistry<Application[]>;\nexport type DeploymentProviderSlot = SlotRegistry<DeploymentProvider[]>;\n\nexport type ApplicationAspectConfig = {};\n\nexport type ServeAppOptions = {\n  /**\n   * default port range used to serve applications.\n   */\n  defaultPortRange?: number[];\n\n  /**\n   * determine whether to start the application in dev mode.\n   */\n  dev: boolean;\n};\n\nexport class ApplicationMain {\n  constructor(\n    private appSlot: ApplicationSlot,\n    private appTypeSlot: ApplicationTypeSlot,\n    private deploymentProviderSlot: DeploymentProviderSlot,\n    private envs: EnvsMain,\n    private componentAspect: ComponentMain,\n    private appService: AppService\n  ) {}\n\n  /**\n   * register a new app.\n   */\n  registerApp(app: Application) {\n    this.appSlot.register([app]);\n    return this;\n  }\n\n  /**\n   * register multiple apps.\n   */\n  registerApps(apps: Application[]) {\n    this.appSlot.register(apps);\n    return this;\n  }\n\n  /**\n   * list all registered apps.\n   */\n  listApps(): Application[] {\n    return flatten(this.appSlot.values());\n  }\n\n  /**\n   * register new deployment provider like netlify, cloudflare pages or custom deployment.\n   */\n  registerDeploymentProvider(provider: DeploymentProvider) {\n    this.deploymentProviderSlot.register([provider]);\n    return this;\n  }\n\n  /**\n   * list all deployment providers\n   */\n  listProviders() {\n    return flatten(this.deploymentProviderSlot.values());\n  }\n\n  /**\n   * get an app.\n   */\n  getApp(appName: string): Application | undefined {\n    const apps = this.listApps();\n    return apps.find((app) => app.name === appName);\n  }\n\n  /**\n   * get an app AspectId.\n   */\n  getAppAspect(appName: string): string | undefined {\n    return this.appSlot.toArray().find(([, apps]) => apps.find((app) => app.name === appName))?.[0];\n  }\n\n  /**\n   * get app to throw.\n   */\n  getAppOrThrow(appName: string) {\n    const app = this.getApp(appName);\n    if (!app) throw new AppNotFound(appName);\n    return app;\n  }\n\n  private computeOptions(opts: Partial<ServeAppOptions>) {\n    const defaultOpts: ServeAppOptions = {\n      dev: false,\n      defaultPortRange: [3100, 3500],\n    };\n\n    return {\n      defaultOpts,\n      ...opts,\n    };\n  }\n\n  async runApp(appName: string, options: Partial<ServeAppOptions> = {}) {\n    const app = this.getAppOrThrow(appName);\n    this.computeOptions(options);\n    const context = await this.createAppContext(appName);\n    if (!context) throw new AppNotFound(appName);\n    const port = await app.run(context);\n    return { app, port };\n  }\n\n  /**\n   * get the component ID of a certain app.\n   */\n  getAppIdOrThrow(appName: string) {\n    const maybeApp = this.appSlot.toArray().find(([, apps]) => {\n      return apps.find((app) => app.name === appName);\n    });\n\n    if (!maybeApp) throw new AppNotFound(appName);\n    return ComponentID.fromString(maybeApp[0]);\n  }\n\n  private async createAppContext(appName: string) {\n    const host = this.componentAspect.getHost();\n    const components = await host.list();\n    const id = this.getAppIdOrThrow(appName);\n    const component = components.find((c) => c.id.isEqual(id));\n    if (!component) throw new AppNotFound(appName);\n\n    const env = await this.envs.createEnvironment([component]);\n    const res = await env.run(this.appService);\n    return res.results[0].data;\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [CLIAspect, LoggerAspect, BuilderAspect, EnvsAspect, ComponentAspect];\n\n  static slots = [\n    Slot.withType<ApplicationType[]>(),\n    Slot.withType<Application[]>(),\n    Slot.withType<DeploymentProvider[]>(),\n  ];\n\n  static async provider(\n    [cli, loggerAspect, builder, envs, component]: [CLIMain, LoggerMain, BuilderMain, EnvsMain, ComponentMain],\n    config: ApplicationAspectConfig,\n    [appTypeSlot, appSlot, deploymentProviderSlot]: [ApplicationTypeSlot, ApplicationSlot, DeploymentProviderSlot]\n  ) {\n    const logger = loggerAspect.createLogger(ApplicationAspect.id);\n    const appService = new AppService();\n    const application = new ApplicationMain(appSlot, appTypeSlot, deploymentProviderSlot, envs, component, appService);\n    const appCmd = new AppCmd();\n    appCmd.commands = [new AppListCmd(application)];\n    builder.registerTagTasks([new DeployTask(application)]);\n    cli.registerGroup('apps', 'Applications');\n    cli.register(new RunCmd(application, logger), new AppListCmdDeprecated(application), appCmd);\n\n    return application;\n  }\n}\n\nApplicationAspect.addRuntime(ApplicationMain);\n"]}