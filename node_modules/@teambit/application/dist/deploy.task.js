"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.flat-map.js");

require("core-js/modules/es.array.unscopables.flat-map.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeployTask = exports.BUILD_UI_TASK = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _pMapSeries() {
  const data = _interopRequireDefault(require("p-map-series"));

  _pMapSeries = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _application() {
  const data = require("./application.aspect");

  _application = function () {
    return data;
  };

  return data;
}

const BUILD_UI_TASK = 'build_ui_application';
exports.BUILD_UI_TASK = BUILD_UI_TASK;

class DeployTask {
  constructor(application) {
    this.application = application;
    (0, _defineProperty2().default)(this, "name", BUILD_UI_TASK);
    (0, _defineProperty2().default)(this, "aspectId", _application().ApplicationAspect.id);
  }

  async execute(context) {
    const apps = this.application.listApps();
    const componentsResultsUi = await (0, _pMapSeries().default)(apps, async app => {
      const aspectId = this.application.getAppAspect(app.name);
      if (!aspectId) return undefined;
      const capsules = context.capsuleNetwork.seedersCapsules;
      const capsule = this.getCapsule(capsules, aspectId);
      if (!capsule) return undefined;
      const deployContext = await app.build(context, aspectId, capsule);
      if (!deployContext.publicDir) return undefined;
      if (app.deploy) await app.deploy(deployContext);
      await this.deployToProviders(deployContext);
      return {
        component: capsule.component,
        metadata: {
          publicDir: deployContext.publicDir
        }
      };
    });
    return {
      componentsResults: componentsResultsUi.flatMap(f => f ? [f] : [])
    };
  }

  getCapsule(capsules, aspectId) {
    const aspectCapsuleId = _component().ComponentID.fromString(aspectId).toStringWithoutVersion();

    return capsules.find(capsule => capsule.component.id.toStringWithoutVersion() === aspectCapsuleId);
  }

  async deployToProviders(deployContext) {
    const providers = this.application.listProviders();
    await (0, _pMapSeries().default)(providers, async provider => provider.deploy(deployContext));
  }

}

exports.DeployTask = DeployTask;

//# sourceMappingURL=deploy.task.js.map