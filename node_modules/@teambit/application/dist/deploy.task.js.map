{"version":3,"sources":["deploy.task.ts"],"names":["BUILD_UI_TASK","DeployTask","constructor","application","ApplicationAspect","id","execute","context","apps","listApps","componentsResultsUi","app","aspectId","getAppAspect","name","undefined","capsules","capsuleNetwork","seedersCapsules","capsule","getCapsule","deployContext","build","publicDir","deploy","deployToProviders","component","metadata","componentsResults","flatMap","f","aspectCapsuleId","ComponentID","fromString","toStringWithoutVersion","find","providers","listProviders","provider"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,aAAa,GAAG,sBAAtB;;;AAEA,MAAMC,UAAN,CAAsC;AAI3CC,EAAAA,WAAW,CAASC,WAAT,EAAuC;AAAA,SAA9BA,WAA8B,GAA9BA,WAA8B;AAAA,kDAH3CH,aAG2C;AAAA,sDAFvCI,iCAAkBC,EAEqB;AAAE;;AAEvC,QAAPC,OAAO,CAACC,OAAD,EAAkD;AAC7D,UAAMC,IAAI,GAAG,KAAKL,WAAL,CAAiBM,QAAjB,EAAb;AACA,UAAMC,mBAAmB,GAAG,MAAM,2BAChCF,IADgC,EAEhC,MAAOG,GAAP,IAAqD;AACnD,YAAMC,QAAQ,GAAG,KAAKT,WAAL,CAAiBU,YAAjB,CAA8BF,GAAG,CAACG,IAAlC,CAAjB;AACA,UAAI,CAACF,QAAL,EAAe,OAAOG,SAAP;AACf,YAAMC,QAAQ,GAAGT,OAAO,CAACU,cAAR,CAAuBC,eAAxC;AACA,YAAMC,OAAO,GAAG,KAAKC,UAAL,CAAgBJ,QAAhB,EAA0BJ,QAA1B,CAAhB;AACA,UAAI,CAACO,OAAL,EAAc,OAAOJ,SAAP;AACd,YAAMM,aAAa,GAAG,MAAMV,GAAG,CAACW,KAAJ,CAAUf,OAAV,EAAmBK,QAAnB,EAA6BO,OAA7B,CAA5B;AACA,UAAI,CAACE,aAAa,CAACE,SAAnB,EAA8B,OAAOR,SAAP;AAC9B,UAAIJ,GAAG,CAACa,MAAR,EAAgB,MAAMb,GAAG,CAACa,MAAJ,CAAWH,aAAX,CAAN;AAChB,YAAM,KAAKI,iBAAL,CAAuBJ,aAAvB,CAAN;AACA,aAAO;AAAEK,QAAAA,SAAS,EAAEP,OAAO,CAACO,SAArB;AAAgCC,QAAAA,QAAQ,EAAE;AAAEJ,UAAAA,SAAS,EAAEF,aAAa,CAACE;AAA3B;AAA1C,OAAP;AACD,KAb+B,CAAlC;AAgBA,WAAO;AACLK,MAAAA,iBAAiB,EAAElB,mBAAmB,CAACmB,OAApB,CAA6BC,CAAD,IAAQA,CAAC,GAAG,CAACA,CAAD,CAAH,GAAS,EAA9C;AADd,KAAP;AAGD;;AAEOV,EAAAA,UAAU,CAACJ,QAAD,EAAsBJ,QAAtB,EAAwC;AACxD,UAAMmB,eAAe,GAAGC,yBAAYC,UAAZ,CAAuBrB,QAAvB,EAAiCsB,sBAAjC,EAAxB;;AACA,WAAOlB,QAAQ,CAACmB,IAAT,CAAehB,OAAD,IAAaA,OAAO,CAACO,SAAR,CAAkBrB,EAAlB,CAAqB6B,sBAArB,OAAkDH,eAA7E,CAAP;AACD;;AAE8B,QAAjBN,iBAAiB,CAACJ,aAAD,EAA+B;AAC5D,UAAMe,SAAS,GAAG,KAAKjC,WAAL,CAAiBkC,aAAjB,EAAlB;AACA,UAAM,2BAAUD,SAAV,EAAqB,MAAOE,QAAP,IAAoBA,QAAQ,CAACd,MAAT,CAAgBH,aAAhB,CAAzC,CAAN;AACD;;AArC0C","sourcesContent":["import mapSeries from 'p-map-series';\nimport { Capsule } from '@teambit/isolator';\nimport { BuildTask, BuiltTaskResult, BuildContext, ComponentResult } from '@teambit/builder';\nimport { ComponentID } from '@teambit/component';\nimport { ApplicationAspect } from './application.aspect';\nimport { ApplicationMain } from './application.main.runtime';\nimport { DeployContext } from './deploy-context';\n\nexport const BUILD_UI_TASK = 'build_ui_application';\n\nexport class DeployTask implements BuildTask {\n  name = BUILD_UI_TASK;\n  aspectId = ApplicationAspect.id;\n\n  constructor(private application: ApplicationMain) {}\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const apps = this.application.listApps();\n    const componentsResultsUi = await mapSeries(\n      apps,\n      async (app): Promise<ComponentResult | undefined> => {\n        const aspectId = this.application.getAppAspect(app.name);\n        if (!aspectId) return undefined;\n        const capsules = context.capsuleNetwork.seedersCapsules;\n        const capsule = this.getCapsule(capsules, aspectId);\n        if (!capsule) return undefined;\n        const deployContext = await app.build(context, aspectId, capsule);\n        if (!deployContext.publicDir) return undefined;\n        if (app.deploy) await app.deploy(deployContext);\n        await this.deployToProviders(deployContext);\n        return { component: capsule.component, metadata: { publicDir: deployContext.publicDir } };\n      }\n    );\n\n    return {\n      componentsResults: componentsResultsUi.flatMap((f) => (f ? [f] : [])),\n    };\n  }\n\n  private getCapsule(capsules: Capsule[], aspectId: string) {\n    const aspectCapsuleId = ComponentID.fromString(aspectId).toStringWithoutVersion();\n    return capsules.find((capsule) => capsule.component.id.toStringWithoutVersion() === aspectCapsuleId);\n  }\n\n  private async deployToProviders(deployContext: DeployContext) {\n    const providers = this.application.listProviders();\n    await mapSeries(providers, async (provider) => provider.deploy(deployContext));\n  }\n}\n"]}