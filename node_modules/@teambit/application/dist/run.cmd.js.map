{"version":3,"sources":["run.cmd.tsx"],"names":["RunCmd","constructor","application","logger","report","appName","dev","off","port","runApp","render"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,MAAN,CAAgC;AAUrCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,WAJC,EAMDC,MANC,EAOT;AAAA,SAHQD,WAGR,GAHQA,WAGR;AAAA,SADQC,MACR,GADQA,MACR;AAAA,kDAhBK,WAgBL;AAAA,yDAfY,oBAeZ;AAAA,mDAdM,GAcN;AAAA,mDAbM,MAaN;AAAA,qDAZQ,CACR,CAAC,GAAD,EAAM,KAAN,EAAa,oCAAb,CADQ,EAER,CAAC,GAAD,EAAM,SAAN,EAAiB,8DAAjB,CAFQ,CAYR;AAAE;;AAEQ,QAANC,MAAM,CACV,CAACC,OAAD,CADU,EAEV;AAAEC,IAAAA;AAAF,GAFU,EAGO;AACjB,SAAKH,MAAL,CAAYI,GAAZ;AAEA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAM,KAAKN,WAAL,CAAiBO,MAAjB,CAAwBJ,OAAxB,EAAiC;AACtDC,MAAAA;AADsD,KAAjC,CAAvB;AAIA,WAAQ,GAAED,OAAQ,wBAAuBG,IAAK,EAA9C;AACD;;AAEW,QAANE,MAAM,CACV,CAACL,OAAD,CADU,EAEV;AAAEC,IAAAA;AAAF,GAFU,EAGmB;AAC7B;AACA,UAAM;AAAEE,MAAAA;AAAF,QAAW,MAAM,KAAKN,WAAL,CAAiBO,MAAjB,CAAwBJ,OAAxB,EAAiC;AACtDC,MAAAA;AADsD,KAAjC,CAAvB;AAIA,wBACE,+BAAC,WAAD,QACGD,OADH,2BACiCG,IADjC,CADF,CAN6B,CAW7B;AACD;;AA/CoC","sourcesContent":["import React from 'react';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { Text } from 'ink';\nimport { Logger } from '@teambit/logger';\nimport { ApplicationMain } from './application.main.runtime';\n\nexport class RunCmd implements Command {\n  name = 'run <app>';\n  description = 'run an application';\n  alias = 'c';\n  group = 'apps';\n  options = [\n    ['d', 'dev', 'start the application in dev mode.'],\n    ['v', 'verbose', 'showing verbose output for inspection and prints stack trace'],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * access to the extension instance.\n     */\n    private application: ApplicationMain,\n\n    private logger: Logger\n  ) {}\n\n  async report(\n    [appName]: [string],\n    { dev }: { dev: boolean; port: string; rebuild: boolean; verbose: boolean; suppressBrowserLaunch: boolean }\n  ): Promise<string> {\n    this.logger.off();\n\n    const { port } = await this.application.runApp(appName, {\n      dev,\n    });\n\n    return `${appName} has started on port ${port}`;\n  }\n\n  async render(\n    [appName]: [string],\n    { dev }: { dev: boolean; rebuild: boolean; verbose: boolean; suppressBrowserLaunch: boolean }\n  ): Promise<React.ReactElement> {\n    // remove wds logs until refactoring webpack to a worker through the Worker aspect.\n    const { port } = await this.application.runApp(appName, {\n      dev,\n    });\n\n    return (\n      <Text>\n        {appName} has started on port {port}\n      </Text>\n    );\n    // return <UIServerConsole appName={appName} futureUiServer={uiServer} />;\n  }\n}\n"]}