{"version":3,"sources":["core-aspects.ts"],"names":["getAspectDir","id","aspectName","getCoreAspectName","packageName","getCoreAspectPackageName","dirPath","moduleDirectory","require","resolve","err","__dirname","Error","getAspectDistDir","name","split","join","getAspectDef","runtime","files","runtimeFile","find","file","includes","aspectPath","runtimePath"],"mappings":";;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,SAASA,YAAT,CAAsBC,EAAtB,EAA0C;AAC/C,QAAMC,UAAU,GAAGC,iBAAiB,CAACF,EAAD,CAApC;AACA,QAAMG,WAAW,GAAGC,wBAAwB,CAACJ,EAAD,CAA5C;AACA,MAAIK,OAAJ;;AACA,MAAI;AACF,UAAMC,eAAe,GAAGC,OAAO,CAACC,OAAR,CAAgBL,WAAhB,CAAxB;;AACAE,IAAAA,OAAO,GAAG,kBAAKC,eAAL,EAAsB,OAAtB,CAAV,CAFE,CAEwC;AAC3C,GAHD,CAGE,OAAOG,GAAP,EAAiB;AACjBJ,IAAAA,OAAO,GAAG,qBAAQK,SAAR,EAAmB,OAAnB,EAA4BT,UAA5B,EAAwC,MAAxC,CAAV;AACD;;AACD,MAAI,CAAC,2BAAWI,OAAX,CAAL,EAA0B;AACxB,UAAM,IAAIM,KAAJ,CAAW,kBAAiBV,UAAW,OAAMI,OAAQ,EAArD,CAAN;AACD;;AACD,SAAOA,OAAP;AACD;;AAEM,SAASO,gBAAT,CAA0BZ,EAA1B,EAAsC;AAC3C,SAAO,qBAAS,GAAED,YAAY,CAACC,EAAD,CAAK,OAA5B,CAAP;AACD;;AAEM,SAASE,iBAAT,CAA2BF,EAA3B,EAA+C;AACpD,QAAM,GAAG,GAAGa,IAAN,IAAcb,EAAE,CAACc,KAAH,CAAS,GAAT,CAApB;AACA,QAAMb,UAAU,GAAGY,IAAI,CAACE,IAAL,CAAU,GAAV,CAAnB;AACA,SAAOd,UAAP;AACD;;AAEM,SAASG,wBAAT,CAAkCJ,EAAlC,EAAsD;AAC3D,QAAMC,UAAU,GAAGC,iBAAiB,CAACF,EAAD,CAApC;AACA,SAAQ,YAAWC,UAAW,EAA9B;AACD;;AAEM,eAAee,YAAf,CAA4Bf,UAA5B,EAAgDgB,OAAhD,EAAkE;AACvE,QAAMZ,OAAO,GAAGO,gBAAgB,CAACX,UAAD,CAAhC;AAEA,QAAMiB,KAAK,GAAG,MAAM,wBAAQb,OAAR,CAApB;AACA,MAAIc,WAAJ;;AACA,MAAIF,OAAJ,EAAa;AACXE,IAAAA,WAAW,GAAGD,KAAK,CAACE,IAAN,CAAYC,IAAD,IAAUA,IAAI,CAACC,QAAL,CAAe,IAAGL,OAAQ,aAA1B,CAArB,KAAiE,IAA/E;AACD;;AAED,SAAO;AACLjB,IAAAA,EAAE,EAAEC,UADC;AAELsB,IAAAA,UAAU,EAAE,kBAAKlB,OAAL,EAAc,IAAd,CAFP;AAGLmB,IAAAA,WAAW,EAAEL,WAAW,GAAG,qBAAS,GAAEd,OAAQ,IAAGc,WAAY,EAAlC,CAAH,GAA0C;AAH7D,GAAP;AAKD","sourcesContent":["import { existsSync, readdir } from 'fs-extra';\nimport { join, resolve } from 'path';\n\nexport function getAspectDir(id: string): string {\n  const aspectName = getCoreAspectName(id);\n  const packageName = getCoreAspectPackageName(id);\n  let dirPath: string;\n  try {\n    const moduleDirectory = require.resolve(packageName);\n    dirPath = join(moduleDirectory, '../..'); // to remove the \"index.js\" at the end\n  } catch (err: any) {\n    dirPath = resolve(__dirname, '../..', aspectName, 'dist');\n  }\n  if (!existsSync(dirPath)) {\n    throw new Error(`unable to find ${aspectName} in ${dirPath}`);\n  }\n  return dirPath;\n}\n\nexport function getAspectDistDir(id: string) {\n  return resolve(`${getAspectDir(id)}/dist`);\n}\n\nexport function getCoreAspectName(id: string): string {\n  const [, ...name] = id.split('/');\n  const aspectName = name.join('.');\n  return aspectName;\n}\n\nexport function getCoreAspectPackageName(id: string): string {\n  const aspectName = getCoreAspectName(id);\n  return `@teambit/${aspectName}`;\n}\n\nexport async function getAspectDef(aspectName: string, runtime?: string) {\n  const dirPath = getAspectDistDir(aspectName);\n\n  const files = await readdir(dirPath);\n  let runtimeFile;\n  if (runtime) {\n    runtimeFile = files.find((file) => file.includes(`.${runtime}.runtime.js`)) || null;\n  }\n\n  return {\n    id: aspectName,\n    aspectPath: join(dirPath, '..'),\n    runtimePath: runtimeFile ? resolve(`${dirPath}/${runtimeFile}`) : null,\n  };\n}\n"]}