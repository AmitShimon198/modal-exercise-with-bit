import { BabelMain } from '@teambit/babel';
import { CompilerMain, Compiler } from '@teambit/compiler';
import { Environment } from '@teambit/envs';
import { TsConfigSourceFile } from 'typescript';
import { ReactEnv } from '@teambit/react';
export declare const AspectEnvType = "aspect";
export declare class AspectEnv implements Environment {
    private reactEnv;
    private babel;
    private compiler;
    constructor(reactEnv: ReactEnv, babel: BabelMain, compiler: CompilerMain);
    icon: string;
    __getDescriptor(): Promise<{
        type: string;
    }>;
    getTsConfig(tsConfig: TsConfigSourceFile): any;
    getCompiler(): import("@teambit/babel").BabelCompiler;
    createTsCompiler(tsConfig: TsConfigSourceFile): Compiler;
    getDependencies(): Promise<{
        dependencies: {
            react: string;
            'react-dom': string;
            'core-js': string;
            '@babel/runtime': string;
        };
        devDependencies: {
            react: string;
            'react-dom': string;
            '@types/mocha': string;
            '@types/node': string;
            '@types/react': string;
            '@types/react-dom': string;
            '@types/jest': string;
            '@types/testing-library__jest-dom': string;
        };
        peerDependencies: {
            react: string;
            'react-dom': string;
        };
    }>;
    getBuildPipe(): (import("@teambit/builder").BuildTask | import("@teambit/compiler/compiler.task").CompilerTask)[];
}
