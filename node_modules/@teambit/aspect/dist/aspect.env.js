"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AspectEnv = exports.AspectEnvType = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _compiler() {
  const data = require("@teambit/compiler");

  _compiler = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _babelConfig() {
  const data = require("./babel/babel-config");

  _babelConfig = function () {
    return data;
  };

  return data;
}

const tsconfig = require('./typescript/tsconfig.json');

const AspectEnvType = 'aspect';
/**
 * a component environment built for [Aspects](https://reactjs.org) .
 */

exports.AspectEnvType = AspectEnvType;

class AspectEnv {
  constructor(reactEnv, babel, compiler) {
    this.reactEnv = reactEnv;
    this.babel = babel;
    this.compiler = compiler;
    (0, _defineProperty2().default)(this, "icon", 'https://static.bit.dev/extensions-icons/default.svg');
  }

  async __getDescriptor() {
    return {
      type: AspectEnvType
    };
  }

  getTsConfig(tsConfig) {
    const targetConf = (0, _lodash().merge)(tsconfig, tsConfig);
    return targetConf;
  }

  getCompiler() {
    return this.babel.createCompiler({
      babelTransformOptions: _babelConfig().babelConfig
    });
  }

  createTsCompiler(tsConfig) {
    return this.reactEnv.getCompiler(this.getTsConfig(tsConfig));
  }

  async getDependencies() {
    return {
      dependencies: {
        react: '-',
        'react-dom': '-',
        'core-js': '^3.0.0',
        // For aspects the babel runtime should be a runtime dep not only dev as they are compiled by babel
        '@babel/runtime': '7.12.18'
      },
      // TODO: add this only if using ts
      devDependencies: {
        react: '-',
        'react-dom': '-',
        '@types/mocha': '-',
        '@types/node': '12.20.4',
        '@types/react': '^17.0.8',
        '@types/react-dom': '^17.0.5',
        '@types/jest': '^26.0.0',
        '@types/testing-library__jest-dom': '5.9.5'
      },
      peerDependencies: {
        // TODO: check if we really need react for aspects (maybe for ink support)
        react: '^16.8.0 || ^17.0.0',
        'react-dom': '^16.8.0 || ^17.0.0'
      }
    };
  } // TODO: move this to be in the aspect.main.runtime and use the react.overrideBuildPipe API.
  // TODO: see example in e2e/fixtures/extensions/multiple-compilers-env/multiple-compilers-env.extension.ts
  // TODO: or maybe even use the - react.overrideCompilerTasks


  getBuildPipe() {
    const transformer = config => {
      config.mergeTsConfig(tsconfig).setArtifactName('declaration').setDistGlobPatterns([`dist/**/*.d.ts`]).setShouldCopyNonSupportedFiles(false);
      return config;
    };

    const tsCompiler = this.reactEnv.getCompiler([transformer]);
    const babelCompiler = this.babel.createCompiler({
      babelTransformOptions: _babelConfig().babelConfig
    });
    const pipeWithoutCompiler = this.reactEnv.getBuildPipe().filter(task => task.aspectId !== _compiler().CompilerAspect.id);
    return [this.compiler.createTask('TypescriptCompiler', tsCompiler), // for d.ts files
    this.compiler.createTask('BabelCompiler', babelCompiler), // for dists
    ...pipeWithoutCompiler];
  }

}

exports.AspectEnv = AspectEnv;

//# sourceMappingURL=aspect.env.js.map