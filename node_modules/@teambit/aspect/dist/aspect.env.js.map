{"version":3,"sources":["aspect.env.ts"],"names":["tsconfig","require","AspectEnvType","AspectEnv","constructor","reactEnv","babel","compiler","__getDescriptor","type","getTsConfig","tsConfig","targetConf","getCompiler","createCompiler","babelTransformOptions","babelConfig","createTsCompiler","getDependencies","dependencies","react","devDependencies","peerDependencies","getBuildPipe","transformer","config","mergeTsConfig","setArtifactName","setDistGlobPatterns","setShouldCopyNonSupportedFiles","tsCompiler","babelCompiler","pipeWithoutCompiler","filter","task","aspectId","CompilerAspect","id","createTask"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,4BAAD,CAAxB;;AAEO,MAAMC,aAAa,GAAG,QAAtB;AAEP;AACA;AACA;;;;AACO,MAAMC,SAAN,CAAuC;AAC5CC,EAAAA,WAAW,CAASC,QAAT,EAAqCC,KAArC,EAA+DC,QAA/D,EAAuF;AAAA,SAA9EF,QAA8E,GAA9EA,QAA8E;AAAA,SAAlDC,KAAkD,GAAlDA,KAAkD;AAAA,SAAxBC,QAAwB,GAAxBA,QAAwB;AAAA,kDAE3F,qDAF2F;AAAE;;AAI/E,QAAfC,eAAe,GAAG;AACtB,WAAO;AACLC,MAAAA,IAAI,EAAEP;AADD,KAAP;AAGD;;AAEDQ,EAAAA,WAAW,CAACC,QAAD,EAA+B;AACxC,UAAMC,UAAU,GAAG,qBAAMZ,QAAN,EAAgBW,QAAhB,CAAnB;AACA,WAAOC,UAAP;AACD;;AAEDC,EAAAA,WAAW,GAAG;AACZ,WAAO,KAAKP,KAAL,CAAWQ,cAAX,CAA0B;AAAEC,MAAAA,qBAAqB,EAAEC;AAAzB,KAA1B,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,CAACN,QAAD,EAAyC;AACvD,WAAO,KAAKN,QAAL,CAAcQ,WAAd,CAA0B,KAAKH,WAAL,CAAiBC,QAAjB,CAA1B,CAAP;AACD;;AAEoB,QAAfO,eAAe,GAAG;AACtB,WAAO;AACLC,MAAAA,YAAY,EAAE;AACZC,QAAAA,KAAK,EAAE,GADK;AAEZ,qBAAa,GAFD;AAGZ,mBAAW,QAHC;AAIZ;AACA,0BAAkB;AALN,OADT;AAQL;AACAC,MAAAA,eAAe,EAAE;AACfD,QAAAA,KAAK,EAAE,GADQ;AAEf,qBAAa,GAFE;AAGf,wBAAgB,GAHD;AAIf,uBAAe,SAJA;AAKf,wBAAgB,SALD;AAMf,4BAAoB,SANL;AAOf,uBAAe,SAPA;AAQf,4CAAoC;AARrB,OATZ;AAmBLE,MAAAA,gBAAgB,EAAE;AAChB;AACAF,QAAAA,KAAK,EAAE,oBAFS;AAGhB,qBAAa;AAHG;AAnBb,KAAP;AAyBD,GAlD2C,CAoD5C;AACA;AACA;;;AACAG,EAAAA,YAAY,GAAG;AACb,UAAMC,WAAgC,GAAIC,MAAD,IAAqC;AAC5EA,MAAAA,MAAM,CACHC,aADH,CACiB1B,QADjB,EAEG2B,eAFH,CAEmB,aAFnB,EAGGC,mBAHH,CAGuB,CAAE,gBAAF,CAHvB,EAIGC,8BAJH,CAIkC,KAJlC;AAKA,aAAOJ,MAAP;AACD,KAPD;;AAQA,UAAMK,UAAU,GAAG,KAAKzB,QAAL,CAAcQ,WAAd,CAA0B,CAACW,WAAD,CAA1B,CAAnB;AAEA,UAAMO,aAAa,GAAG,KAAKzB,KAAL,CAAWQ,cAAX,CAA0B;AAAEC,MAAAA,qBAAqB,EAAEC;AAAzB,KAA1B,CAAtB;AAEA,UAAMgB,mBAAmB,GAAG,KAAK3B,QAAL,CAAckB,YAAd,GAA6BU,MAA7B,CAAqCC,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkBC,2BAAeC,EAA/E,CAA5B;AAEA,WAAO,CACL,KAAK9B,QAAL,CAAc+B,UAAd,CAAyB,oBAAzB,EAA+CR,UAA/C,CADK,EACuD;AAC5D,SAAKvB,QAAL,CAAc+B,UAAd,CAAyB,eAAzB,EAA0CP,aAA1C,CAFK,EAEqD;AAC1D,OAAGC,mBAHE,CAAP;AAKD;;AA3E2C","sourcesContent":["import { TypescriptConfigMutator } from '@teambit/typescript.modules.ts-config-mutator';\nimport { TsConfigTransformer } from '@teambit/typescript';\nimport { BabelMain } from '@teambit/babel';\nimport { CompilerAspect, CompilerMain, Compiler } from '@teambit/compiler';\nimport { Environment } from '@teambit/envs';\nimport { merge } from 'lodash';\nimport { TsConfigSourceFile } from 'typescript';\nimport { ReactEnv } from '@teambit/react';\nimport { babelConfig } from './babel/babel-config';\n\nconst tsconfig = require('./typescript/tsconfig.json');\n\nexport const AspectEnvType = 'aspect';\n\n/**\n * a component environment built for [Aspects](https://reactjs.org) .\n */\nexport class AspectEnv implements Environment {\n  constructor(private reactEnv: ReactEnv, private babel: BabelMain, private compiler: CompilerMain) {}\n\n  icon = 'https://static.bit.dev/extensions-icons/default.svg';\n\n  async __getDescriptor() {\n    return {\n      type: AspectEnvType,\n    };\n  }\n\n  getTsConfig(tsConfig: TsConfigSourceFile) {\n    const targetConf = merge(tsconfig, tsConfig);\n    return targetConf;\n  }\n\n  getCompiler() {\n    return this.babel.createCompiler({ babelTransformOptions: babelConfig });\n  }\n\n  createTsCompiler(tsConfig: TsConfigSourceFile): Compiler {\n    return this.reactEnv.getCompiler(this.getTsConfig(tsConfig));\n  }\n\n  async getDependencies() {\n    return {\n      dependencies: {\n        react: '-',\n        'react-dom': '-',\n        'core-js': '^3.0.0',\n        // For aspects the babel runtime should be a runtime dep not only dev as they are compiled by babel\n        '@babel/runtime': '7.12.18',\n      },\n      // TODO: add this only if using ts\n      devDependencies: {\n        react: '-',\n        'react-dom': '-',\n        '@types/mocha': '-',\n        '@types/node': '12.20.4',\n        '@types/react': '^17.0.8',\n        '@types/react-dom': '^17.0.5',\n        '@types/jest': '^26.0.0',\n        '@types/testing-library__jest-dom': '5.9.5',\n      },\n      peerDependencies: {\n        // TODO: check if we really need react for aspects (maybe for ink support)\n        react: '^16.8.0 || ^17.0.0',\n        'react-dom': '^16.8.0 || ^17.0.0',\n      },\n    };\n  }\n\n  // TODO: move this to be in the aspect.main.runtime and use the react.overrideBuildPipe API.\n  // TODO: see example in e2e/fixtures/extensions/multiple-compilers-env/multiple-compilers-env.extension.ts\n  // TODO: or maybe even use the - react.overrideCompilerTasks\n  getBuildPipe() {\n    const transformer: TsConfigTransformer = (config: TypescriptConfigMutator) => {\n      config\n        .mergeTsConfig(tsconfig)\n        .setArtifactName('declaration')\n        .setDistGlobPatterns([`dist/**/*.d.ts`])\n        .setShouldCopyNonSupportedFiles(false);\n      return config;\n    };\n    const tsCompiler = this.reactEnv.getCompiler([transformer]);\n\n    const babelCompiler = this.babel.createCompiler({ babelTransformOptions: babelConfig });\n\n    const pipeWithoutCompiler = this.reactEnv.getBuildPipe().filter((task) => task.aspectId !== CompilerAspect.id);\n\n    return [\n      this.compiler.createTask('TypescriptCompiler', tsCompiler), // for d.ts files\n      this.compiler.createTask('BabelCompiler', babelCompiler), // for dists\n      ...pipeWithoutCompiler,\n    ];\n  }\n}\n"]}