import { AspectLoaderMain } from '@teambit/aspect-loader';
import { BuilderMain } from '@teambit/builder';
import { EnvsMain, EnvTransformer } from '@teambit/envs';
import { ReactMain } from '@teambit/react';
import { GeneratorMain } from '@teambit/generator';
import { BabelMain } from '@teambit/babel';
import { CompilerMain } from '@teambit/compiler';
import { AspectEnv } from './aspect.env';
export declare class AspectMain {
    readonly aspectEnv: AspectEnv;
    private envs;
    constructor(aspectEnv: AspectEnv, envs: EnvsMain);
    compose(transformers?: EnvTransformer[]): import("@teambit/envs").Environment;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([react, envs, builder, aspectLoader, compiler, babel, generator]: [
        ReactMain,
        EnvsMain,
        BuilderMain,
        AspectLoaderMain,
        CompilerMain,
        BabelMain,
        GeneratorMain
    ]): Promise<AspectMain>;
}
