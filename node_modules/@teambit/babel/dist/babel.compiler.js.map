{"version":3,"sources":["babel.compiler.ts"],"names":["BabelCompiler","constructor","id","logger","compiler","options","babelModule","babel","distDir","distGlobPatterns","shouldCopyNonSupportedFiles","artifactName","version","transpileFile","fileContent","supportedExtensions","fileExtension","path","extname","filePath","includes","endsWith","transformOptions","babelTransformOptions","context","rootDir","componentDir","outputFiles","build","capsules","capsuleNetwork","seedersCapsules","componentsResults","longProcessLogger","createLongProcessLogger","length","capsule","currentComponentResult","errors","component","logProgress","toString","buildOneCapsule","push","artifacts","getArtifactDefinition","createTask","name","componentResult","startTime","Date","now","sourceFiles","filesystem","files","map","file","relative","fs","ensureDir","join","Promise","all","absoluteFilePath","sourceFileName","basename","filename","result","debug","distPath","replaceFileExtToJs","distPathMap","outputFile","outputText","err","endTime","generatedBy","globPatterns","getDistPathBySrcPath","srcPath","fileWithJSExtIfNeeded","isFileSupported","displayConfig","JSON","stringify"],"mappings":"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","sourcesContent":["import * as babel from '@babel/core';\nimport mapSeries from 'p-map-series';\nimport fs from 'fs-extra';\nimport { BuildContext, BuiltTaskResult, ComponentResult } from '@teambit/builder';\nimport { Compiler, CompilerMain, TranspileFileParams, TranspileFileOutput } from '@teambit/compiler';\nimport { Capsule } from '@teambit/isolator';\nimport { Logger } from '@teambit/logger';\nimport path from 'path';\nimport {\n  isFileSupported,\n  transpileFileContent,\n  transpileFilePathAsync,\n  replaceFileExtToJs,\n  TranspileContext,\n} from '@teambit/compilation.modules.babel-compiler';\nimport { BabelCompilerOptions } from './compiler-options';\n\nexport class BabelCompiler implements Compiler {\n  distDir: string;\n  distGlobPatterns: string[];\n  shouldCopyNonSupportedFiles: boolean;\n  artifactName: string;\n  constructor(\n    readonly id: string,\n    private logger: Logger,\n    private compiler: CompilerMain,\n    private options: BabelCompilerOptions,\n    private babelModule = babel\n  ) {\n    this.distDir = options.distDir || 'dist';\n    this.distGlobPatterns = options.distGlobPatterns || [`${this.distDir}/**`, `!${this.distDir}/tsconfig.tsbuildinfo`];\n    this.shouldCopyNonSupportedFiles =\n      typeof options.shouldCopyNonSupportedFiles === 'boolean' ? options.shouldCopyNonSupportedFiles : true;\n    this.artifactName = options.artifactName || 'dist';\n  }\n\n  displayName = 'Babel';\n\n  version() {\n    return this.babelModule.version;\n  }\n\n  /**\n   * compile one file on the workspace\n   */\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    const supportedExtensions = ['.ts', '.tsx', '.js', '.jsx'];\n    const fileExtension = path.extname(options.filePath);\n    if (!supportedExtensions.includes(fileExtension) || options.filePath.endsWith('.d.ts')) {\n      return null; // file is not supported\n    }\n    const transformOptions = this.options.babelTransformOptions || {};\n    const context: TranspileContext = {\n      filePath: options.filePath,\n      rootDir: options.componentDir,\n    };\n    const outputFiles = transpileFileContent(fileContent, context, transformOptions, this.babelModule);\n    return outputFiles;\n  }\n\n  /**\n   * compile multiple components on the capsules\n   */\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const capsules = context.capsuleNetwork.seedersCapsules;\n    const componentsResults: ComponentResult[] = [];\n    const longProcessLogger = this.logger.createLongProcessLogger('compile babel components', capsules.length);\n    await mapSeries(capsules, async (capsule) => {\n      const currentComponentResult: ComponentResult = {\n        errors: [],\n        component: capsule.component,\n      };\n      longProcessLogger.logProgress(capsule.component.id.toString());\n      await this.buildOneCapsule(capsule, currentComponentResult);\n      componentsResults.push({ ...currentComponentResult });\n    });\n\n    return {\n      artifacts: this.getArtifactDefinition(),\n      componentsResults,\n    };\n  }\n\n  createTask(name = 'BabelCompiler') {\n    return this.compiler.createTask(name, this);\n  }\n\n  private async buildOneCapsule(capsule: Capsule, componentResult: ComponentResult) {\n    componentResult.startTime = Date.now();\n    const sourceFiles = capsule.component.filesystem.files.map((file) => file.relative);\n    await fs.ensureDir(path.join(capsule.path, this.distDir));\n    await Promise.all(\n      sourceFiles.map(async (filePath) => {\n        const absoluteFilePath = path.join(capsule.path, filePath);\n        this.options.babelTransformOptions ||= {};\n        this.options.babelTransformOptions.sourceFileName = path.basename(filePath);\n        this.options.babelTransformOptions.filename = path.basename(filePath);\n        try {\n          const result = await transpileFilePathAsync(\n            absoluteFilePath,\n            this.options.babelTransformOptions || {},\n            this.babelModule\n          );\n          if (!result || !result.length) {\n            this.logger.debug(\n              `getting an empty response from Babel for the file ${filePath}. it might be configured to be ignored`\n            );\n            return;\n          }\n          // Make sure to get only the relative path of the dist because we want to add the dist dir.\n          // If we use the result outputPath we will get an absolute path here\n          const distPath = this.replaceFileExtToJs(filePath);\n          const distPathMap = `${distPath}.map`;\n          await fs.outputFile(path.join(capsule.path, this.distDir, distPath), result[0].outputText);\n          if (result.length > 1) {\n            await fs.outputFile(path.join(capsule.path, this.distDir, distPathMap), result[1].outputText);\n          }\n        } catch (err: any) {\n          componentResult.errors?.push(err);\n        }\n      })\n    );\n    componentResult.endTime = Date.now();\n  }\n\n  getArtifactDefinition() {\n    return [\n      {\n        generatedBy: this.id,\n        name: this.artifactName,\n        globPatterns: this.distGlobPatterns,\n      },\n    ];\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. index.ts => dist/index.js\n   */\n  getDistPathBySrcPath(srcPath: string) {\n    const fileWithJSExtIfNeeded = this.replaceFileExtToJs(srcPath);\n    return path.join(this.distDir, fileWithJSExtIfNeeded);\n  }\n\n  /**\n   * whether babel is able to compile the given path\n   */\n  isFileSupported(filePath: string): boolean {\n    return isFileSupported(filePath);\n  }\n\n  displayConfig() {\n    return JSON.stringify(this.options.babelTransformOptions || {}, null, 2);\n  }\n\n  private replaceFileExtToJs(filePath: string): string {\n    if (!this.isFileSupported(filePath)) return filePath;\n    return replaceFileExtToJs(filePath);\n  }\n}\n"]}