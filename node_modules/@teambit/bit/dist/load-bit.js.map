{"version":3,"sources":["load-bit.ts"],"names":["process","on","err","console","error","exit","require","loadLegacyConfig","config","harmony","Harmony","load","ConfigAspect","ConfigRuntime","name","toObject","run","aspect","runtime","requireAspects","getConfig","cwd","consumerInfo","scopePath","globalConfigOpts","configOpts","global","shouldThrow","path","Config","attachVersionsFromBitmap","loadGlobal","hasBitMap","rawConfig","rawBitmap","BitMap","loadRawSync","parsedBitMap","json","parse","toString","undefined","removeNonComponentFields","e","allBitmapIds","Object","keys","map","id","getBitIdFromComponentJson","bitMapBitIds","BitIds","fromArray","result","entries","reduce","acc","aspectId","aspectConfig","newAspectEntry","includes","VERSION_DELIMITER","manifestsMap","versionFromBitmap","getVersionFromBitMapIds","aspectBitId","BitId","Error","found","searchWithoutVersion","searchWithoutScopeAndVersion","hasVersion","version","dirPath","files","runtimeFile","find","file","getMainAspect","mainAspectDir","BitAspect","packageName","packageJson","shouldLoadInSafeMode","currentCommand","argv","safeModeCommands","hasSafeModeFlag","isSafeModeCommand","loadBit","clearGlobalsIfNeeded","loadCLIOnly","configMap","aspectsToLoad","CLIAspect","push","MainRuntime","loader","start","aspectLoader","get","setCoreAspects","values","setMainAspect","registerCoreAspectsToLegacyDepResolver","runCLI","cli","hasWorkspace","allCoreAspectsIds","getCoreAspectIds","coreAspectsPackagesAndIds","forEach","DependencyResolver","getCoreAspectsPackagesAndIds","loadConsumer","cache","PackageJsonTransformer","packageJsonTransformersRegistry","length","ComponentLoader","onComponentLoadSubscribers","ComponentOverrides","componentOverridesLoadingRegistry","ComponentConfig","componentConfigLegacyLoadingRegistry","componentConfigLoadingRegistry","getWorkspacePolicy","ManyComponentsWriter","externalInstaller","ExtensionDataList","coreExtensionsNames","Map","WorkspaceConfig","workspaceConfigEnsuringRegistry","workspaceConfigIsExistRegistry","workspaceConfigLoadingRegistry"],"mappings":"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","sourcesContent":["/* eslint-disable import/no-dynamic-require */\n/* eslint-disable import/first */\nprocess.on('uncaughtException', (err) => {\n  // eslint-disable-next-line no-console\n  console.error('uncaughtException', err);\n  process.exit(1);\n});\n\nrequire('v8-compile-cache');\n\nimport './hook-require';\n\nimport {\n  getAspectDir,\n  getAspectDistDir,\n  AspectLoaderMain,\n  getCoreAspectPackageName,\n  getCoreAspectName,\n} from '@teambit/aspect-loader';\nimport json from 'comment-json';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { ConfigAspect, ConfigRuntime } from '@teambit/config';\nimport { Harmony, RuntimeDefinition } from '@teambit/harmony';\nimport { Extension } from '@teambit/harmony/dist/extension';\nimport { Config } from '@teambit/harmony/dist/harmony-config';\n// TODO: expose this type from harmony\nimport { ConfigOptions } from '@teambit/harmony/dist/harmony-config/harmony-config';\nimport { BitId, VERSION_DELIMITER } from '@teambit/legacy-bit-id';\nimport { DependencyResolver } from '@teambit/legacy/dist/consumer/component/dependencies/dependency-resolver';\nimport { getConsumerInfo, loadConsumer } from '@teambit/legacy/dist/consumer';\nimport { ConsumerInfo } from '@teambit/legacy/dist/consumer/consumer-locator';\nimport BitMap from '@teambit/legacy/dist/consumer/bit-map';\nimport ComponentLoader from '@teambit/legacy/dist/consumer/component/component-loader';\nimport ComponentConfig from '@teambit/legacy/dist/consumer/config/component-config';\nimport ComponentOverrides from '@teambit/legacy/dist/consumer/config/component-overrides';\nimport { PackageJsonTransformer } from '@teambit/legacy/dist/consumer/component/package-json-transformer';\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport WorkspaceConfig from '@teambit/legacy/dist/consumer/config/workspace-config';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { propogateUntil as propagateUntil } from '@teambit/legacy/dist/utils';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { readdir } from 'fs-extra';\nimport { resolve } from 'path';\nimport { manifestsMap } from './manifests';\nimport { BitAspect } from './bit.aspect';\nimport { registerCoreExtensions } from './bit.main.runtime';\n\nasync function loadLegacyConfig(config: any) {\n  const harmony = await Harmony.load([ConfigAspect], ConfigRuntime.name, config.toObject());\n  await harmony.run(async (aspect: Extension, runtime: RuntimeDefinition) => requireAspects(aspect, runtime));\n}\n\nasync function getConfig(cwd = process.cwd()) {\n  const consumerInfo = await getConsumerInfo(cwd);\n  const scopePath = propagateUntil(cwd);\n  const globalConfigOpts = {\n    name: '.bitrc.jsonc',\n  };\n  const configOpts: ConfigOptions = {\n    global: globalConfigOpts,\n    shouldThrow: false,\n    cwd: consumerInfo?.path || scopePath,\n  };\n\n  if (consumerInfo) {\n    const config = Config.load('workspace.jsonc', configOpts);\n    return attachVersionsFromBitmap(config, consumerInfo);\n  }\n\n  if (scopePath && !consumerInfo) {\n    return Config.load('scope.jsonc', configOpts);\n  }\n\n  return Config.loadGlobal(globalConfigOpts);\n}\n\n/**\n * This will attach versions of aspects configured in the config without version by resolves them from the bitmap file\n * It's required in order to support a usecase which you develop a local aspect and configure it in your workspace.jsonc\n * in that case you always want the workspace.jsonc config to be linked to your local aspect\n * but you don't want to change your workspace.jsonc version after each tag of the aspect\n * @param config\n */\nfunction attachVersionsFromBitmap(config: Config, consumerInfo: ConsumerInfo): Config {\n  if (!consumerInfo || !consumerInfo.hasBitMap) {\n    return config;\n  }\n  const rawConfig = config.toObject();\n  const rawBitmap = BitMap.loadRawSync(consumerInfo.path);\n  let parsedBitMap = {};\n  try {\n    parsedBitMap = rawBitmap ? json.parse(rawBitmap?.toString('utf8'), undefined, true) : {};\n    BitMap.removeNonComponentFields(parsedBitMap);\n    // Do nothing here, invalid bitmaps will be handled later\n    // eslint-disable-next-line no-empty\n  } catch (e: any) {}\n  const allBitmapIds = Object.keys(parsedBitMap).map((id) => BitMap.getBitIdFromComponentJson(id, parsedBitMap[id]));\n  const bitMapBitIds = BitIds.fromArray(allBitmapIds);\n  const result = Object.entries(rawConfig).reduce((acc, [aspectId, aspectConfig]) => {\n    let newAspectEntry = aspectId;\n    // In case the id already has a version we don't want to get it from the bitmap\n    // We also don't want to add versions for core aspects\n    if (!aspectId.includes(VERSION_DELIMITER) && !manifestsMap[aspectId]) {\n      const versionFromBitmap = getVersionFromBitMapIds(bitMapBitIds, aspectId);\n      if (versionFromBitmap) {\n        newAspectEntry = `${aspectId}${VERSION_DELIMITER}${versionFromBitmap}`;\n      }\n    }\n    acc[newAspectEntry] = aspectConfig;\n    return acc;\n  }, {});\n  return new Config(result);\n}\n\nfunction getVersionFromBitMapIds(allBitmapIds: BitIds, aspectId: string): string | undefined {\n  let aspectBitId: BitId;\n  try {\n    aspectBitId = BitId.parse(aspectId, true);\n  } catch (err: any) {\n    throw new Error(\n      `unable to parse the component-id \"${aspectId}\" from the workspace.jsonc file, make sure this is a component id`\n    );\n  }\n  // start by searching id in the bitmap with exact match (including scope name)\n  // in case the aspect is not exported yet, it will be in the bitmap without a scope,\n  // while in the aspect id it will have the default scope\n  const found =\n    allBitmapIds.searchWithoutVersion(aspectBitId) || allBitmapIds.searchWithoutScopeAndVersion(aspectBitId);\n  return found && found.hasVersion() ? found.version : undefined;\n}\n\nexport async function requireAspects(aspect: Extension, runtime: RuntimeDefinition) {\n  const id = aspect.name;\n  if (!id) throw new Error('could not retrieve aspect id');\n  const dirPath = getAspectDistDir(id);\n  const files = await readdir(dirPath);\n  const runtimeFile = files.find((file) => file.includes(`.${runtime.name}.runtime.js`));\n  if (!runtimeFile) return;\n  // eslint-disable-next-line\n  require(resolve(`${dirPath}/${runtimeFile}`));\n}\n\nfunction getMainAspect() {\n  const mainAspectDir = getAspectDir(BitAspect.id);\n  let version: string | undefined;\n  const packageName = getCoreAspectPackageName(BitAspect.id);\n\n  try {\n    // eslint-disable-next-line global-require\n    const packageJson = require(`${mainAspectDir}/package.json`);\n    version = packageJson.version;\n  } catch (err: any) {\n    version = undefined;\n  }\n\n  return {\n    path: mainAspectDir,\n    version,\n    packageName,\n    aspect: BitAspect,\n    name: getCoreAspectName(BitAspect.id),\n    id: BitAspect.id,\n  };\n}\n\n/**\n * Bit may crush during the aspect loading phase or workspace/consumer initialization.\n * normally, this is the desired behavior, however, some commands are there to help overcome these\n * errors, such as \"bit clear-cache\". for these commands we're better off loading the bare minimum,\n * which is only the CLI aspect.\n *\n * at this stage we don't have the commands objects, so we can't check the command/flags from there\n * instead, we have to check the `process.argv.` directly instead, which is not 100% accurate.\n */\nfunction shouldLoadInSafeMode() {\n  const currentCommand = process.argv[2];\n  const safeModeCommands = [\n    'cc',\n    'clear-cache',\n    'init',\n    'cat-scope',\n    'cat-object',\n    'cat-component',\n    'cmp',\n    'cat-lane',\n    'login',\n    'logout',\n    'config',\n  ];\n  const hasSafeModeFlag = process.argv.includes('--safe-mode');\n  const isSafeModeCommand = safeModeCommands.includes(currentCommand);\n  return isSafeModeCommand || hasSafeModeFlag;\n}\n\nexport async function loadBit(path = process.cwd()) {\n  clearGlobalsIfNeeded();\n  const loadCLIOnly = shouldLoadInSafeMode();\n  const config = await getConfig(path);\n  registerCoreExtensions();\n  await loadLegacyConfig(config);\n  const configMap = config.toObject();\n\n  configMap['teambit.harmony/bit'] = {\n    cwd: path,\n  };\n\n  const aspectsToLoad = [CLIAspect];\n  if (!loadCLIOnly) {\n    aspectsToLoad.push(BitAspect);\n  }\n  const harmony = await Harmony.load(aspectsToLoad, MainRuntime.name, configMap);\n\n  await harmony.run(async (aspect: Extension, runtime: RuntimeDefinition) => requireAspects(aspect, runtime));\n  if (loadCLIOnly) return harmony;\n  loader.start('loading aspects...');\n  const aspectLoader = harmony.get<AspectLoaderMain>('teambit.harmony/aspect-loader');\n  aspectLoader.setCoreAspects(Object.values(manifestsMap));\n  aspectLoader.setMainAspect(getMainAspect());\n  registerCoreAspectsToLegacyDepResolver(aspectLoader);\n  return harmony;\n}\n\nexport async function runCLI() {\n  const harmony = await loadBit();\n  const cli = harmony.get<CLIMain>('teambit.harmony/cli');\n  let hasWorkspace = true;\n  try {\n    harmony.get('teambit.workspace/workspace');\n  } catch (err: any) {\n    hasWorkspace = false;\n  }\n  await cli.run(hasWorkspace);\n}\n\nfunction registerCoreAspectsToLegacyDepResolver(aspectLoader: AspectLoaderMain) {\n  const allCoreAspectsIds = aspectLoader.getCoreAspectIds();\n  const coreAspectsPackagesAndIds = {};\n\n  allCoreAspectsIds.forEach((id) => {\n    const packageName = getCoreAspectPackageName(id);\n    coreAspectsPackagesAndIds[packageName] = id;\n  });\n  // @ts-ignore\n  DependencyResolver.getCoreAspectsPackagesAndIds = () => coreAspectsPackagesAndIds;\n}\n\n/**\n * loadBit may gets called multiple times (currently, it's happening during e2e-tests that call loadBit).\n * when it happens, the static methods in this function still have the callbacks that were added in\n * the previous loadBit call. this callbacks have the old data such as workspace/bitmap/consumer\n * of the previous workspace, which leads to hard-to-debug issues.\n */\nfunction clearGlobalsIfNeeded() {\n  if (!loadConsumer.cache && !PackageJsonTransformer.packageJsonTransformersRegistry.length) {\n    return;\n  }\n  delete loadConsumer.cache;\n  ComponentLoader.onComponentLoadSubscribers = [];\n  ComponentOverrides.componentOverridesLoadingRegistry = {};\n  ComponentConfig.componentConfigLegacyLoadingRegistry = {};\n  ComponentConfig.componentConfigLoadingRegistry = {};\n  PackageJsonTransformer.packageJsonTransformersRegistry = [];\n  // @ts-ignore\n  DependencyResolver.getWorkspacePolicy = undefined;\n  // @ts-ignore\n  ManyComponentsWriter.externalInstaller = {};\n  ExtensionDataList.coreExtensionsNames = new Map();\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigEnsuringRegistry = undefined;\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigIsExistRegistry = undefined;\n  // @ts-ignore\n  WorkspaceConfig.workspaceConfigLoadingRegistry = undefined;\n}\n"]}