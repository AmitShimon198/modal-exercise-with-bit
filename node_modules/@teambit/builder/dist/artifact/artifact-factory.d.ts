import { Component, ComponentMap } from '@teambit/component';
import type { StorageResolverSlot } from '../builder.main.runtime';
import { ArtifactDefinition } from './artifact-definition';
import { ArtifactList } from './artifact-list';
import { Artifact } from './artifact';
import type { BuildContext, BuildTask } from '../build-task';
export declare const DEFAULT_CONTEXT = "component";
export declare type ArtifactMap = ComponentMap<ArtifactList>;
export declare class ArtifactFactory {
    private storageResolverSlot;
    constructor(storageResolverSlot: StorageResolverSlot);
    private getResolver;
    private resolvePaths;
    private getArtifactContextPath;
    private getArtifactContext;
    createFromComponent(context: BuildContext, component: Component, def: ArtifactDefinition, task: BuildTask): Artifact | undefined;
    private getStorageResolver;
    private toComponentMap;
    private getRootDir;
    generate(context: BuildContext, defs: ArtifactDefinition[], task: BuildTask): ComponentMap<ArtifactList>;
}
