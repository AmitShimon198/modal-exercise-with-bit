{"version":3,"sources":["artifact-factory.ts"],"names":["DEFAULT_CONTEXT","ArtifactFactory","constructor","storageResolverSlot","getResolver","resolvers","name","defaultResolver","DefaultResolver","userResolver","find","resolver","resolvePaths","root","def","patternsFlattened","globPatterns","paths","globby","sync","cwd","getArtifactContextPath","context","component","artifactContext","getArtifactContext","capsulePath","capsuleNetwork","graphCapsules","getCapsule","id","path","CapsuleNotFound","capsulesRootDir","createFromComponent","task","storageResolver","getStorageResolver","rootDir","getRootDir","length","undefined","Artifact","ArtifactFiles","storageResolvers","values","toComponentMap","artifactMap","ComponentMap","as","components","toString","artifacts","filter","targetId","map","artifact","ArtifactList","generate","defs","tupleArr","forEach","capsuleDir","push"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport globby from 'globby';\nimport { flatten } from 'lodash';\nimport { ArtifactFiles } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { Component, ComponentMap } from '@teambit/component';\nimport type { StorageResolverSlot } from '../builder.main.runtime';\nimport { ArtifactDefinition } from './artifact-definition';\nimport { DefaultResolver, StorageResolver } from '../storage';\nimport { ArtifactList } from './artifact-list';\nimport { Artifact } from './artifact';\nimport type { BuildContext, BuildTask } from '../build-task';\nimport { CapsuleNotFound } from '../exceptions';\n\nexport const DEFAULT_CONTEXT = 'component';\n\nexport type ArtifactMap = ComponentMap<ArtifactList>;\n\nexport class ArtifactFactory {\n  constructor(private storageResolverSlot: StorageResolverSlot) {}\n\n  private getResolver(resolvers: StorageResolver[], name?: string) {\n    const defaultResolver = new DefaultResolver();\n    const userResolver = resolvers.find((resolver) => resolver.name === name);\n    return userResolver || defaultResolver;\n  }\n\n  private resolvePaths(root: string, def: ArtifactDefinition): string[] {\n    const patternsFlattened = flatten(def.globPatterns);\n    const paths = globby.sync(patternsFlattened, { cwd: root });\n    return paths;\n  }\n\n  private getArtifactContextPath(context: BuildContext, component: Component, def: ArtifactDefinition) {\n    const artifactContext = this.getArtifactContext(def);\n    if (artifactContext === 'component') {\n      const capsulePath = context.capsuleNetwork.graphCapsules.getCapsule(component.id)?.path;\n      if (!capsulePath) throw new CapsuleNotFound(component.id);\n      return capsulePath;\n    }\n\n    return context.capsuleNetwork.capsulesRootDir;\n  }\n\n  private getArtifactContext(def: ArtifactDefinition) {\n    return def.context || DEFAULT_CONTEXT;\n  }\n\n  createFromComponent(\n    context: BuildContext,\n    component: Component,\n    def: ArtifactDefinition,\n    task: BuildTask\n  ): Artifact | undefined {\n    const storageResolver = this.getStorageResolver(def);\n    const rootDir = this.getArtifactContextPath(context, component, def);\n    const paths = this.resolvePaths(this.getRootDir(rootDir, def), def);\n    if (!paths || !paths.length) {\n      return undefined;\n    }\n    return new Artifact(def, storageResolver, new ArtifactFiles(paths), rootDir, task);\n  }\n\n  private getStorageResolver(def: ArtifactDefinition) {\n    const storageResolvers = this.storageResolverSlot.values();\n    return this.getResolver(storageResolvers, def.storageResolver);\n  }\n\n  private toComponentMap(context: BuildContext, artifactMap: [string, Artifact][]) {\n    return ComponentMap.as<ArtifactList>(context.components, (component) => {\n      const id = component.id.toString();\n      const artifacts = artifactMap.filter(([targetId]) => targetId === id).map(([, artifact]) => artifact);\n\n      return new ArtifactList(artifacts);\n    });\n  }\n\n  private getRootDir(rootDir: string, def: ArtifactDefinition) {\n    if (!def.rootDir) return rootDir;\n    return join(rootDir, def.rootDir);\n  }\n\n  /**\n   * generate artifacts from a build context according to the spec defined in the artifact definitions.\n   */\n  generate(context: BuildContext, defs: ArtifactDefinition[], task: BuildTask): ComponentMap<ArtifactList> {\n    const tupleArr: [string, Artifact][] = [];\n\n    defs.forEach((def) => {\n      const artifactContext = this.getArtifactContext(def);\n      if (artifactContext === 'env') {\n        const capsuleDir = context.capsuleNetwork.capsulesRootDir;\n        const rootDir = this.getRootDir(capsuleDir, def);\n        const paths = this.resolvePaths(rootDir, def);\n        if (paths && paths.length) {\n          const artifact = new Artifact(\n            def,\n            this.getStorageResolver(def),\n            new ArtifactFiles(this.resolvePaths(rootDir, def)),\n            rootDir,\n            task\n          );\n\n          return context.components.forEach((component) => {\n            tupleArr.push([component.id.toString(), artifact]);\n          });\n        }\n      }\n\n      return context.components.forEach((component) => {\n        const artifact = this.createFromComponent(context, component, def, task);\n        if (artifact) {\n          tupleArr.push([component.id.toString(), artifact]);\n        }\n      });\n    });\n\n    return this.toComponentMap(context, tupleArr);\n  }\n}\n"]}