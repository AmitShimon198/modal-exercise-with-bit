"use strict";

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ArtifactList = void 0;

class ArtifactList {
  constructor(artifacts) {
    this.artifacts = artifacts;
  }
  /**
   * return an array of artifact objects.
   */


  toArray() {
    return this.artifacts;
  }
  /**
   * group artifacts by the storage resolver.
   */


  groupByResolver() {
    const resolverMap = {};
    this.artifacts.forEach(artifact => {
      const storageResolver = artifact.storageResolver;
      const resolverArray = resolverMap[storageResolver.name];

      if (!resolverArray) {
        resolverMap[storageResolver.name] = [artifact];
        return;
      }

      if (resolverArray.length) {
        resolverMap[storageResolver.name].push(artifact);
      }
    });
    return resolverMap;
  }

  toObject() {
    return this.artifacts.map(artifact => artifact.toObject());
  }

  groupByTaskId() {
    return this.artifacts.reduce((acc, artifact) => {
      const taskId = artifact.task.aspectId;
      acc[taskId] = artifact;
      return acc;
    }, {});
  }
  /**
   * store all artifacts using the configured storage resolvers.
   */


  async store(component) {
    const byResolvers = this.groupByResolver();
    const promises = Object.keys(byResolvers).map(async key => {
      const artifacts = byResolvers[key];
      if (!artifacts.length) return;
      const storageResolver = artifacts[0].storageResolver;
      const artifactList = new ArtifactList(artifacts);
      await storageResolver.store(component, artifactList);
    });
    return Promise.all(promises);
  }

}

exports.ArtifactList = ArtifactList;

//# sourceMappingURL=artifact-list.js.map