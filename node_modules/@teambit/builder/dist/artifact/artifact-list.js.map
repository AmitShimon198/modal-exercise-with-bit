{"version":3,"sources":["artifact-list.ts"],"names":["ArtifactList","constructor","artifacts","toArray","groupByResolver","resolverMap","forEach","artifact","storageResolver","resolverArray","name","length","push","toObject","map","groupByTaskId","reduce","acc","taskId","task","aspectId","store","component","byResolvers","promises","Object","keys","key","artifactList","Promise","all"],"mappings":";;;;;;;;;;;AAMO,MAAMA,YAAN,CAAmB;AACxBC,EAAAA,WAAW,CAAUC,SAAV,EAAiC;AAAA,SAAvBA,SAAuB,GAAvBA,SAAuB;AAAE;AAE9C;AACF;AACA;;;AACEC,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKD,SAAZ;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,eAAe,GAAgB;AAC7B,UAAMC,WAAwB,GAAG,EAAjC;AACA,SAAKH,SAAL,CAAeI,OAAf,CAAwBC,QAAD,IAAc;AACnC,YAAMC,eAAe,GAAGD,QAAQ,CAACC,eAAjC;AACA,YAAMC,aAAa,GAAGJ,WAAW,CAACG,eAAe,CAACE,IAAjB,CAAjC;;AACA,UAAI,CAACD,aAAL,EAAoB;AAClBJ,QAAAA,WAAW,CAACG,eAAe,CAACE,IAAjB,CAAX,GAAoC,CAACH,QAAD,CAApC;AACA;AACD;;AACD,UAAIE,aAAa,CAACE,MAAlB,EAA0B;AACxBN,QAAAA,WAAW,CAACG,eAAe,CAACE,IAAjB,CAAX,CAAkCE,IAAlC,CAAuCL,QAAvC;AACD;AACF,KAVD;AAYA,WAAOF,WAAP;AACD;;AAEDQ,EAAAA,QAAQ,GAAqB;AAC3B,WAAO,KAAKX,SAAL,CAAeY,GAAf,CAAoBP,QAAD,IAAcA,QAAQ,CAACM,QAAT,EAAjC,CAAP;AACD;;AAEDE,EAAAA,aAAa,GAAG;AACd,WAAO,KAAKb,SAAL,CAAec,MAAf,CAAsB,CAACC,GAAD,EAAmCV,QAAnC,KAAgD;AAC3E,YAAMW,MAAM,GAAGX,QAAQ,CAACY,IAAT,CAAcC,QAA7B;AACAH,MAAAA,GAAG,CAACC,MAAD,CAAH,GAAcX,QAAd;AACA,aAAOU,GAAP;AACD,KAJM,EAIJ,EAJI,CAAP;AAKD;AAED;AACF;AACA;;;AACa,QAALI,KAAK,CAACC,SAAD,EAAuB;AAChC,UAAMC,WAAW,GAAG,KAAKnB,eAAL,EAApB;AACA,UAAMoB,QAAQ,GAAGC,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyBT,GAAzB,CAA6B,MAAOa,GAAP,IAAe;AAC3D,YAAMzB,SAAS,GAAGqB,WAAW,CAACI,GAAD,CAA7B;AACA,UAAI,CAACzB,SAAS,CAACS,MAAf,EAAuB;AACvB,YAAMH,eAAe,GAAGN,SAAS,CAAC,CAAD,CAAT,CAAaM,eAArC;AACA,YAAMoB,YAAY,GAAG,IAAI5B,YAAJ,CAAiBE,SAAjB,CAArB;AACA,YAAMM,eAAe,CAACa,KAAhB,CAAsBC,SAAtB,EAAiCM,YAAjC,CAAN;AACD,KANgB,CAAjB;AAQA,WAAOC,OAAO,CAACC,GAAR,CAAYN,QAAZ,CAAP;AACD;;AAxDuB","sourcesContent":["import { Component } from '@teambit/component';\nimport type { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport type { Artifact } from './artifact';\n\nexport type ResolverMap = { [key: string]: Artifact[] };\n\nexport class ArtifactList {\n  constructor(readonly artifacts: Artifact[]) {}\n\n  /**\n   * return an array of artifact objects.\n   */\n  toArray() {\n    return this.artifacts;\n  }\n\n  /**\n   * group artifacts by the storage resolver.\n   */\n  groupByResolver(): ResolverMap {\n    const resolverMap: ResolverMap = {};\n    this.artifacts.forEach((artifact) => {\n      const storageResolver = artifact.storageResolver;\n      const resolverArray = resolverMap[storageResolver.name];\n      if (!resolverArray) {\n        resolverMap[storageResolver.name] = [artifact];\n        return;\n      }\n      if (resolverArray.length) {\n        resolverMap[storageResolver.name].push(artifact);\n      }\n    });\n\n    return resolverMap;\n  }\n\n  toObject(): ArtifactObject[] {\n    return this.artifacts.map((artifact) => artifact.toObject());\n  }\n\n  groupByTaskId() {\n    return this.artifacts.reduce((acc: { [key: string]: Artifact }, artifact) => {\n      const taskId = artifact.task.aspectId;\n      acc[taskId] = artifact;\n      return acc;\n    }, {});\n  }\n\n  /**\n   * store all artifacts using the configured storage resolvers.\n   */\n  async store(component: Component) {\n    const byResolvers = this.groupByResolver();\n    const promises = Object.keys(byResolvers).map(async (key) => {\n      const artifacts = byResolvers[key];\n      if (!artifacts.length) return;\n      const storageResolver = artifacts[0].storageResolver;\n      const artifactList = new ArtifactList(artifacts);\n      await storageResolver.store(component, artifactList);\n    });\n\n    return Promise.all(promises);\n  }\n}\n"]}