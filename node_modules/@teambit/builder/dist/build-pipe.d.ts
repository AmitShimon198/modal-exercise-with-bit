import { EnvDefinition } from '@teambit/envs';
import { ComponentMap } from '@teambit/component';
import { Logger } from '@teambit/logger';
import { ArtifactFactory, ArtifactList } from './artifact';
import { BuildTask } from './build-task';
import { ComponentResult } from './types';
import { TasksQueue } from './tasks-queue';
import { EnvsBuildContext } from './builder.service';
import { TaskResultsList } from './task-results-list';
export declare type TaskResults = {
    task: BuildTask;
    env: EnvDefinition;
    componentsResults: ComponentResult[];
    artifacts: ComponentMap<ArtifactList> | undefined;
    startTime: number;
    endTime: number;
};
export declare class BuildPipe {
    readonly tasksQueue: TasksQueue;
    readonly envsBuildContext: EnvsBuildContext;
    readonly logger: Logger;
    readonly artifactFactory: ArtifactFactory;
    private failedTasks;
    private failedDependencyTask;
    private longProcessLogger;
    private taskResults;
    constructor(tasksQueue: TasksQueue, envsBuildContext: EnvsBuildContext, logger: Logger, artifactFactory: ArtifactFactory);
    execute(): Promise<TaskResultsList>;
    private executePreBuild;
    private executeTask;
    private executePostBuild;
    private updateFailedDependencyTask;
    private shouldSkipTask;
    private getBuildContext;
    static from(tasksQueue: TasksQueue, envsBuildContext: EnvsBuildContext, logger: Logger, artifactFactory: ArtifactFactory): BuildPipe;
}
