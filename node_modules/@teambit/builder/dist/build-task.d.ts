import type { Component } from '@teambit/component';
import { ExecutionContext } from '@teambit/envs';
import type { Network } from '@teambit/isolator';
import type { ComponentResult } from './types';
import type { ArtifactDefinition } from './artifact';
import { TaskResultsList } from './task-results-list';
import { TaskResults } from './build-pipe';
export declare type TaskLocation = 'start' | 'end';
export declare const TaskIdDelimiter = ":";
export interface BuildContext extends ExecutionContext {
    components: Component[];
    capsuleNetwork: Network;
    previousTasksResults: TaskResults[];
}
export interface BuildTask {
    aspectId: string;
    name: string;
    description?: string;
    location?: TaskLocation;
    execute(context: BuildContext): Promise<BuiltTaskResult>;
    preBuild?(context: BuildContext): Promise<void>;
    postBuild?(context: BuildContext, tasksResults: TaskResultsList): Promise<void>;
    dependencies?: string[];
}
export interface BuiltTaskResult {
    componentsResults: ComponentResult[];
    artifacts?: ArtifactDefinition[];
}
export declare class BuildTaskHelper {
    static serializeId({ aspectId, name }: BuildTask): string;
    static deserializeId(id: string): {
        aspectId: string;
        name?: string;
    };
}
