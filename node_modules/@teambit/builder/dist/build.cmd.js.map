{"version":3,"sources":["build.cmd.ts"],"names":["BuilderCmd","constructor","builder","workspace","logger","report","userPattern","install","cachePackagesOnCapsulesRoot","reuseCapsules","tasks","listTasks","ConsumerNotFound","getListTasks","longProcessLogger","createLongProcessLogger","pattern","toString","components","byPattern","list","envsExecutionResults","build","installOptions","installTeambitBit","linkingOptions","linkTeambitBit","emptyRootDir","getExistingAsIs","split","map","task","trim","end","throwErrorsIfExist","consoleSuccess","chalk","green","tasksQueue","length","componentIdStr","compId","resolveComponentId","component","get","results","id","envId","bold","buildTasks","join","tagTasks","snapTasks"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport chalk from 'chalk';\nimport { BuilderMain } from './builder.main.runtime';\n\ntype BuildOpts = {\n  rebuild: boolean;\n  install: boolean;\n  cachePackagesOnCapsulesRoot: boolean;\n  reuseCapsules: boolean;\n  tasks: string;\n  listTasks?: string;\n};\n\nexport class BuilderCmd implements Command {\n  name = 'build [pattern]';\n  description = 'run set of tasks for build';\n  alias = '';\n  group = 'development';\n  options = [\n    ['', 'install', 'install core aspects in capsules'],\n    ['', 'reuse-capsules', 'avoid deleting the capsules root-dir before starting the build'],\n    [\n      '',\n      'tasks <string>',\n      `build the specified task(s) only. for multiple tasks, separate by a comma and wrap with quotes.\nspecify the task-name (e.g. \"TypescriptCompiler\") or the task-aspect-id (e.g. teambit.compilation/compiler)`,\n    ],\n    ['', 'cache-packages-on-capsule-root', 'set the package-manager cache on the capsule root'],\n    [\n      '',\n      'list-tasks <string>',\n      'list tasks of an env or a component-id for each one of the pipelines: build, tag and snap',\n    ],\n  ] as CommandOptions;\n\n  constructor(private builder: BuilderMain, private workspace: Workspace, private logger: Logger) {}\n\n  async report(\n    [userPattern]: [string],\n    { install = false, cachePackagesOnCapsulesRoot = false, reuseCapsules = false, tasks, listTasks }: BuildOpts\n  ): Promise<string> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    if (listTasks) {\n      return this.getListTasks(listTasks);\n    }\n    const longProcessLogger = this.logger.createLongProcessLogger('build');\n    const pattern = userPattern && userPattern.toString();\n    const components = pattern ? await this.workspace.byPattern(pattern) : await this.workspace.list();\n\n    const envsExecutionResults = await this.builder.build(\n      components,\n      {\n        installOptions: {\n          installTeambitBit: install,\n        },\n        linkingOptions: { linkTeambitBit: !install },\n        emptyRootDir: !reuseCapsules,\n        getExistingAsIs: reuseCapsules,\n        cachePackagesOnCapsulesRoot,\n      },\n      {\n        tasks: tasks ? tasks.split(',').map((task) => task.trim()) : [],\n      }\n    );\n    longProcessLogger.end();\n    envsExecutionResults.throwErrorsIfExist();\n    this.logger.consoleSuccess();\n    return chalk.green(`the build has been completed. total: ${envsExecutionResults.tasksQueue.length} tasks`);\n  }\n\n  private async getListTasks(componentIdStr: string): Promise<string> {\n    const compId = await this.workspace.resolveComponentId(componentIdStr);\n    const component = await this.workspace.get(compId);\n    const results = this.builder.listTasks(component);\n    return `${chalk.green('Tasks List')}\nid:    ${results.id.toString()}\nenvId: ${results.envId}\n\n${chalk.bold('Build Pipeline Tasks:')}\n${results.buildTasks.join('\\n')}\n\n${chalk.bold('Tag Pipeline Tasks:')}\n${results.tagTasks.join('\\n')}\n\n${chalk.bold('Snap Pipeline Tasks:')}\n${results.snapTasks.join('\\n') || '<N/A>'}`;\n  }\n}\n"]}