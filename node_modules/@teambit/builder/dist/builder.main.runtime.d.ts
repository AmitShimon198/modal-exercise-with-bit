import { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { CLIMain } from '@teambit/cli';
import { Component } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { GraphqlMain } from '@teambit/graphql';
import { SlotRegistry } from '@teambit/harmony';
import { LoggerMain } from '@teambit/logger';
import { ScopeMain, OnTagResults } from '@teambit/scope';
import { Workspace } from '@teambit/workspace';
import { IsolateComponentsOptions, IsolatorMain } from '@teambit/isolator';
import { OnTagOpts } from '@teambit/legacy/dist/scope/scope';
import { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';
import { BuilderService, BuilderServiceOptions } from './builder.service';
import { BuildTask } from './build-task';
import { StorageResolver } from './storage';
import { TaskResultsList } from './task-results-list';
import { AspectData, PipelineReport } from './build-pipeline-result-list';
import { Serializable } from './types';
export declare type TaskSlot = SlotRegistry<BuildTask[]>;
export declare type StorageResolverSlot = SlotRegistry<StorageResolver>;
export declare type BuilderData = {
    pipeline: PipelineReport[];
    artifacts: ArtifactObject[] | undefined;
    aspectsData: AspectData[];
};
export declare class BuilderMain {
    private envs;
    private workspace;
    private buildService;
    private tagService;
    private snapService;
    private scope;
    private isolator;
    private aspectLoader;
    private buildTaskSlot;
    private tagTaskSlot;
    private snapTaskSlot;
    private storageResolversSlot;
    constructor(envs: EnvsMain, workspace: Workspace, buildService: BuilderService, tagService: BuilderService, snapService: BuilderService, scope: ScopeMain, isolator: IsolatorMain, aspectLoader: AspectLoaderMain, buildTaskSlot: TaskSlot, tagTaskSlot: TaskSlot, snapTaskSlot: TaskSlot, storageResolversSlot: StorageResolverSlot);
    private storeArtifacts;
    private pipelineResultsToBuilderData;
    tagListener(components: Component[], options?: OnTagOpts, isolateOptions?: IsolateComponentsOptions): Promise<OnTagResults>;
    registerStorageResolver(storageResolver: StorageResolver): this;
    getStorageResolver(name: string): StorageResolver | undefined;
    getArtifactsVinylByExtension(component: Component, aspectName: string): Promise<ArtifactVinyl[]>;
    getArtifactsVinylByExtensionAndName(component: Component, aspectName: string, name: string): Promise<ArtifactVinyl[]>;
    getArtifactsByName(component: Component, name: string): ArtifactObject[] | undefined;
    getArtifactsByExtension(component: Component, aspectName: string): ArtifactObject[] | undefined;
    getArtifactsByExtensionAndName(component: Component, aspectName: string, name: string): ArtifactObject[] | undefined;
    getDataByAspect(component: Component, aspectName: string): Serializable | undefined;
    getArtifacts(component: Component): ArtifactObject[] | undefined;
    getBuilderData(component: Component): BuilderData | undefined;
    build(components: Component[], isolateOptions?: IsolateComponentsOptions, builderOptions?: BuilderServiceOptions): Promise<TaskResultsList>;
    runTagTasks(components: Component[], isolateOptions?: IsolateComponentsOptions): Promise<TaskResultsList>;
    runSnapTasks(components: Component[], isolateOptions?: IsolateComponentsOptions): Promise<TaskResultsList>;
    listTasks(component: Component): {
        id: import("@teambit/component").ComponentID;
        envId: string;
        buildTasks: string[];
        tagTasks: string[];
        snapTasks: string[];
    };
    registerBuildTasks(tasks: BuildTask[]): this;
    registerDeployTasks(tasks: BuildTask[]): this;
    registerTagTasks(tasks: BuildTask[]): this;
    registerSnapTasks(tasks: BuildTask[]): this;
    static slots: (((registerFn: () => string) => SlotRegistry<BuildTask>) | ((registerFn: () => string) => SlotRegistry<StorageResolver>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([cli, envs, workspace, scope, isolator, loggerExt, aspectLoader, graphql]: [
        CLIMain,
        EnvsMain,
        Workspace,
        ScopeMain,
        IsolatorMain,
        LoggerMain,
        AspectLoaderMain,
        GraphqlMain
    ], config: any, [buildTaskSlot, storageResolversSlot, tagTaskSlot, snapTaskSlot]: [
        TaskSlot,
        StorageResolverSlot,
        TaskSlot,
        TaskSlot
    ]): Promise<BuilderMain>;
}
