{"version":3,"sources":["builder.main.runtime.ts"],"names":["BuilderMain","constructor","envs","workspace","buildService","tagService","snapService","scope","isolator","aspectLoader","buildTaskSlot","tagTaskSlot","snapTaskSlot","storageResolversSlot","storeArtifacts","tasksResults","artifacts","flatMap","t","storeP","map","artifactMap","Promise","all","toArray","component","artifactList","store","err","ArtifactStorageError","pipelineResultsToBuilderData","components","buildPipelineResults","buildPipelineResultList","BuildPipelineResultList","ComponentMap","as","aspectsData","getDataOfComponent","id","pipelineReport","getPipelineReportOfComponent","artifactsData","getArtifactsDataOfComponent","pipeline","tagListener","options","isolateOptions","pipeResults","throwOnError","forceDeploy","disableTagAndSnapPipelines","isSnap","envsExecutionResults","build","emptyRootDir","skipTests","throwErrorsIfExist","allTasksResults","push","hasErrors","deployEnvsExecutionResults","runSnapTasks","runTagTasks","builderDataMap","registerStorageResolver","storageResolver","register","getStorageResolver","name","values","find","getArtifactsVinylByExtension","aspectName","artifactsObjects","getArtifactsByExtension","vinyls","artifactObject","files","getVinylsAndImportIfMissing","legacyScope","getArtifactsVinylByExtensionAndName","getArtifactsByExtensionAndName","getArtifactsByName","getArtifacts","filter","artifact","task","getDataByAspect","getBuilderData","data","aspectData","aspectId","state","aspects","get","BuilderAspect","builderOptions","ids","c","network","isolateComponents","createEnvironment","graphCapsules","getAllComponents","builderServiceOptions","seedersOnly","buildResult","runOnce","listTasks","compEnv","getEnv","buildTasks","getDescriptor","tasks","tagTasks","snapTasks","envId","registerBuildTasks","registerDeployTasks","registerTagTasks","registerSnapTasks","provider","cli","loggerExt","graphql","config","artifactFactory","ArtifactFactory","logger","createLogger","BuilderService","registerService","builder","func","bind","onTag","consumer","isLegacy","commands","BuilderCmd","ArtifactsCmd","unregister","Slot","withType","MainRuntime","CLIAspect","EnvsAspect","WorkspaceAspect","ScopeAspect","IsolatorAspect","LoggerAspect","AspectLoaderAspect","GraphqlAspect","ComponentAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAYO,MAAMA,WAAN,CAAkB;AACvBC,EAAAA,WAAW,CACDC,IADC,EAEDC,SAFC,EAGDC,YAHC,EAIDC,UAJC,EAKDC,WALC,EAMDC,KANC,EAODC,QAPC,EAQDC,YARC,EASDC,aATC,EAUDC,WAVC,EAWDC,YAXC,EAYDC,oBAZC,EAaT;AAAA,SAZQX,IAYR,GAZQA,IAYR;AAAA,SAXQC,SAWR,GAXQA,SAWR;AAAA,SAVQC,YAUR,GAVQA,YAUR;AAAA,SATQC,UASR,GATQA,UASR;AAAA,SARQC,WAQR,GARQA,WAQR;AAAA,SAPQC,KAOR,GAPQA,KAOR;AAAA,SANQC,QAMR,GANQA,QAMR;AAAA,SALQC,YAKR,GALQA,YAKR;AAAA,SAJQC,aAIR,GAJQA,aAIR;AAAA,SAHQC,WAGR,GAHQA,WAGR;AAAA,SAFQC,YAER,GAFQA,YAER;AAAA,SADQC,oBACR,GADQA,oBACR;AAAE;;AAEwB,QAAdC,cAAc,CAACC,YAAD,EAA8B;AACxD,UAAMC,SAAS,GAAGD,YAAY,CAACE,OAAb,CAAsBC,CAAD,IAAQA,CAAC,CAACF,SAAF,GAAc,CAACE,CAAC,CAACF,SAAH,CAAd,GAA8B,EAA3D,CAAlB;AACA,UAAMG,MAAM,GAAGH,SAAS,CAACI,GAAV,CAAc,MAAOC,WAAP,IAAmD;AAC9E,aAAOC,OAAO,CAACC,GAAR,CACLF,WAAW,CAACG,OAAZ,GAAsBJ,GAAtB,CAA0B,OAAO,CAACK,SAAD,EAAYC,YAAZ,CAAP,KAAqC;AAC7D,YAAI;AACF,iBAAO,MAAMA,YAAY,CAACC,KAAb,CAAmBF,SAAnB,CAAb;AACD,SAFD,CAEE,OAAOG,GAAP,EAAiB;AACjB,gBAAM,KAAIC,kCAAJ,EAAyBD,GAAzB,EAA8BH,SAA9B,CAAN;AACD;AACF,OAND,CADK,CAAP;AASD,KAVc,CAAf;AAWA,UAAMH,OAAO,CAACC,GAAR,CAAYJ,MAAZ,CAAN;AACD;;AAEOW,EAAAA,4BAA4B,CAClCC,UADkC,EAElCC,oBAFkC,EAGP;AAC3B,UAAMC,uBAAuB,GAAG,KAAIC,kDAAJ,EAA4BF,oBAA5B,EAAkDD,UAAlD,CAAhC;AACA,WAAOI,0BAAaC,EAAb,CAA6BL,UAA7B,EAA0CN,SAAD,IAAe;AAC7D,YAAMY,WAAW,GAAGJ,uBAAuB,CAACK,kBAAxB,CAA2Cb,SAAS,CAACc,EAArD,CAApB;AACA,YAAMC,cAAc,GAAGP,uBAAuB,CAACQ,4BAAxB,CAAqDhB,SAAS,CAACc,EAA/D,CAAvB;AACA,YAAMG,aAAa,GAAGT,uBAAuB,CAACU,2BAAxB,CAAoDlB,SAAS,CAACc,EAA9D,CAAtB;AACA,aAAO;AAAEK,QAAAA,QAAQ,EAAEJ,cAAZ;AAA4BxB,QAAAA,SAAS,EAAE0B,aAAvC;AAAsDL,QAAAA;AAAtD,OAAP;AACD,KALM,CAAP;AAMD;;AAEgB,QAAXQ,WAAW,CACfd,UADe,EAEfe,OAAkB,GAAG,EAFN,EAGfC,cAAwC,GAAG,EAH5B,EAIQ;AACvB,UAAMC,WAA8B,GAAG,EAAvC;AACA,UAAM;AAAEC,MAAAA,YAAF;AAAgBC,MAAAA,WAAhB;AAA6BC,MAAAA,0BAA7B;AAAyDC,MAAAA;AAAzD,QAAoEN,OAA1E;AACA,UAAMO,oBAAoB,GAAG,MAAM,KAAKC,KAAL,CACjCvB,UADiC;AAE/BwB,MAAAA,YAAY,EAAE;AAFiB,OAERR,cAFQ,GAGjC;AAAES,MAAAA,SAAS,EAAEV,OAAO,CAACU;AAArB,KAHiC,CAAnC;AAKA,QAAIP,YAAY,IAAI,CAACC,WAArB,EAAkCG,oBAAoB,CAACI,kBAArB;AAClC,UAAMC,eAAe,GAAG,CAAC,GAAGL,oBAAoB,CAACtC,YAAzB,CAAxB;AACAiC,IAAAA,WAAW,CAACW,IAAZ,CAAiBN,oBAAjB;;AACA,QAAIH,WAAW,IAAK,CAACC,0BAAD,IAA+B,CAACE,oBAAoB,CAACO,SAArB,EAApD,EAAuF;AACrF,YAAMC,0BAA0B,GAAGT,MAAM,GACrC,MAAM,KAAKU,YAAL,CAAkB/B,UAAlB,EAA8BgB,cAA9B,CAD+B,GAErC,MAAM,KAAKgB,WAAL,CAAiBhC,UAAjB,EAA6BgB,cAA7B,CAFV;AAGA,UAAIE,YAAJ,EAAkBY,0BAA0B,CAACJ,kBAA3B;AAClBC,MAAAA,eAAe,CAACC,IAAhB,CAAqB,GAAGE,0BAA0B,CAAC9C,YAAnD;AACAiC,MAAAA,WAAW,CAACW,IAAZ,CAAiBE,0BAAjB;AACD;;AACD,UAAM,KAAK/C,cAAL,CAAoB4C,eAApB,CAAN;AACA,UAAMM,cAAc,GAAG,KAAKlC,4BAAL,CAAkCC,UAAlC,EAA8C2B,eAA9C,CAAvB;AACA,WAAO;AAAEM,MAAAA,cAAF;AAAkBhB,MAAAA;AAAlB,KAAP;AACD;AAED;AACF;AACA;;;AACEiB,EAAAA,uBAAuB,CAACC,eAAD,EAAmC;AACxD,SAAKrD,oBAAL,CAA0BsD,QAA1B,CAAmCD,eAAnC;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEE,EAAAA,kBAAkB,CAACC,IAAD,EAA4C;AAC5D,WAAO,KAAKxD,oBAAL,CAA0ByD,MAA1B,GAAmCC,IAAnC,CAAyCL,eAAD,IAAqBA,eAAe,CAACG,IAAhB,KAAyBA,IAAtF,CAAP;AACD,GAtFsB,CAwFvB;;;AACkC,QAA5BG,4BAA4B,CAAC/C,SAAD,EAAuBgD,UAAvB,EAAqE;AACrG,UAAMC,gBAAgB,GAAG,KAAKC,uBAAL,CAA6BlD,SAA7B,EAAwCgD,UAAxC,CAAzB;AACA,UAAMG,MAAM,GAAG,MAAMtD,OAAO,CAACC,GAAR,CACnB,CAACmD,gBAAgB,IAAI,EAArB,EAAyBtD,GAAzB,CAA8ByD,cAAD,IAC3BA,cAAc,CAACC,KAAf,CAAqBC,2BAArB,CAAiDtD,SAAS,CAACc,EAAV,CAAahC,KAA9D,EAA+E,KAAKA,KAAL,CAAWyE,WAA1F,CADF,CADmB,CAArB;AAKA,WAAO,uBAAQJ,MAAR,CAAP;AACD;;AAEwC,QAAnCK,mCAAmC,CACvCxD,SADuC,EAEvCgD,UAFuC,EAGvCJ,IAHuC,EAIb;AAC1B,UAAMK,gBAAgB,GAAG,KAAKQ,8BAAL,CAAoCzD,SAApC,EAA+CgD,UAA/C,EAA2DJ,IAA3D,CAAzB;AACA,UAAMO,MAAM,GAAG,MAAMtD,OAAO,CAACC,GAAR,CACnB,CAACmD,gBAAgB,IAAI,EAArB,EAAyBtD,GAAzB,CAA8ByD,cAAD,IAC3BA,cAAc,CAACC,KAAf,CAAqBC,2BAArB,CAAiDtD,SAAS,CAACc,EAAV,CAAahC,KAA9D,EAA+E,KAAKA,KAAL,CAAWyE,WAA1F,CADF,CADmB,CAArB;AAKA,WAAO,uBAAQJ,MAAR,CAAP;AACD;;AAEDO,EAAAA,kBAAkB,CAAC1D,SAAD,EAAuB4C,IAAvB,EAAmE;AACnF,UAAMrD,SAAS,GAAG,KAAKoE,YAAL,CAAkB3D,SAAlB,CAAlB;AACA,WAAOT,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEqE,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACjB,IAAT,KAAkBA,IAAlD,CAAP;AACD;;AAEDM,EAAAA,uBAAuB,CAAClD,SAAD,EAAuBgD,UAAvB,EAAyE;AAC9F,UAAMzD,SAAS,GAAG,KAAKoE,YAAL,CAAkB3D,SAAlB,CAAlB;AACA,WAAOT,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEqE,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,CAAchD,EAAd,KAAqBkC,UAArD,CAAP;AACD;;AAEDS,EAAAA,8BAA8B,CAACzD,SAAD,EAAuBgD,UAAvB,EAA2CJ,IAA3C,EAAuF;AACnH,UAAMrD,SAAS,GAAG,KAAKoE,YAAL,CAAkB3D,SAAlB,CAAlB;AACA,WAAOT,SAAP,aAAOA,SAAP,uBAAOA,SAAS,CAAEqE,MAAX,CAAmBC,QAAD,IAAcA,QAAQ,CAACC,IAAT,CAAchD,EAAd,KAAqBkC,UAArB,IAAmCa,QAAQ,CAACjB,IAAT,KAAkBA,IAArF,CAAP;AACD;;AAEDmB,EAAAA,eAAe,CAAC/D,SAAD,EAAuBgD,UAAvB,EAAqE;AAAA;;AAClF,UAAMpC,WAAW,2BAAG,KAAKoD,cAAL,CAAoBhE,SAApB,CAAH,yDAAG,qBAAgCY,WAApD;AACA,UAAMqD,IAAI,GAAGrD,WAAH,aAAGA,WAAH,uBAAGA,WAAW,CAAEkC,IAAb,CAAmBoB,UAAD,IAAgBA,UAAU,CAACC,QAAX,KAAwBnB,UAA1D,CAAb;AACA,WAAOiB,IAAP,aAAOA,IAAP,uBAAOA,IAAI,CAAEA,IAAb;AACD;;AAEDN,EAAAA,YAAY,CAAC3D,SAAD,EAAqD;AAAA;;AAC/D,oCAAO,KAAKgE,cAAL,CAAoBhE,SAApB,CAAP,0DAAO,sBAAgCT,SAAvC;AACD;;AAEDyE,EAAAA,cAAc,CAAChE,SAAD,EAAgD;AAAA;;AAC5D,oCAAOA,SAAS,CAACoE,KAAV,CAAgBC,OAAhB,CAAwBC,GAAxB,CAA4BC,yBAAczD,EAA1C,CAAP,0DAAO,sBAA+CmD,IAAtD;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACa,QAALpC,KAAK,CACTvB,UADS,EAETgB,cAFS,EAGTkD,cAHS,EAIiB;AAC1B,UAAMC,GAAG,GAAGnE,UAAU,CAACX,GAAX,CAAgB+E,CAAD,IAAOA,CAAC,CAAC5D,EAAxB,CAAZ;AACA,UAAM6D,OAAO,GAAG,MAAM,KAAK5F,QAAL,CAAc6F,iBAAd,CAAgCH,GAAhC,EAAqCnD,cAArC,CAAtB;AACA,UAAM7C,IAAI,GAAG,MAAM,KAAKA,IAAL,CAAUoG,iBAAV,CAA4BF,OAAO,CAACG,aAAR,CAAsBC,gBAAtB,EAA5B,CAAnB;;AACA,UAAMC,qBAAqB;AAAKC,MAAAA,WAAW,EAAE3D,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAE2D;AAAlC,OAAmDT,cAAc,IAAI,EAArE,CAA3B;;AACA,UAAMU,WAAW,GAAG,MAAMzG,IAAI,CAAC0G,OAAL,CAAa,KAAKxG,YAAlB,EAAgCqG,qBAAhC,CAA1B;AACA,WAAOE,WAAP;AACD;;AAEgB,QAAX5C,WAAW,CAAChC,UAAD,EAA0BgB,cAA1B,EAA+F;AAC9G,UAAM7C,IAAI,GAAG,MAAM,KAAKA,IAAL,CAAUoG,iBAAV,CAA4BvE,UAA5B,CAAnB;AACA,UAAM4E,WAAW,GAAG,MAAMzG,IAAI,CAAC0G,OAAL,CAAa,KAAKvG,UAAlB,EAA8B;AAAEqG,MAAAA,WAAW,EAAE3D,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAE2D;AAA/B,KAA9B,CAA1B;AAEA,WAAOC,WAAP;AACD;;AAEiB,QAAZ7C,YAAY,CAAC/B,UAAD,EAA0BgB,cAA1B,EAA+F;AAC/G,UAAM7C,IAAI,GAAG,MAAM,KAAKA,IAAL,CAAUoG,iBAAV,CAA4BvE,UAA5B,CAAnB;AACA,UAAM4E,WAAW,GAAG,MAAMzG,IAAI,CAAC0G,OAAL,CAAa,KAAKtG,WAAlB,EAA+B;AAAEoG,MAAAA,WAAW,EAAE3D,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAE2D;AAA/B,KAA/B,CAA1B;AAEA,WAAOC,WAAP;AACD;;AAEDE,EAAAA,SAAS,CAACpF,SAAD,EAAuB;AAC9B,UAAMqF,OAAO,GAAG,KAAK5G,IAAL,CAAU6G,MAAV,CAAiBtF,SAAjB,CAAhB;AACA,UAAMuF,UAAU,GAAG,KAAK5G,YAAL,CAAkB6G,aAAlB,CAAgCH,OAAhC,EAAyCI,KAA5D;AACA,UAAMC,QAAQ,GAAG,KAAK9G,UAAL,CAAgB4G,aAAhB,CAA8BH,OAA9B,EAAuCI,KAAxD;AACA,UAAME,SAAS,GAAG,KAAK9G,WAAL,CAAiB2G,aAAjB,CAA+BH,OAA/B,EAAwCI,KAA1D;AACA,WAAO;AAAE3E,MAAAA,EAAE,EAAEd,SAAS,CAACc,EAAhB;AAAoB8E,MAAAA,KAAK,EAAEP,OAAO,CAACvE,EAAnC;AAAuCyE,MAAAA,UAAvC;AAAmDG,MAAAA,QAAnD;AAA6DC,MAAAA;AAA7D,KAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,kBAAkB,CAACJ,KAAD,EAAqB;AACrC,SAAKxG,aAAL,CAAmByD,QAAnB,CAA4B+C,KAA5B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;;;AACEK,EAAAA,mBAAmB,CAACL,KAAD,EAAqB;AACtC,SAAKvG,WAAL,CAAiBwD,QAAjB,CAA0B+C,KAA1B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACEM,EAAAA,gBAAgB,CAACN,KAAD,EAAqB;AACnC,SAAKvG,WAAL,CAAiBwD,QAAjB,CAA0B+C,KAA1B;AACA,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;;;AACEO,EAAAA,iBAAiB,CAACP,KAAD,EAAqB;AACpC,SAAKtG,YAAL,CAAkBuD,QAAlB,CAA2B+C,KAA3B;AACA,WAAO,IAAP;AACD;;AAsBoB,eAARQ,QAAQ,CACnB,CAACC,GAAD,EAAMzH,IAAN,EAAYC,SAAZ,EAAuBI,KAAvB,EAA8BC,QAA9B,EAAwCoH,SAAxC,EAAmDnH,YAAnD,EAAiEoH,OAAjE,CADmB,EAWnBC,MAXmB,EAYnB,CAACpH,aAAD,EAAgBG,oBAAhB,EAAsCF,WAAtC,EAAmDC,YAAnD,CAZmB,EAkBnB;AACA,UAAMmH,eAAe,GAAG,KAAIC,kCAAJ,EAAoBnH,oBAApB,CAAxB;AACA,UAAMoH,MAAM,GAAGL,SAAS,CAACM,YAAV,CAAuBlC,yBAAczD,EAArC,CAAf;AACA,UAAMnC,YAAY,GAAG,KAAI+H,0BAAJ,EACnB3H,QADmB,EAEnByH,MAFmB,EAGnBvH,aAHmB,EAInB,cAJmB,EAKnB,OALmB,EAMnBqH,eANmB,EAOnBxH,KAPmB,CAArB;AASAL,IAAAA,IAAI,CAACkI,eAAL,CAAqBhI,YAArB;AACA,UAAMC,UAAU,GAAG,KAAI8H,0BAAJ,EAAmB3H,QAAnB,EAA6ByH,MAA7B,EAAqCtH,WAArC,EAAkD,YAAlD,EAAgE,KAAhE,EAAuEoH,eAAvE,EAAwFxH,KAAxF,CAAnB;AACA,UAAMD,WAAW,GAAG,KAAI6H,0BAAJ,EAClB3H,QADkB,EAElByH,MAFkB,EAGlBrH,YAHkB,EAIlB,aAJkB,EAKlB,MALkB,EAMlBmH,eANkB,EAOlBxH,KAPkB,CAApB;AASA,UAAM8H,OAAO,GAAG,IAAIrI,WAAJ,CACdE,IADc,EAEdC,SAFc,EAGdC,YAHc,EAIdC,UAJc,EAKdC,WALc,EAMdC,KANc,EAOdC,QAPc,EAQdC,YARc,EASdC,aATc,EAUdC,WAVc,EAWdC,YAXc,EAYdC,oBAZc,CAAhB;AAeAgH,IAAAA,OAAO,CAAC1D,QAAR,CAAiB,+BAAckE,OAAd,CAAjB;AACA,UAAMC,IAAI,GAAGD,OAAO,CAACxF,WAAR,CAAoB0F,IAApB,CAAyBF,OAAzB,CAAb;AACA,QAAI9H,KAAJ,EAAWA,KAAK,CAACiI,KAAN,CAAYF,IAAZ;;AACX,QAAInI,SAAS,IAAI,CAACA,SAAS,CAACsI,QAAV,CAAmBC,QAArC,EAA+C;AAC7C,YAAMC,QAAQ,GAAG,CAAC,KAAIC,mBAAJ,EAAeP,OAAf,EAAwBlI,SAAxB,EAAmC8H,MAAnC,CAAD,EAA6C,KAAIY,yBAAJ,EAAiBR,OAAjB,EAA0B9H,KAA1B,CAA7C,CAAjB;AACAoH,MAAAA,GAAG,CAACmB,UAAJ,CAAe,OAAf;AACAnB,MAAAA,GAAG,CAACxD,QAAJ,CAAa,GAAGwE,QAAhB;AACD;;AACD,WAAON,OAAP;AACD;;AA/SsB;;;gCAAZrI,W,WA0NI,CACb+I,gBAAKC,QAAL,EADa,EAEbD,gBAAKC,QAAL,EAFa,EAGbD,gBAAKC,QAAL,EAHa,EAIbD,gBAAKC,QAAL,EAJa,C;gCA1NJhJ,W,aAiOMiJ,kB;gCAjONjJ,W,kBAkOW,CACpBkJ,gBADoB,EAEpBC,kBAFoB,EAGpBC,4BAHoB,EAIpBC,oBAJoB,EAKpBC,0BALoB,EAMpBC,sBANoB,EAOpBC,kCAPoB,EAQpBC,wBARoB,EASpBC,4BAToB,C;;AAgFxB1D,yBAAc2D,UAAd,CAAyB3J,WAAzB","sourcesContent":["import { flatten } from 'lodash';\nimport { ArtifactVinyl } from '@teambit/legacy/dist/consumer/component/sources/artifact';\nimport { AspectLoaderAspect, AspectLoaderMain } from '@teambit/aspect-loader';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMap } from '@teambit/component';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { GraphqlAspect, GraphqlMain } from '@teambit/graphql';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain, OnTagResults } from '@teambit/scope';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { IsolateComponentsOptions, IsolatorAspect, IsolatorMain } from '@teambit/isolator';\nimport { OnTagOpts } from '@teambit/legacy/dist/scope/scope';\nimport { ArtifactObject } from '@teambit/legacy/dist/consumer/component/sources/artifact-files';\nimport { ArtifactList } from './artifact';\nimport { ArtifactFactory } from './artifact/artifact-factory'; // it gets undefined when importing it from './artifact'\nimport { BuilderAspect } from './builder.aspect';\nimport { builderSchema } from './builder.graphql';\nimport { BuilderService, BuilderServiceOptions } from './builder.service';\nimport { BuilderCmd } from './build.cmd';\nimport { BuildTask } from './build-task';\nimport { StorageResolver } from './storage';\nimport { TaskResults } from './build-pipe';\nimport { TaskResultsList } from './task-results-list';\nimport { ArtifactStorageError } from './exceptions';\nimport { BuildPipelineResultList, AspectData, PipelineReport } from './build-pipeline-result-list';\nimport { Serializable } from './types';\nimport { ArtifactsCmd } from './artifact/artifacts.cmd';\n\nexport type TaskSlot = SlotRegistry<BuildTask[]>;\n\nexport type StorageResolverSlot = SlotRegistry<StorageResolver>;\n\nexport type BuilderData = {\n  pipeline: PipelineReport[];\n  artifacts: ArtifactObject[] | undefined;\n  aspectsData: AspectData[];\n};\n\nexport class BuilderMain {\n  constructor(\n    private envs: EnvsMain,\n    private workspace: Workspace,\n    private buildService: BuilderService,\n    private tagService: BuilderService,\n    private snapService: BuilderService,\n    private scope: ScopeMain,\n    private isolator: IsolatorMain,\n    private aspectLoader: AspectLoaderMain,\n    private buildTaskSlot: TaskSlot,\n    private tagTaskSlot: TaskSlot,\n    private snapTaskSlot: TaskSlot,\n    private storageResolversSlot: StorageResolverSlot\n  ) {}\n\n  private async storeArtifacts(tasksResults: TaskResults[]) {\n    const artifacts = tasksResults.flatMap((t) => (t.artifacts ? [t.artifacts] : []));\n    const storeP = artifacts.map(async (artifactMap: ComponentMap<ArtifactList>) => {\n      return Promise.all(\n        artifactMap.toArray().map(async ([component, artifactList]) => {\n          try {\n            return await artifactList.store(component);\n          } catch (err: any) {\n            throw new ArtifactStorageError(err, component);\n          }\n        })\n      );\n    });\n    await Promise.all(storeP);\n  }\n\n  private pipelineResultsToBuilderData(\n    components: Component[],\n    buildPipelineResults: TaskResults[]\n  ): ComponentMap<BuilderData> {\n    const buildPipelineResultList = new BuildPipelineResultList(buildPipelineResults, components);\n    return ComponentMap.as<BuilderData>(components, (component) => {\n      const aspectsData = buildPipelineResultList.getDataOfComponent(component.id);\n      const pipelineReport = buildPipelineResultList.getPipelineReportOfComponent(component.id);\n      const artifactsData = buildPipelineResultList.getArtifactsDataOfComponent(component.id);\n      return { pipeline: pipelineReport, artifacts: artifactsData, aspectsData };\n    });\n  }\n\n  async tagListener(\n    components: Component[],\n    options: OnTagOpts = {},\n    isolateOptions: IsolateComponentsOptions = {}\n  ): Promise<OnTagResults> {\n    const pipeResults: TaskResultsList[] = [];\n    const { throwOnError, forceDeploy, disableTagAndSnapPipelines, isSnap } = options;\n    const envsExecutionResults = await this.build(\n      components,\n      { emptyRootDir: true, ...isolateOptions },\n      { skipTests: options.skipTests }\n    );\n    if (throwOnError && !forceDeploy) envsExecutionResults.throwErrorsIfExist();\n    const allTasksResults = [...envsExecutionResults.tasksResults];\n    pipeResults.push(envsExecutionResults);\n    if (forceDeploy || (!disableTagAndSnapPipelines && !envsExecutionResults.hasErrors())) {\n      const deployEnvsExecutionResults = isSnap\n        ? await this.runSnapTasks(components, isolateOptions)\n        : await this.runTagTasks(components, isolateOptions);\n      if (throwOnError) deployEnvsExecutionResults.throwErrorsIfExist();\n      allTasksResults.push(...deployEnvsExecutionResults.tasksResults);\n      pipeResults.push(deployEnvsExecutionResults);\n    }\n    await this.storeArtifacts(allTasksResults);\n    const builderDataMap = this.pipelineResultsToBuilderData(components, allTasksResults);\n    return { builderDataMap, pipeResults };\n  }\n\n  /**\n   * register a new storage resolver.\n   */\n  registerStorageResolver(storageResolver: StorageResolver) {\n    this.storageResolversSlot.register(storageResolver);\n    return this;\n  }\n\n  /**\n   * get storage resolver by name. otherwise, returns default.\n   */\n  getStorageResolver(name: string): StorageResolver | undefined {\n    return this.storageResolversSlot.values().find((storageResolver) => storageResolver.name === name);\n  }\n\n  // TODO: merge with getArtifactsVinylByExtensionAndName by getting aspect name and name as object with optional props\n  async getArtifactsVinylByExtension(component: Component, aspectName: string): Promise<ArtifactVinyl[]> {\n    const artifactsObjects = this.getArtifactsByExtension(component, aspectName);\n    const vinyls = await Promise.all(\n      (artifactsObjects || []).map((artifactObject) =>\n        artifactObject.files.getVinylsAndImportIfMissing(component.id.scope as string, this.scope.legacyScope)\n      )\n    );\n    return flatten(vinyls);\n  }\n\n  async getArtifactsVinylByExtensionAndName(\n    component: Component,\n    aspectName: string,\n    name: string\n  ): Promise<ArtifactVinyl[]> {\n    const artifactsObjects = this.getArtifactsByExtensionAndName(component, aspectName, name);\n    const vinyls = await Promise.all(\n      (artifactsObjects || []).map((artifactObject) =>\n        artifactObject.files.getVinylsAndImportIfMissing(component.id.scope as string, this.scope.legacyScope)\n      )\n    );\n    return flatten(vinyls);\n  }\n\n  getArtifactsByName(component: Component, name: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.name === name);\n  }\n\n  getArtifactsByExtension(component: Component, aspectName: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.task.id === aspectName);\n  }\n\n  getArtifactsByExtensionAndName(component: Component, aspectName: string, name: string): ArtifactObject[] | undefined {\n    const artifacts = this.getArtifacts(component);\n    return artifacts?.filter((artifact) => artifact.task.id === aspectName && artifact.name === name);\n  }\n\n  getDataByAspect(component: Component, aspectName: string): Serializable | undefined {\n    const aspectsData = this.getBuilderData(component)?.aspectsData;\n    const data = aspectsData?.find((aspectData) => aspectData.aspectId === aspectName);\n    return data?.data;\n  }\n\n  getArtifacts(component: Component): ArtifactObject[] | undefined {\n    return this.getBuilderData(component)?.artifacts;\n  }\n\n  getBuilderData(component: Component): BuilderData | undefined {\n    return component.state.aspects.get(BuilderAspect.id)?.data as BuilderData | undefined;\n  }\n\n  /**\n   * build given components for release.\n   * for each one of the envs it runs a series of tasks.\n   * in case of an error in a task, it stops the execution of that env and continue to the next\n   * env. at the end, the results contain the data and errors per env.\n   */\n  async build(\n    components: Component[],\n    isolateOptions?: IsolateComponentsOptions,\n    builderOptions?: BuilderServiceOptions\n  ): Promise<TaskResultsList> {\n    const ids = components.map((c) => c.id);\n    const network = await this.isolator.isolateComponents(ids, isolateOptions);\n    const envs = await this.envs.createEnvironment(network.graphCapsules.getAllComponents());\n    const builderServiceOptions = { seedersOnly: isolateOptions?.seedersOnly, ...(builderOptions || {}) };\n    const buildResult = await envs.runOnce(this.buildService, builderServiceOptions);\n    return buildResult;\n  }\n\n  async runTagTasks(components: Component[], isolateOptions?: IsolateComponentsOptions): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.tagService, { seedersOnly: isolateOptions?.seedersOnly });\n\n    return buildResult;\n  }\n\n  async runSnapTasks(components: Component[], isolateOptions?: IsolateComponentsOptions): Promise<TaskResultsList> {\n    const envs = await this.envs.createEnvironment(components);\n    const buildResult = await envs.runOnce(this.snapService, { seedersOnly: isolateOptions?.seedersOnly });\n\n    return buildResult;\n  }\n\n  listTasks(component: Component) {\n    const compEnv = this.envs.getEnv(component);\n    const buildTasks = this.buildService.getDescriptor(compEnv).tasks;\n    const tagTasks = this.tagService.getDescriptor(compEnv).tasks;\n    const snapTasks = this.snapService.getDescriptor(compEnv).tasks;\n    return { id: component.id, envId: compEnv.id, buildTasks, tagTasks, snapTasks };\n  }\n\n  /**\n   * register a build task to apply on all component build pipelines.\n   * build happens on `bit build` and as part of `bit tag --persist`.\n   */\n  registerBuildTasks(tasks: BuildTask[]) {\n    this.buildTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * @deprecated use registerTagTasks or registerSnapTasks\n   */\n  registerDeployTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit tag'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerTagTasks(tasks: BuildTask[]) {\n    this.tagTaskSlot.register(tasks);\n    return this;\n  }\n\n  /**\n   * tag tasks that don't get executed on `bit build`, only on `bit snap'.\n   * this pipeline is running once the build-pipeline has completed.\n   */\n  registerSnapTasks(tasks: BuildTask[]) {\n    this.snapTaskSlot.register(tasks);\n    return this;\n  }\n\n  static slots = [\n    Slot.withType<BuildTask>(),\n    Slot.withType<StorageResolver>(),\n    Slot.withType<BuildTask>(),\n    Slot.withType<BuildTask>(),\n  ];\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    CLIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    ScopeAspect,\n    IsolatorAspect,\n    LoggerAspect,\n    AspectLoaderAspect,\n    GraphqlAspect,\n    ComponentAspect,\n  ];\n\n  static async provider(\n    [cli, envs, workspace, scope, isolator, loggerExt, aspectLoader, graphql]: [\n      CLIMain,\n      EnvsMain,\n      Workspace,\n      ScopeMain,\n      IsolatorMain,\n      LoggerMain,\n      AspectLoaderMain,\n      GraphqlMain\n    ],\n    config,\n    [buildTaskSlot, storageResolversSlot, tagTaskSlot, snapTaskSlot]: [\n      TaskSlot,\n      StorageResolverSlot,\n      TaskSlot,\n      TaskSlot\n    ]\n  ) {\n    const artifactFactory = new ArtifactFactory(storageResolversSlot);\n    const logger = loggerExt.createLogger(BuilderAspect.id);\n    const buildService = new BuilderService(\n      isolator,\n      logger,\n      buildTaskSlot,\n      'getBuildPipe',\n      'build',\n      artifactFactory,\n      scope\n    );\n    envs.registerService(buildService);\n    const tagService = new BuilderService(isolator, logger, tagTaskSlot, 'getTagPipe', 'tag', artifactFactory, scope);\n    const snapService = new BuilderService(\n      isolator,\n      logger,\n      snapTaskSlot,\n      'getSnapPipe',\n      'snap',\n      artifactFactory,\n      scope\n    );\n    const builder = new BuilderMain(\n      envs,\n      workspace,\n      buildService,\n      tagService,\n      snapService,\n      scope,\n      isolator,\n      aspectLoader,\n      buildTaskSlot,\n      tagTaskSlot,\n      snapTaskSlot,\n      storageResolversSlot\n    );\n\n    graphql.register(builderSchema(builder));\n    const func = builder.tagListener.bind(builder);\n    if (scope) scope.onTag(func);\n    if (workspace && !workspace.consumer.isLegacy) {\n      const commands = [new BuilderCmd(builder, workspace, logger), new ArtifactsCmd(builder, scope)];\n      cli.unregister('build');\n      cli.register(...commands);\n    }\n    return builder;\n  }\n}\n\nBuilderAspect.addRuntime(BuilderMain);\n"]}