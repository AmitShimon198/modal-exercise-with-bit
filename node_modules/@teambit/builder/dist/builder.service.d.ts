import { EnvDefinition, EnvService, ExecutionContext } from '@teambit/envs';
import { ScopeMain } from '@teambit/scope';
import { Logger } from '@teambit/logger';
import { IsolatorMain } from '@teambit/isolator';
import { Component } from '@teambit/component';
import { TaskResultsList } from './task-results-list';
import { TaskSlot } from './builder.main.runtime';
import { BuildContext } from './build-task';
import { ArtifactFactory } from './artifact';
export declare type BuildServiceResults = {
    id: string;
    buildResults: TaskResultsList;
    components: Component[];
    errors?: [];
};
export declare type BuilderServiceOptions = {
    seedersOnly?: boolean;
    tasks?: string[];
    skipTests?: boolean;
};
export declare type BuilderDescriptor = {
    tasks: string[];
};
export declare type EnvsBuildContext = {
    [envId: string]: BuildContext;
};
export declare class BuilderService implements EnvService<BuildServiceResults, BuilderDescriptor> {
    private isolator;
    private logger;
    private taskSlot;
    private pipeNameOnEnv;
    private displayPipeName;
    private artifactFactory;
    private scope;
    name: string;
    constructor(isolator: IsolatorMain, logger: Logger, taskSlot: TaskSlot, pipeNameOnEnv: 'getBuildPipe' | 'getTagPipe' | 'getSnapPipe', displayPipeName: string, artifactFactory: ArtifactFactory, scope: ScopeMain);
    runOnce(envsExecutionContext: ExecutionContext[], options: BuilderServiceOptions): Promise<TaskResultsList>;
    render(env: EnvDefinition): JSX.Element;
    getDescriptor(env: EnvDefinition): {
        tasks: string[];
    };
}
