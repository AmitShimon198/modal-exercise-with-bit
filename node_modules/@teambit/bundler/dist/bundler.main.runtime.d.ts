import { PubsubMain } from '@teambit/pubsub';
import { Component } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { GraphqlMain } from '@teambit/graphql';
import { SlotRegistry } from '@teambit/harmony';
import { BrowserRuntime } from './browser-runtime';
import { ComponentServer } from './component-server';
import { BundlerContext } from './dev-server-context';
import { DevServerService } from './dev-server.service';
export declare type BrowserRuntimeSlot = SlotRegistry<BrowserRuntime>;
export declare type BundlerConfig = {
    dedicatedEnvDevServers: string[];
};
export declare class BundlerMain {
    readonly config: BundlerConfig;
    private pubsub;
    private envs;
    private devService;
    private runtimeSlot;
    constructor(config: BundlerConfig, pubsub: PubsubMain, envs: EnvsMain, devService: DevServerService, runtimeSlot: BrowserRuntimeSlot);
    devServer(components: Component[]): Promise<ComponentServer[]>;
    getComponentServer(component: Component): undefined | ComponentServer;
    computeEntries(context: BundlerContext): Promise<string[]>;
    registerTarget(browserRuntime: BrowserRuntime[]): this;
    private _componentServers;
    private indexByComponent;
    static slots: ((registerFn: () => string) => SlotRegistry<BrowserRuntime>)[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        dedicatedEnvDevServers: never[];
    };
    static provider([pubsub, envs, graphql]: [PubsubMain, EnvsMain, GraphqlMain], config: any, [runtimeSlot]: [BrowserRuntimeSlot]): Promise<BundlerMain>;
}
