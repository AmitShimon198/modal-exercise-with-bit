{"version":3,"sources":["dev-server.service.ts"],"names":["DevServerService","constructor","pubsub","runtimeSlot","runOnce","contexts","dedicatedEnvDevServers","groupedEnvs","servers","Promise","all","Object","entries","map","id","contextList","mainContext","find","context","envDefinition","additionalContexts","filter","devServerContext","buildContext","devServer","envRuntime","env","getDevServer","ComponentServer","mergeContext","getComponentsFromContexts","components","relatedContexts","ctx","concat","assign","entry","rootPath","publicPath"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIO,MAAMA,gBAAN,CAA8D;AAGnEC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,MAJC;AAMT;AACJ;AACA;AACYC,EAAAA,WATC,EAUT;AAAA,SANQD,MAMR,GANQA,MAMR;AAAA,SADQC,WACR,GADQA,WACR;AAAA,kDAZK,YAYL;AAAE,GAb+D,CAenE;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEa,QAAPC,OAAO,CACXC,QADW,EAEX;AAAEC,IAAAA;AAAF,GAFW,EAGiB;AAC5B,UAAMC,WAAW,GAAG,4BAAUF,QAAV,EAAoBC,sBAApB,CAApB;AAEA,UAAME,OAAO,GAAG,MAAMC,OAAO,CAACC,GAAR,CACpBC,MAAM,CAACC,OAAP,CAAeL,WAAf,EAA4BM,GAA5B,CAAgC,OAAO,CAACC,EAAD,EAAKC,WAAL,CAAP,KAA6B;AAC3D,YAAMC,WAAW,GAAGD,WAAW,CAACE,IAAZ,CAAkBC,OAAD,IAAaA,OAAO,CAACC,aAAR,CAAsBL,EAAtB,KAA6BA,EAA3D,KAAkEC,WAAW,CAAC,CAAD,CAAjG;AACA,YAAMK,kBAAkB,GAAGL,WAAW,CAACM,MAAZ,CAAoBH,OAAD,IAAaA,OAAO,CAACC,aAAR,CAAsBL,EAAtB,KAA6BA,EAA7D,CAA3B;AAEA,YAAMQ,gBAAgB,GAAG,MAAM,KAAKC,YAAL,CAAkBP,WAAlB,EAA+BI,kBAA/B,CAA/B;AACA,YAAMI,SAAoB,GAAG,MAAMF,gBAAgB,CAACG,UAAjB,CAA4BC,GAA5B,CAAgCC,YAAhC,CAA6CL,gBAA7C,CAAnC;AAEA,aAAO,KAAIM,kCAAJ,EAAoB,KAAK1B,MAAzB,EAAiCoB,gBAAjC,EAAmD,CAAC,IAAD,EAAO,IAAP,CAAnD,EAAiEE,SAAjE,CAAP;AACD,KARD,CADoB,CAAtB;AAYA,WAAOhB,OAAP;AACD;;AAEDqB,EAAAA,YAAY,GAAG,CAAE;;AAETC,EAAAA,yBAAyB,CAACzB,QAAD,EAA+B;AAC9D,WAAO,uBACLA,QAAQ,CAACQ,GAAT,CAAcK,OAAD,IAAa;AACxB,aAAOA,OAAO,CAACa,UAAf;AACD,KAFD,CADK,CAAP;AAKD;AAED;AACF;AACA;;;AAC4B,QAAZR,YAAY,CACxBL,OADwB,EAExBE,kBAAsC,GAAG,EAFjB,EAGG;AAC3BF,IAAAA,OAAO,CAACc,eAAR,GAA0BZ,kBAAkB,CAACP,GAAnB,CAAwBoB,GAAD,IAASA,GAAG,CAACd,aAAJ,CAAkBL,EAAlD,CAA1B;AACAI,IAAAA,OAAO,CAACa,UAAR,GAAqBb,OAAO,CAACa,UAAR,CAAmBG,MAAnB,CAA0B,KAAKJ,yBAAL,CAA+BV,kBAA/B,CAA1B,CAArB;AAEA,WAAOT,MAAM,CAACwB,MAAP,CAAcjB,OAAd,EAAuB;AAC5BkB,MAAAA,KAAK,EAAE,MAAM,0BAASlB,OAAT,EAAkB,KAAKf,WAAvB,CADe;AAE5B;AACAkC,MAAAA,QAAQ,EAAG,WAAUnB,OAAO,CAACO,UAAR,CAAmBX,EAAG,EAHf;AAI5BwB,MAAAA,UAAU,EAAG;AAJe,KAAvB,CAAP;AAMD;;AAtEkE","sourcesContent":["import { EnvService, ExecutionContext } from '@teambit/envs';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { flatten } from 'lodash';\nimport { BrowserRuntimeSlot } from './bundler.main.runtime';\nimport { ComponentServer } from './component-server';\nimport { dedupEnvs } from './dedup-envs';\nimport { DevServer } from './dev-server';\nimport { DevServerContext } from './dev-server-context';\nimport { getEntry } from './get-entry';\n\nexport type DevServerServiceOptions = { dedicatedEnvDevServers?: string[] };\n\nexport class DevServerService implements EnvService<ComponentServer> {\n  name = 'dev server';\n\n  constructor(\n    /**\n     * browser runtime slot\n     */\n    private pubsub: PubsubMain,\n\n    /**\n     * browser runtime slot\n     */\n    private runtimeSlot: BrowserRuntimeSlot\n  ) {}\n\n  // async run(context: ExecutionContext): Promise<ComponentServer[]> {\n  //   const devServerContext = await this.buildContext(context);\n  //   const devServer: DevServer = context.env.getDevServer(devServerContext);\n  //   const port = await selectPort();\n  //   // TODO: refactor to replace with a component server instance.\n  //   return new ComponentServer(this.pubsub, context, port, devServer);\n  // }\n\n  async runOnce(\n    contexts: ExecutionContext[],\n    { dedicatedEnvDevServers }: DevServerServiceOptions\n  ): Promise<ComponentServer[]> {\n    const groupedEnvs = dedupEnvs(contexts, dedicatedEnvDevServers);\n\n    const servers = await Promise.all(\n      Object.entries(groupedEnvs).map(async ([id, contextList]) => {\n        const mainContext = contextList.find((context) => context.envDefinition.id === id) || contextList[0];\n        const additionalContexts = contextList.filter((context) => context.envDefinition.id !== id);\n\n        const devServerContext = await this.buildContext(mainContext, additionalContexts);\n        const devServer: DevServer = await devServerContext.envRuntime.env.getDevServer(devServerContext);\n\n        return new ComponentServer(this.pubsub, devServerContext, [3300, 3400], devServer);\n      })\n    );\n\n    return servers;\n  }\n\n  mergeContext() {}\n\n  private getComponentsFromContexts(contexts: ExecutionContext[]) {\n    return flatten(\n      contexts.map((context) => {\n        return context.components;\n      })\n    );\n  }\n\n  /**\n   * builds the execution context for the dev server.\n   */\n  private async buildContext(\n    context: ExecutionContext,\n    additionalContexts: ExecutionContext[] = []\n  ): Promise<DevServerContext> {\n    context.relatedContexts = additionalContexts.map((ctx) => ctx.envDefinition.id);\n    context.components = context.components.concat(this.getComponentsFromContexts(additionalContexts));\n\n    return Object.assign(context, {\n      entry: await getEntry(context, this.runtimeSlot),\n      // don't start with a leading \"/\" because it generates errors on Windows\n      rootPath: `preview/${context.envRuntime.id}`,\n      publicPath: `/public`,\n    });\n  }\n}\n"]}