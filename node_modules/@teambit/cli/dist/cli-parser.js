"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/es.string.replace.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CLIParser = void 0;

function _didyoumean() {
  const data = _interopRequireDefault(require("didyoumean"));

  _didyoumean = function () {
    return data;
  };

  return data;
}

function _yargs() {
  const data = _interopRequireDefault(require("yargs"));

  _yargs = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("@teambit/legacy/dist/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/logger/logger"));

  _logger = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("@teambit/legacy/dist/cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _getCommandId() {
  const data = require("./get-command-id");

  _getCommandId = function () {
    return data;
  };

  return data;
}

function _help() {
  const data = require("./help");

  _help = function () {
    return data;
  };

  return data;
}

function _yargsAdapter() {
  const data = require("./yargs-adapter");

  _yargsAdapter = function () {
    return data;
  };

  return data;
}

function _commandNotFound() {
  const data = require("./exceptions/command-not-found");

  _commandNotFound = function () {
    return data;
  };

  return data;
}

class CLIParser {
  constructor(commands, groups, parser = _yargs().default) {
    this.commands = commands;
    this.groups = groups;
    this.parser = parser;
  }

  async parse(args = process.argv.slice(2)) {
    this.throwForNonExistsCommand(args[0]);
    (0, _yargs().default)(args);

    _yargs().default.help(false);

    this.configureParser();
    this.commands.forEach(command => {
      if (command.commands && command.commands.length) {
        this.parseCommandWithSubCommands(command);
      } else {
        const yargsCommand = this.getYargsCommand(command);

        _yargs().default.command(yargsCommand);
      }
    });
    this.configureGlobalFlags();
    this.setHelpMiddleware();
    this.handleCommandFailure();
    this.configureCompletion();

    _yargs().default.strict(); // don't allow non-exist flags and non-exist commands


    _yargs().default // .recommendCommands() // don't use it, it brings the global help of yargs, we have a custom one
    .wrap(null);

    await _yargs().default.parse();
  }

  setHelpMiddleware() {
    _yargs().default.middleware(argv => {
      if (argv._.length === 0 && argv.help) {
        // this is the main help page
        this.printHelp();
        process.exit(0);
      }

      if (argv.help) {
        _loader().default.off(); // stop the "loading bit..." before showing help if needed
        // this is a command help page


        _yargs().default.showHelp(logCommandHelp);

        if (!_logger().default.isDaemon) process.exit(0);
      }
    }, true);
  }

  handleCommandFailure() {
    _yargs().default.fail((msg, err) => {
      _loader().default.stop();

      if (err) {
        throw err;
      }

      _yargs().default.showHelp(logCommandHelp); // eslint-disable-next-line no-console


      console.log(`\n${_chalk().default.yellow(msg)}`);
      if (!_logger().default.isDaemon) process.exit(1);
    });
  }

  configureCompletion() {
    const commandsToShowComponentIdsForCompletion = ['show', 'diff', 'tag', 'export', 'env', 'envs', 'compile', 'build', 'test', 'lint', 'log', 'dependents', 'dependencies']; // @ts-ignore

    _yargs().default.completion('completion', async function (current, argv, completionFilter, done) {
      if (!current.startsWith('-') && commandsToShowComponentIdsForCompletion.includes(argv._[1])) {
        const consumer = await (0, _consumer().loadConsumerIfExist)();
        done(consumer === null || consumer === void 0 ? void 0 : consumer.bitmapIdsFromCurrentLane.map(id => id.toStringWithoutVersion()));
      } else {
        completionFilter();
      }
    });
  }

  printHelp() {
    const help = (0, _help().formatHelp)(this.commands, this.groups); // eslint-disable-next-line no-console

    console.log(help);
  }

  configureParser() {
    _yargs().default.parserConfiguration({
      // 'strip-dashed': true, // we can't enable it, otherwise, the completion doesn't work
      'strip-aliased': true,
      'boolean-negation': false,
      'populate--': true
    });
  }

  parseCommandWithSubCommands(command) {
    const yarnCommand = this.getYargsCommand(command);

    yarnCommand.builder = () => {
      var _command$commands;

      (_command$commands = command.commands) === null || _command$commands === void 0 ? void 0 : _command$commands.forEach(cmd => {
        const subCommand = this.getYargsCommand(cmd);

        _yargs().default.command(subCommand);
      });
      return _yargs().default;
    };

    _yargs().default.command(yarnCommand);
  }

  getYargsCommand(command) {
    const yarnCommand = new (_yargsAdapter().YargsAdapter)(command);
    yarnCommand.handler = yarnCommand.handler.bind(yarnCommand);
    return yarnCommand;
  }

  configureGlobalFlags() {
    _yargs().default.option('help', {
      alias: 'h',
      describe: 'show help',
      group: _yargsAdapter().GLOBAL_GROUP
    }).option('version', {
      global: false,
      alias: 'v',
      describe: 'show version',
      group: _yargsAdapter().GLOBAL_GROUP
    });
  }

  throwForNonExistsCommand(commandName) {
    if (!commandName || commandName.startsWith('-')) {
      return;
    }

    const commandsNames = this.commands.map(c => (0, _getCommandId().getCommandId)(c.name));
    const aliases = this.commands.map(c => c.alias).filter(a => a);
    const existingGlobalFlags = ['-V', '--version'];
    const validCommands = [...commandsNames, ...aliases, ...existingGlobalFlags];
    const commandExist = validCommands.includes(commandName);

    if (!commandExist) {
      _didyoumean().default.returnFirstMatch = true;
      const suggestions = (0, _didyoumean().default)(commandName, this.commands.filter(c => !c.private).map(c => (0, _getCommandId().getCommandId)(c.name)));
      const suggestion = suggestions && Array.isArray(suggestions) ? suggestions[0] : suggestions;
      throw new (_commandNotFound().CommandNotFound)(commandName, suggestion);
    }
  }

}
/**
 * color the flags with green.
 * there is no API to get the options, so it is done by regex.
 * see https://github.com/yargs/yargs/issues/1956
 */


exports.CLIParser = CLIParser;

function logCommandHelp(help) {
  const replacer = (_, p1, p2) => `${p1}${_chalk().default.green(p2)}`;

  const lines = help.split('\n');
  let passedOptions = false;

  for (let i = 0; i < lines.length; i += 1) {
    const line = lines[i];

    if (line.startsWith(_yargsAdapter().STANDARD_GROUP)) {
      passedOptions = true;
    } else if (passedOptions) {
      lines[i] = line.replace(/(--)([\w-]+)/, replacer).replace(/(-)([\w-]+)/, replacer);
    }
  } // eslint-disable-next-line no-console


  console.log(lines.join('\n'));
}

//# sourceMappingURL=cli-parser.js.map