{"version":3,"sources":["cli-parser.ts"],"names":["CLIParser","constructor","commands","groups","parser","yargs","parse","args","process","argv","slice","throwForNonExistsCommand","help","configureParser","forEach","command","length","parseCommandWithSubCommands","yargsCommand","getYargsCommand","configureGlobalFlags","setHelpMiddleware","handleCommandFailure","configureCompletion","strict","wrap","middleware","_","printHelp","exit","loader","off","showHelp","logCommandHelp","logger","isDaemon","fail","msg","err","stop","console","log","chalk","yellow","commandsToShowComponentIdsForCompletion","completion","current","completionFilter","done","startsWith","includes","consumer","bitmapIdsFromCurrentLane","map","id","toStringWithoutVersion","parserConfiguration","yarnCommand","builder","cmd","subCommand","YargsAdapter","handler","bind","option","alias","describe","group","GLOBAL_GROUP","global","commandName","commandsNames","c","name","aliases","filter","a","existingGlobalFlags","validCommands","commandExist","didYouMean","returnFirstMatch","suggestions","private","suggestion","Array","isArray","CommandNotFound","replacer","p1","p2","green","lines","split","passedOptions","i","line","STANDARD_GROUP","replace","join"],"mappings":"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","sourcesContent":["import didYouMean from 'didyoumean';\nimport yargs, { CommandModule } from 'yargs';\nimport { Command } from '@teambit/legacy/dist/cli/command';\nimport { GroupsType } from '@teambit/legacy/dist/cli/command-groups';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport chalk from 'chalk';\nimport { getCommandId } from './get-command-id';\nimport { formatHelp } from './help';\nimport { GLOBAL_GROUP, STANDARD_GROUP, YargsAdapter } from './yargs-adapter';\nimport { CommandNotFound } from './exceptions/command-not-found';\n\nexport class CLIParser {\n  constructor(private commands: Command[], private groups: GroupsType, public parser = yargs) {}\n\n  async parse(args = process.argv.slice(2)) {\n    this.throwForNonExistsCommand(args[0]);\n\n    yargs(args);\n    yargs.help(false);\n    this.configureParser();\n    this.commands.forEach((command: Command) => {\n      if (command.commands && command.commands.length) {\n        this.parseCommandWithSubCommands(command);\n      } else {\n        const yargsCommand = this.getYargsCommand(command);\n        yargs.command(yargsCommand);\n      }\n    });\n    this.configureGlobalFlags();\n    this.setHelpMiddleware();\n    this.handleCommandFailure();\n    this.configureCompletion();\n    yargs.strict(); // don't allow non-exist flags and non-exist commands\n\n    yargs\n      // .recommendCommands() // don't use it, it brings the global help of yargs, we have a custom one\n      .wrap(null);\n\n    await yargs.parse();\n  }\n\n  private setHelpMiddleware() {\n    yargs.middleware((argv) => {\n      if (argv._.length === 0 && argv.help) {\n        // this is the main help page\n        this.printHelp();\n        process.exit(0);\n      }\n      if (argv.help) {\n        loader.off(); // stop the \"loading bit...\" before showing help if needed\n        // this is a command help page\n        yargs.showHelp(logCommandHelp);\n        if (!logger.isDaemon) process.exit(0);\n      }\n    }, true);\n  }\n\n  private handleCommandFailure() {\n    yargs.fail((msg, err) => {\n      loader.stop();\n      if (err) {\n        throw err;\n      }\n      yargs.showHelp(logCommandHelp);\n      // eslint-disable-next-line no-console\n      console.log(`\\n${chalk.yellow(msg)}`);\n      if (!logger.isDaemon) process.exit(1);\n    });\n  }\n\n  private configureCompletion() {\n    const commandsToShowComponentIdsForCompletion = [\n      'show',\n      'diff',\n      'tag',\n      'export',\n      'env',\n      'envs',\n      'compile',\n      'build',\n      'test',\n      'lint',\n      'log',\n      'dependents',\n      'dependencies',\n    ];\n    // @ts-ignore\n    yargs.completion('completion', async function (current, argv, completionFilter, done) {\n      if (!current.startsWith('-') && commandsToShowComponentIdsForCompletion.includes(argv._[1])) {\n        const consumer = await loadConsumerIfExist();\n        done(consumer?.bitmapIdsFromCurrentLane.map((id) => id.toStringWithoutVersion()));\n      } else {\n        completionFilter();\n      }\n    });\n  }\n\n  private printHelp() {\n    const help = formatHelp(this.commands, this.groups);\n    // eslint-disable-next-line no-console\n    console.log(help);\n  }\n\n  private configureParser() {\n    yargs.parserConfiguration({\n      // 'strip-dashed': true, // we can't enable it, otherwise, the completion doesn't work\n      'strip-aliased': true,\n      'boolean-negation': false,\n      'populate--': true,\n    });\n  }\n\n  private parseCommandWithSubCommands(command: Command) {\n    const yarnCommand = this.getYargsCommand(command);\n    yarnCommand.builder = () => {\n      command.commands?.forEach((cmd) => {\n        const subCommand = this.getYargsCommand(cmd);\n        yargs.command(subCommand);\n      });\n      return yargs;\n    };\n    yargs.command(yarnCommand);\n  }\n\n  private getYargsCommand(command: Command): CommandModule {\n    const yarnCommand = new YargsAdapter(command);\n    yarnCommand.handler = yarnCommand.handler.bind(yarnCommand);\n\n    return yarnCommand;\n  }\n\n  private configureGlobalFlags() {\n    yargs\n      .option('help', {\n        alias: 'h',\n        describe: 'show help',\n        group: GLOBAL_GROUP,\n      })\n      .option('version', {\n        global: false,\n        alias: 'v',\n        describe: 'show version',\n        group: GLOBAL_GROUP,\n      });\n  }\n\n  private throwForNonExistsCommand(commandName: string) {\n    if (!commandName || commandName.startsWith('-')) {\n      return;\n    }\n    const commandsNames = this.commands.map((c) => getCommandId(c.name));\n    const aliases = this.commands.map((c) => c.alias).filter((a) => a);\n    const existingGlobalFlags = ['-V', '--version'];\n    const validCommands = [...commandsNames, ...aliases, ...existingGlobalFlags];\n    const commandExist = validCommands.includes(commandName);\n\n    if (!commandExist) {\n      didYouMean.returnFirstMatch = true;\n      const suggestions = didYouMean(\n        commandName,\n        this.commands.filter((c) => !c.private).map((c) => getCommandId(c.name))\n      );\n      const suggestion = suggestions && Array.isArray(suggestions) ? suggestions[0] : suggestions;\n\n      throw new CommandNotFound(commandName, suggestion as string);\n    }\n  }\n}\n\n/**\n * color the flags with green.\n * there is no API to get the options, so it is done by regex.\n * see https://github.com/yargs/yargs/issues/1956\n */\nfunction logCommandHelp(help: string) {\n  const replacer = (_, p1, p2) => `${p1}${chalk.green(p2)}`;\n  const lines = help.split('\\n');\n  let passedOptions = false;\n  for (let i = 0; i < lines.length; i += 1) {\n    const line = lines[i];\n    if (line.startsWith(STANDARD_GROUP)) {\n      passedOptions = true;\n    } else if (passedOptions) {\n      lines[i] = line.replace(/(--)([\\w-]+)/, replacer).replace(/(-)([\\w-]+)/, replacer);\n    }\n  }\n  // eslint-disable-next-line no-console\n  console.log(lines.join('\\n'));\n}\n"]}