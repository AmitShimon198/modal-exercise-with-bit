{"version":3,"sources":["cli.cmd.ts"],"names":["CliGenerateCmd","constructor","cliMain","report","args","metadata","GenerateCommandsDoc","commands","generate","CliCmd","logger","isDaemon","rl","readline","createInterface","input","process","stdin","output","stdout","prompt","completer","line","cb","cliParser","CLIParser","groups","Promise","resolve","on","cmd","trim","split","parse","err","lineSplit","values","length","completeCommand","then","consumer","comps","bitmapIdsFromCurrentLane","map","id","toStringWithoutVersion","filter","c","includes","catch","name","startsWith"],"mappings":"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","sourcesContent":["// eslint-disable-next-line max-classes-per-file\nimport { Command, CommandOptions } from '@teambit/cli';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport { handleErrorAndExit } from '@teambit/legacy/dist/cli/handle-errors';\nimport { loadConsumerIfExist } from '@teambit/legacy/dist/consumer';\nimport readline from 'readline';\nimport { CLIParser } from './cli-parser';\nimport { CLIMain } from './cli.main.runtime';\nimport { GenerateCommandsDoc, GenerateOpts } from './generate-doc-md';\n\nexport class CliGenerateCmd implements Command {\n  name = 'generate';\n  description = 'EXPERIMENTAL. generate an .md file with all commands details';\n  alias = '';\n  loader = false;\n  group = 'general';\n  options = [\n    [\n      '',\n      'metadata',\n      'metadata/front-matter to place at the top of the .md file, enter as an object e.g. --metadata.id=cli --metadata.title=commands',\n    ],\n  ] as CommandOptions;\n\n  constructor(private cliMain: CLIMain) {}\n\n  async report(args, { metadata }: GenerateOpts): Promise<string> {\n    return new GenerateCommandsDoc(this.cliMain.commands, { metadata }).generate();\n  }\n}\n\nexport class CliCmd implements Command {\n  name = 'cli';\n  description = 'EXPERIMENTAL. enters bit cli program and generates commands list';\n  alias = '';\n  commands: Command[] = [];\n  loader = false;\n  group = 'general';\n  options = [] as CommandOptions;\n\n  constructor(private cliMain: CLIMain) {}\n\n  async report(): Promise<string> {\n    logger.isDaemon = true;\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: process.stdout,\n      prompt: 'bit > ',\n      completer: (line, cb) => completer(line, cb, this.cliMain),\n    });\n\n    const cliParser = new CLIParser(this.cliMain.commands, this.cliMain.groups);\n\n    rl.prompt();\n\n    return new Promise((resolve) => {\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      rl.on('line', async (line) => {\n        const cmd = line.trim().split(' ');\n        try {\n          await cliParser.parse(cmd);\n        } catch (err: any) {\n          await handleErrorAndExit(err, cmd[0]);\n        }\n        rl.prompt();\n      }).on('close', () => {\n        resolve('Have a great day!');\n      });\n    });\n  }\n}\n\nfunction completer(line: string, cb: Function, cliMain: CLIMain) {\n  const lineSplit = line.split(' ');\n  let values: string[] = [];\n  if (lineSplit.length <= 1) {\n    values = completeCommand(line, cliMain);\n    cb(null, [values, line]);\n  }\n  loadConsumerIfExist()\n    .then((consumer) => {\n      const comps = consumer?.bitmapIdsFromCurrentLane.map((id) => id.toStringWithoutVersion()) || [];\n      values = comps.filter((c) => c.includes(lineSplit[1]));\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(null, [values, line]);\n    })\n    .catch((err) => {\n      // eslint-disable-next-line promise/no-callback-in-promise\n      cb(err, [[], line]);\n    });\n}\n\nfunction completeCommand(line: string, cliMain: CLIMain): string[] {\n  const commands = cliMain.commands.filter((cmd) => cmd.name.startsWith(line));\n  return commands.map((c) => c.name).map((name) => name.split(' ')[0]);\n}\n"]}