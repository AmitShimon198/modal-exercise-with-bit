import { SlotRegistry } from '@teambit/harmony';
import { Command } from '@teambit/legacy/dist/cli/command';
import { GroupsType } from '@teambit/legacy/dist/cli/command-groups';
export declare type CommandList = Array<Command>;
export declare type OnStart = (hasWorkspace: boolean) => Promise<void>;
export declare type OnStartSlot = SlotRegistry<OnStart>;
export declare type CommandsSlot = SlotRegistry<CommandList>;
export declare class CLIMain {
    private commandsSlot;
    private onStartSlot;
    groups: GroupsType;
    constructor(commandsSlot: CommandsSlot, onStartSlot: OnStartSlot);
    register(...commands: CommandList): void;
    unregister(commandName: string): void;
    get commands(): CommandList;
    registerGroup(name: string, description: string): void;
    registerOnStart(onStartFn: OnStart): this;
    run(hasWorkspace: boolean): Promise<void>;
    private invokeOnStart;
    private setDefaults;
    static dependencies: never[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => SlotRegistry<CommandList>) | ((registerFn: () => string) => SlotRegistry<OnStart>))[];
    static provider(deps: any, config: any, [commandsSlot, onStartSlot]: [CommandsSlot, OnStartSlot]): Promise<CLIMain>;
}
