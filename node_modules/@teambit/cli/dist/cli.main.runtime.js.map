{"version":3,"sources":["cli.main.runtime.ts"],"names":["CLIMain","constructor","commandsSlot","onStartSlot","groups","register","commands","forEach","command","setDefaults","cmd","unregister","commandName","toArray","aspectId","filteredCommands","filter","name","map","set","values","flat","registerGroup","description","AlreadyExistsError","registerOnStart","onStartFn","run","hasWorkspace","invokeOnStart","CliParser","CLIParser","parse","onStartFns","promises","onStart","Promise","all","alias","shortDescription","group","options","private","loader","undefined","internal","provider","deps","config","cliMain","legacyExtensions","extension","registerHookActionsOnHooksManager","extensionsCommands","reduce","acc","curr","length","concat","legacyRegistry","legacyCommands","legacyCommandsAdapters","LegacyCommandAdapter","cliGenerateCmd","CliGenerateCmd","cliCmd","CliCmd","helpCmd","HelpCmd","push","CompletionCmd","MainRuntime","Slot","withType","CLIAspect","addRuntime"],"mappings":"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","sourcesContent":["import { Slot, SlotRegistry } from '@teambit/harmony';\nimport { buildRegistry } from '@teambit/legacy/dist/cli';\nimport { Command } from '@teambit/legacy/dist/cli/command';\nimport LegacyLoadExtensions from '@teambit/legacy/dist/legacy-extensions/extensions-loader';\nimport { groups, GroupsType } from '@teambit/legacy/dist/cli/command-groups';\nimport { clone } from 'lodash';\nimport { CLIAspect, MainRuntime } from './cli.aspect';\nimport { AlreadyExistsError } from './exceptions/already-exists';\nimport { getCommandId } from './get-command-id';\nimport { LegacyCommandAdapter } from './legacy-command-adapter';\nimport { CLIParser } from './cli-parser';\nimport { CompletionCmd } from './completion.cmd';\nimport { CliCmd, CliGenerateCmd } from './cli.cmd';\nimport { HelpCmd } from './help.cmd';\n\nexport type CommandList = Array<Command>;\nexport type OnStart = (hasWorkspace: boolean) => Promise<void>;\n\nexport type OnStartSlot = SlotRegistry<OnStart>;\nexport type CommandsSlot = SlotRegistry<CommandList>;\n\nexport class CLIMain {\n  public groups: GroupsType = clone(groups); // if it's not cloned, it is cached across loadBit() instances\n\n  constructor(private commandsSlot: CommandsSlot, private onStartSlot: OnStartSlot) {}\n\n  /**\n   * registers a new command in to the CLI.\n   */\n  register(...commands: CommandList) {\n    commands.forEach((command) => {\n      this.setDefaults(command);\n      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n      command.commands!.forEach((cmd) => this.setDefaults(cmd));\n    });\n    this.commandsSlot.register(commands);\n  }\n\n  /**\n   * helpful for having the same command name in different environments (legacy and Harmony)\n   */\n  unregister(commandName: string) {\n    this.commandsSlot.toArray().forEach(([aspectId, commands]) => {\n      const filteredCommands = commands.filter((command) => {\n        return getCommandId(command.name) !== commandName;\n      });\n      this.commandsSlot.map.set(aspectId, filteredCommands);\n    });\n  }\n\n  /**\n   * list of all registered commands. (legacy and new).\n   */\n  get commands(): CommandList {\n    return this.commandsSlot.values().flat();\n  }\n\n  /**\n   * when running `bit help`, commands are grouped by categories.\n   * this method helps registering a new group by providing its name and a description.\n   * the name is what needs to be assigned to the `group` property of the Command interface.\n   * the description is what shown in the `bit help` output.\n   */\n  registerGroup(name: string, description: string) {\n    if (this.groups[name]) {\n      throw new AlreadyExistsError('group', name);\n    }\n    this.groups[name] = description;\n  }\n\n  registerOnStart(onStartFn: OnStart) {\n    this.onStartSlot.register(onStartFn);\n    return this;\n  }\n\n  /**\n   * execute commands registered to this aspect.\n   */\n  async run(hasWorkspace: boolean) {\n    await this.invokeOnStart(hasWorkspace);\n    const CliParser = new CLIParser(this.commands, this.groups);\n    await CliParser.parse();\n  }\n\n  private async invokeOnStart(hasWorkspace: boolean) {\n    const onStartFns = this.onStartSlot.values();\n    const promises = onStartFns.map(async (onStart) => onStart(hasWorkspace));\n    return Promise.all(promises);\n  }\n\n  private setDefaults(command: Command) {\n    command.alias = command.alias || '';\n    command.description = command.description || '';\n    command.shortDescription = command.shortDescription || '';\n    command.group = command.group || 'ungrouped';\n    command.options = command.options || [];\n    command.private = command.private || false;\n    command.commands = command.commands || [];\n    if (command.loader === undefined) {\n      if (command.internal) {\n        command.loader = false;\n      } else {\n        command.loader = true;\n      }\n    }\n  }\n\n  static dependencies = [];\n  static runtime = MainRuntime;\n  static slots = [Slot.withType<CommandList>(), Slot.withType<OnStart>()];\n\n  static async provider(deps, config, [commandsSlot, onStartSlot]: [CommandsSlot, OnStartSlot]) {\n    const cliMain = new CLIMain(commandsSlot, onStartSlot);\n    const legacyExtensions = await LegacyLoadExtensions();\n    // Make sure to register all the hooks actions in the global hooks manager\n    legacyExtensions.forEach((extension) => {\n      extension.registerHookActionsOnHooksManager();\n    });\n\n    const extensionsCommands = legacyExtensions.reduce((acc, curr) => {\n      if (curr.commands && curr.commands.length) {\n        // @ts-ignore AUTO-ADDED-AFTER-MIGRATION-PLEASE-FIX!\n        acc = acc.concat(curr.commands);\n      }\n      return acc;\n    }, []);\n\n    const legacyRegistry = buildRegistry(extensionsCommands);\n    const legacyCommands = legacyRegistry.commands.concat(legacyRegistry.extensionsCommands || []);\n    const legacyCommandsAdapters = legacyCommands.map((command) => new LegacyCommandAdapter(command, cliMain));\n    const cliGenerateCmd = new CliGenerateCmd(cliMain);\n    const cliCmd = new CliCmd(cliMain);\n    const helpCmd = new HelpCmd(cliMain);\n    cliCmd.commands.push(cliGenerateCmd);\n    cliMain.register(...legacyCommandsAdapters, new CompletionCmd(), cliCmd, helpCmd);\n    return cliMain;\n  }\n}\n\nCLIAspect.addRuntime(CLIMain);\n"]}