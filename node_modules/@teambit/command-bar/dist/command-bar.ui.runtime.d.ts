import { SlotRegistry } from '@teambit/harmony';
import { UiUI } from '@teambit/ui';
import { PubsubUI } from '@teambit/pubsub';
import { SearchProvider, Keybinding, CommandHandler, CommandId } from './types';
declare type SearcherSlot = SlotRegistry<SearchProvider>;
declare type CommandSlot = SlotRegistry<CommandEntry[]>;
export declare type CommandEntry = {
    id: CommandId;
    handler: CommandHandler;
    keybinding?: Keybinding;
    displayName: string;
};
export declare class CommandBarUI {
    private searcherSlot;
    private commandSlot;
    private mousetrap;
    private commandSearcher;
    open: () => boolean;
    close: () => void;
    addSearcher(commandSearcher: SearchProvider): this;
    addCommand(...originalCommands: CommandEntry[]): ((next: CommandHandler) => void)[];
    run(commandId: CommandId): any;
    trigger: (key: string) => void;
    private search;
    private getCommand;
    private updateCommandsSearcher;
    private addKeybinding;
    private renderContext;
    setVisibility?: (visible: boolean) => void;
    getCommandBar: () => JSX.Element;
    constructor(searcherSlot: SearcherSlot, commandSlot: CommandSlot, pubSub: PubsubUI);
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<SearchProvider>) | ((registerFn: () => string) => SlotRegistry<CommandEntry[]>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([uiUi, pubsubUI]: [UiUI, PubsubUI], config: any, [searcherSlot, commandSlots]: [SearcherSlot, CommandSlot]): Promise<CommandBarUI>;
}
export {};
