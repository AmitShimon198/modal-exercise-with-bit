{"version":3,"sources":["compiler.cmd.ts"],"names":["CompileCmd","constructor","compile","logger","pubsub","report","components","compilerOptions","startTimestamp","process","hrtime","setStatusLine","sub","CompilerAspect","id","onComponentCompilationDone","bind","outputString","deleteDistDir","compileComponents","compileTimeLength","chalk","underline","componentsStatus","verbose","getStatusLine","clearStatusLine","data","code","getExitCode","json","compileResults","failedComponents","filter","component","errors","length","getSummaryIcon","green","red","yellow","numberOfComponents","numberOfFailingComponents","numberOfSuccessfulComponents","icon","summaryLine","event","type","ComponentCompilationOnDoneEvent","TYPE","push"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { Logger } from '@teambit/logger';\nimport type { PubsubMain, BitBaseEvent } from '@teambit/pubsub';\nimport chalk from 'chalk';\nimport prettyTime from 'pretty-time';\nimport type ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { formatCompileResults } from './output-formatter';\nimport { CompileError, WorkspaceCompiler, CompileOptions } from './workspace-compiler';\n\n// IDs & events\nimport { CompilerAspect } from './compiler.aspect';\nimport { ComponentCompilationOnDoneEvent } from './events';\n\ntype ComponentsStatus = {\n  buildResults: string[];\n  component: Array<ConsumerComponent>;\n  errors: Array<CompileError>;\n};\n\nexport class CompileCmd implements Command {\n  componentsStatus: Array<ComponentsStatus> = [];\n  name = 'compile [component...]';\n  description = 'compile components in the development workspace';\n  alias = '';\n  group = 'development';\n  options = [\n    ['c', 'changed', 'compile only new and modified components'],\n    ['v', 'verbose', 'show more data, such as, dist paths'],\n    ['j', 'json', 'return the compile results in json format'],\n  ] as CommandOptions;\n\n  constructor(private compile: WorkspaceCompiler, private logger: Logger, private pubsub: PubsubMain) {}\n\n  async report([components = []]: [string[]], compilerOptions: CompileOptions) {\n    const startTimestamp = process.hrtime();\n    this.logger.setStatusLine('Compiling your components, hold tight.');\n    this.pubsub.sub(CompilerAspect.id, this.onComponentCompilationDone.bind(this));\n\n    let outputString = '';\n    compilerOptions.deleteDistDir = true;\n    await this.compile.compileComponents(components, compilerOptions);\n    const compileTimeLength = process.hrtime(startTimestamp);\n\n    outputString += '\\n';\n    outputString += `  ${chalk.underline('STATUS')}\\t${chalk.underline('COMPONENT ID')}\\n`;\n    outputString += formatCompileResults(this.componentsStatus, compilerOptions.verbose);\n    outputString += '\\n';\n\n    outputString += this.getStatusLine(this.componentsStatus, compileTimeLength);\n\n    this.logger.clearStatusLine();\n\n    return {\n      data: outputString,\n      code: this.getExitCode(this.componentsStatus),\n    };\n  }\n\n  async json([components]: [string[]], compilerOptions: CompileOptions) {\n    compilerOptions.deleteDistDir = true;\n    // @ts-ignore\n    const compileResults = await this.compile.compileComponents(components, compilerOptions);\n    return {\n      data: compileResults,\n      // @todo: fix the code once compile is ready.\n      code: 0,\n    };\n  }\n\n  private failedComponents(componentsStatus: ComponentsStatus[]): ComponentsStatus[] {\n    return componentsStatus.filter((component) => component.errors.length);\n  }\n\n  private getSummaryIcon(componentsStatus: ComponentsStatus[]) {\n    switch (this.failedComponents(componentsStatus).length) {\n      case 0:\n        return chalk.green('✔');\n      case componentsStatus.length:\n        return chalk.red('✗');\n      default:\n        return chalk.yellow('⍻');\n    }\n  }\n\n  private getExitCode(componentsStatus: ComponentsStatus[]) {\n    return this.failedComponents(componentsStatus).length ? 1 : 0;\n  }\n\n  private getStatusLine(componentsStatus: ComponentsStatus[], compileTimeLength) {\n    const numberOfComponents = componentsStatus.length;\n    const numberOfFailingComponents = this.failedComponents(componentsStatus).length;\n    const numberOfSuccessfulComponents = componentsStatus.filter((component) => !component.errors.length).length;\n\n    const icon = this.getSummaryIcon(componentsStatus);\n    const summaryLine = numberOfFailingComponents\n      ? `${icon} ${numberOfFailingComponents}/${numberOfComponents} components failed to compile.`\n      : `${icon} ${numberOfSuccessfulComponents}/${numberOfComponents} components compiled successfully.`;\n\n    return `${summaryLine}\\nFinished. (${prettyTime(compileTimeLength)})`;\n  }\n\n  private onComponentCompilationDone(event: BitBaseEvent<any>) {\n    if (event.type === ComponentCompilationOnDoneEvent.TYPE) {\n      this.componentsStatus.push(event.data);\n    }\n  }\n}\n"]}