import { CLIMain } from '@teambit/cli';
import { EnvsMain } from '@teambit/envs';
import { LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { PubsubMain } from '@teambit/pubsub';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { Component } from '@teambit/component';
import { BitId } from '@teambit/legacy-bit-id';
import { BuilderMain } from '@teambit/builder';
import { UiMain } from '@teambit/ui';
import { CompilerTask } from './compiler.task';
import { Compiler } from './types';
import { CompileOptions, WorkspaceCompiler } from './workspace-compiler';
import { DistArtifact } from './dist-artifact';
export declare class CompilerMain {
    private pubsub;
    private workspaceCompiler;
    private envs;
    private builder;
    constructor(pubsub: PubsubMain, workspaceCompiler: WorkspaceCompiler, envs: EnvsMain, builder: BuilderMain);
    compileOnWorkspace(componentsIds?: string[] | BitId[], options?: CompileOptions): Promise<import("./workspace-compiler").BuildResult[]>;
    createTask(name: string, compiler: Compiler): CompilerTask;
    getDistPathBySrcPath(component: Component, srcPath: string): string | null;
    getDistsFiles(component: Component): Promise<DistArtifact>;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([cli, workspace, envs, loggerMain, pubsub, aspectLoader, builder, ui]: [
        CLIMain,
        Workspace,
        EnvsMain,
        LoggerMain,
        PubsubMain,
        AspectLoaderMain,
        BuilderMain,
        UiMain
    ]): Promise<CompilerMain>;
}
