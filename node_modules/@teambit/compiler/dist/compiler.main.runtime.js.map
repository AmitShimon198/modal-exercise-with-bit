{"version":3,"sources":["compiler.main.runtime.ts"],"names":["CompilerMain","constructor","pubsub","workspaceCompiler","envs","builder","compileOnWorkspace","componentsIds","options","compileComponents","createTask","name","compiler","CompilerTask","CompilerAspect","id","getDistPathBySrcPath","component","srcPath","environment","getEnv","env","compilerInstance","getCompiler","getDistsFiles","artifacts","getArtifactsVinylByExtension","length","DistArtifactNotFound","DistArtifact","provider","cli","workspace","loggerMain","aspectLoader","ui","WorkspaceCompiler","registerService","CompilerService","compilerMain","logger","createLogger","register","CompileCmd","ManyComponentsWriter","externalCompiler","bind","MainRuntime","CLIAspect","WorkspaceAspect","EnvsAspect","LoggerAspect","PubsubAspect","AspectLoaderAspect","BuilderAspect","UIAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,YAAN,CAAmB;AACxBC,EAAAA,WAAW,CACDC,MADC,EAEDC,iBAFC,EAGDC,IAHC,EAIDC,OAJC,EAKT;AAAA,SAJQH,MAIR,GAJQA,MAIR;AAAA,SAHQC,iBAGR,GAHQA,iBAGR;AAAA,SAFQC,IAER,GAFQA,IAER;AAAA,SADQC,OACR,GADQA,OACR;AAAE;;AAEJC,EAAAA,kBAAkB,CAChBC,aAAiC,GAAG,EADpB,EACwB;AACxCC,EAAAA,OAAuB,GAAG,EAFV,EAGhB;AACA,WAAO,KAAKL,iBAAL,CAAuBM,iBAAvB,CAAyCF,aAAzC,EAAwDC,OAAxD,CAAP;AACD;AACD;AACF;AACA;AACA;;;AACEE,EAAAA,UAAU,CAACC,IAAD,EAAeC,QAAf,EAAiD;AACzD,WAAO,KAAIC,yBAAJ,EAAiBC,4BAAeC,EAAhC,EAAoCJ,IAApC,EAA0CC,QAA1C,CAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,oBAAoB,CAACC,SAAD,EAAuBC,OAAvB,EAAuD;AAAA;;AACzE,UAAMC,WAAW,GAAG,KAAKf,IAAL,CAAUgB,MAAV,CAAiBH,SAAjB,EAA4BI,GAAhD;AACA,UAAMC,gBAAgB,4BAAGH,WAAW,CAACI,WAAf,0DAAG,2BAAAJ,WAAW,CAApC;AACA,QAAI,CAACG,gBAAL,EAAuB,OAAO,IAAP;AACvB,WAAOA,gBAAgB,CAACN,oBAAjB,CAAsCE,OAAtC,CAAP;AACD;;AAEkB,QAAbM,aAAa,CAACP,SAAD,EAA8C;AAC/D,UAAMQ,SAAS,GAAG,MAAM,KAAKpB,OAAL,CAAaqB,4BAAb,CAA0CT,SAA1C,EAAqDH,4BAAeC,EAApE,CAAxB;AACA,QAAI,CAACU,SAAS,CAACE,MAAf,EAAuB,MAAM,KAAIC,kCAAJ,EAAyBX,SAAS,CAACF,EAAnC,CAAN;AAEvB,WAAO,KAAIc,4BAAJ,EAAiBJ,SAAjB,CAAP;AACD;;AAeoB,eAARK,QAAQ,CAAC,CAACC,GAAD,EAAMC,SAAN,EAAiB5B,IAAjB,EAAuB6B,UAAvB,EAAmC/B,MAAnC,EAA2CgC,YAA3C,EAAyD7B,OAAzD,EAAkE8B,EAAlE,CAAD,EASlB;AACD,UAAMhC,iBAAiB,GAAG,KAAIiC,sCAAJ,EAAsBJ,SAAtB,EAAiC5B,IAAjC,EAAuCF,MAAvC,EAA+CgC,YAA/C,EAA6DC,EAA7D,CAA1B;AACA/B,IAAAA,IAAI,CAACiC,eAAL,CAAqB,KAAIC,2BAAJ,GAArB;AACA,UAAMC,YAAY,GAAG,IAAIvC,YAAJ,CAAiBE,MAAjB,EAAyBC,iBAAzB,EAA4CC,IAA5C,EAAkDC,OAAlD,CAArB;AACA,UAAMmC,MAAM,GAAGP,UAAU,CAACQ,YAAX,CAAwB3B,4BAAeC,EAAvC,CAAf;AACAgB,IAAAA,GAAG,CAACW,QAAJ,CAAa,KAAIC,uBAAJ,EAAexC,iBAAf,EAAkCqC,MAAlC,EAA0CtC,MAA1C,CAAb;AAEA0C,oCAAqBC,gBAArB,GAAwCN,YAAY,CAACjC,kBAAb,CAAgCwC,IAAhC,CAAqCP,YAArC,CAAxC;AAEA,WAAOA,YAAP;AACD;;AAvEuB;;;gCAAbvC,Y,aAuCM+C,kB;gCAvCN/C,Y,kBAyCW,CACpBgD,gBADoB,EAEpBC,4BAFoB,EAGpBC,kBAHoB,EAIpBC,sBAJoB,EAKpBC,sBALoB,EAMpBC,uBANoB,EAOpBC,wBAPoB,EAQpBC,aARoB,C;;AAiCxBzC,4BAAe0C,UAAf,CAA0BxD,YAA1B","sourcesContent":["import { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { PubsubAspect, PubsubMain } from '@teambit/pubsub';\nimport AspectLoaderAspect, { AspectLoaderMain } from '@teambit/aspect-loader';\nimport { Component } from '@teambit/component';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport UIAspect, { UiMain } from '@teambit/ui';\n\nimport ManyComponentsWriter from '@teambit/legacy/dist/consumer/component-ops/many-components-writer';\nimport { CompilerService } from './compiler.service';\nimport { CompilerAspect } from './compiler.aspect';\nimport { CompileCmd } from './compiler.cmd';\nimport { CompilerTask } from './compiler.task';\nimport { Compiler } from './types';\nimport { CompileOptions, WorkspaceCompiler } from './workspace-compiler';\nimport { DistArtifact } from './dist-artifact';\nimport { DistArtifactNotFound } from './exceptions';\n\nexport class CompilerMain {\n  constructor(\n    private pubsub: PubsubMain,\n    private workspaceCompiler: WorkspaceCompiler,\n    private envs: EnvsMain,\n    private builder: BuilderMain\n  ) {}\n\n  compileOnWorkspace(\n    componentsIds: string[] | BitId[] = [], // when empty, it compiles all\n    options: CompileOptions = {}\n  ) {\n    return this.workspaceCompiler.compileComponents(componentsIds, options);\n  }\n  /**\n   * API to create a new compiler task, it facilitates the usage of multiple compilers.\n   * with this method you can create any number of compilers and add them to the buildPipeline.\n   */\n  createTask(name: string, compiler: Compiler): CompilerTask {\n    return new CompilerTask(CompilerAspect.id, name, compiler);\n  }\n\n  /**\n   * find the compiler configured on the workspace and ask for the dist path.\n   */\n  getDistPathBySrcPath(component: Component, srcPath: string): string | null {\n    const environment = this.envs.getEnv(component).env;\n    const compilerInstance = environment.getCompiler?.();\n    if (!compilerInstance) return null;\n    return compilerInstance.getDistPathBySrcPath(srcPath);\n  }\n\n  async getDistsFiles(component: Component): Promise<DistArtifact> {\n    const artifacts = await this.builder.getArtifactsVinylByExtension(component, CompilerAspect.id);\n    if (!artifacts.length) throw new DistArtifactNotFound(component.id);\n\n    return new DistArtifact(artifacts);\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [\n    CLIAspect,\n    WorkspaceAspect,\n    EnvsAspect,\n    LoggerAspect,\n    PubsubAspect,\n    AspectLoaderAspect,\n    BuilderAspect,\n    UIAspect,\n  ];\n\n  static async provider([cli, workspace, envs, loggerMain, pubsub, aspectLoader, builder, ui]: [\n    CLIMain,\n    Workspace,\n    EnvsMain,\n    LoggerMain,\n    PubsubMain,\n    AspectLoaderMain,\n    BuilderMain,\n    UiMain\n  ]) {\n    const workspaceCompiler = new WorkspaceCompiler(workspace, envs, pubsub, aspectLoader, ui);\n    envs.registerService(new CompilerService());\n    const compilerMain = new CompilerMain(pubsub, workspaceCompiler, envs, builder);\n    const logger = loggerMain.createLogger(CompilerAspect.id);\n    cli.register(new CompileCmd(workspaceCompiler, logger, pubsub));\n\n    ManyComponentsWriter.externalCompiler = compilerMain.compileOnWorkspace.bind(compilerMain);\n\n    return compilerMain;\n  }\n}\n\nCompilerAspect.addRuntime(CompilerMain);\n"]}