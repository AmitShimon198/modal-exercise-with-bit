import { BuildContext, BuildTask, BuiltTaskResult, TaskResultsList } from '@teambit/builder';
import ConsumerComponent from '@teambit/legacy/dist/consumer/component';
export declare type TranspileFileParams = {
    componentDir: string;
    filePath: string;
};
export declare type TranspileComponentParams = {
    component: ConsumerComponent;
    componentDir: string;
    outputDir: string;
};
export declare type TranspileFileOutput = {
    outputText: string;
    outputPath: string;
}[] | null;
export interface CompilerOptions {
    name?: string;
    distDir: string;
    distGlobPatterns?: string[];
    shouldCopyNonSupportedFiles?: boolean;
    artifactName?: string;
}
export interface Compiler extends CompilerOptions {
    id: string;
    displayConfig?(): string;
    transpileFile?: (fileContent: string, params: TranspileFileParams) => TranspileFileOutput;
    transpileComponent?: (params: TranspileComponentParams) => Promise<void>;
    build(context: BuildContext): Promise<BuiltTaskResult>;
    getDistPathBySrcPath(srcPath: string): string;
    isFileSupported(filePath: string): boolean;
    createTask?(name?: string): BuildTask;
    preBuild?(context: BuildContext): Promise<void>;
    postBuild?(context: BuildContext, tasksResults: TaskResultsList): Promise<void>;
    version(): string;
    displayName: string;
}
