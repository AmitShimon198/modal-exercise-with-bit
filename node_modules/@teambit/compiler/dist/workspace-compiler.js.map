{"version":3,"sources":["workspace-compiler.ts"],"names":["ComponentCompiler","constructor","pubsub","workspace","component","compilerInstance","compilerId","dists","compileErrors","compile","noThrow","options","dataToPersist","deleteDistDir","DataToPersist","removePath","RemovePath","distDir","addBasePath","path","persistAllToFS","transpileFile","Promise","all","files","map","file","compileOneFileWithNewCompiler","transpileComponent","compileAllFilesWithNewCompiler","Error","toString","throwOnCompileErrors","addManyFiles","buildResults","distFile","compiler","loader","succeed","pub","CompilerAspect","id","ComponentCompilationOnDoneEvent","length","forEach","errorItem","logger","error","formatError","err","join","CompilerErrorEvent","console","message","packageName","packageDir","distDirName","DEFAULT_DIST_DIRNAME","componentDir","ComponentID","filePath","relative","isFileSupported","compileResults","contents","push","base","result","Dist","outputPath","Buffer","from","outputText","shouldCopyNonSupportedFiles","filesToCompile","outputDir","getComponentPackagePath","WorkspaceCompiler","envs","aspectLoader","ui","registerOnComponentChange","onComponentChange","bind","registerOnComponentAdd","registerPreStart","onPreStart","registerOnAspectLoadErrorSlot","onAspectLoadFail","preStartOpts","skipCompilation","compileComponents","changed","verbose","code","results","componentsIds","ConsumerNotFound","isLegacy","componentIds","getIdsToCompile","components","getMany","componentsAndNewCompilers","c","environment","getEnv","env","getCompiler","state","_consumer","componentMap","getComponentDir","compilerName","name","newCompilersResultOnWorkspace","componentAndNewCompilers","resolveMultipleComponentIds","getNewAndModifiedIds","getAllComponentIds"],"mappings":";;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAIA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAtBA;AAwCO,MAAMA,iBAAN,CAAwB;AAC7BC,EAAAA,WAAW,CACDC,MADC,EAEDC,SAFC,EAGDC,SAHC,EAIDC,gBAJC,EAKDC,UALC,EAMDC,KAAa,GAAG,EANf,EAODC,aAA6B,GAAG,EAP/B,EAQT;AAAA,SAPQN,MAOR,GAPQA,MAOR;AAAA,SANQC,SAMR,GANQA,SAMR;AAAA,SALQC,SAKR,GALQA,SAKR;AAAA,SAJQC,gBAIR,GAJQA,gBAIR;AAAA,SAHQC,UAGR,GAHQA,UAGR;AAAA,SAFQC,KAER,GAFQA,KAER;AAAA,SADQC,aACR,GADQA,aACR;AAAE;;AAES,QAAPC,OAAO,CAACC,OAAO,GAAG,IAAX,EAAiBC,OAAjB,EAAgE;AAC3E,QAAIC,aAAJ,CAD2E,CAE3E;;AACA,QAAID,OAAO,CAACE,aAAZ,EAA2B;AACzBD,MAAAA,aAAa,GAAG,KAAIE,wBAAJ,GAAhB;AACAF,MAAAA,aAAa,CAACG,UAAd,CAAyB,KAAIC,qBAAJ,EAAe,KAAKC,OAApB,CAAzB;AACAL,MAAAA,aAAa,CAACM,WAAd,CAA0B,KAAKf,SAAL,CAAegB,IAAzC;AACA,YAAMP,aAAa,CAACQ,cAAd,EAAN;AACD;;AAED,QAAI,KAAKf,gBAAL,CAAsBgB,aAA1B,EAAyC;AACvC,YAAMC,OAAO,CAACC,GAAR,CAAY,KAAKnB,SAAL,CAAeoB,KAAf,CAAqBC,GAArB,CAA0BC,IAAD,IAAsB,KAAKC,6BAAL,CAAmCD,IAAnC,CAA/C,CAAZ,CAAN;AACD,KAFD,MAEO,IAAI,KAAKrB,gBAAL,CAAsBuB,kBAA1B,EAA8C;AACnD,YAAM,KAAKC,8BAAL,CAAoC,KAAKzB,SAAzC,CAAN;AACD,KAFM,MAEA;AACL,YAAM,IAAI0B,KAAJ,CACH,YAAW,KAAKxB,UAAL,CAAgByB,QAAhB,EAA2B,2EADnC,CAAN;AAGD;;AACD,SAAKC,oBAAL,CAA0BtB,OAA1B,EAnB2E,CAqB3E;AACA;;AACAE,IAAAA,aAAa,GAAG,KAAIE,wBAAJ,GAAhB;AACAF,IAAAA,aAAa,CAACqB,YAAd,CAA2B,KAAK1B,KAAhC;AACAK,IAAAA,aAAa,CAACM,WAAd,CAA0B,KAAKf,SAAL,CAAegB,IAAzC;AACA,UAAMP,aAAa,CAACQ,cAAd,EAAN;AACA,UAAMc,YAAY,GAAG,KAAK3B,KAAL,CAAWkB,GAAX,CAAgBU,QAAD,IAAcA,QAAQ,CAAChB,IAAtC,CAArB;AACA,QAAI,KAAKf,SAAL,CAAegC,QAAnB,EAA6BC,kBAAOC,OAAP;AAC7B,SAAKpC,MAAL,CAAYqC,GAAZ,CACEC,2BAAeC,EADjB,EAEE,KAAIC,yCAAJ,EAAoC,KAAKlC,aAAzC,EAAwD,KAAKJ,SAA7D,EAAwE8B,YAAxE,CAFF;AAIA,WAAO;AAAE9B,MAAAA,SAAS,EAAE,KAAKA,SAAL,CAAeqC,EAAf,CAAkBV,QAAlB,EAAb;AAA2CG,MAAAA;AAA3C,KAAP;AACD;;AAEOF,EAAAA,oBAAoB,CAACtB,OAAO,GAAG,IAAX,EAAiB;AAC3C,QAAI,KAAKF,aAAL,CAAmBmC,MAAvB,EAA+B;AAC7B,WAAKnC,aAAL,CAAmBoC,OAAnB,CAA4BC,SAAD,IAAe;AACxCC,0BAAOC,KAAP,CAAc,wBAAuBF,SAAS,CAAC1B,IAAK,EAApD,EAAuD0B,SAAS,CAACE,KAAjE;AACD,OAFD;;AAGA,YAAMC,WAAW,GAAIH,SAAD,IAAgB,GAAEA,SAAS,CAAC1B,IAAK,KAAI0B,SAAS,CAACE,KAAM,EAAzE;;AACA,YAAME,GAAG,GAAG,IAAInB,KAAJ,CAAW;AAC7B,EAAE,KAAKtB,aAAL,CAAmBiB,GAAnB,CAAuBuB,WAAvB,EAAoCE,IAApC,CAAyC,IAAzC,CAA+C,EAD/B,CAAZ;AAGA,WAAKhD,MAAL,CAAYqC,GAAZ,CAAgBC,2BAAeC,EAA/B,EAAmC,KAAIU,4BAAJ,EAAuBF,GAAvB,CAAnC;;AAEA,UAAI,CAACvC,OAAL,EAAc;AACZ,cAAMuC,GAAN;AACD;;AAEDH,wBAAOM,OAAP,CAAeH,GAAG,CAACI,OAAnB;AACD;AACF;;AAEkB,MAAPpC,OAAO,GAAwB;AACzC,UAAMqC,WAAW,GAAG,yCAAyB,KAAKlD,SAA9B,CAApB;;AACA,UAAMmD,UAAU,GAAGpC,gBAAK+B,IAAL,CAAU,cAAV,EAA0BI,WAA1B,CAAnB;;AACA,UAAME,WAAW,GAAGC,iCAApB;;AACA,WAAOtC,gBAAK+B,IAAL,CAAUK,UAAV,EAAsBC,WAAtB,CAAP;AACD;;AAEuB,MAAZE,YAAY,GAAwB;AAC9C,WAAO,KAAKvD,SAAL,CAAeuD,YAAf,CAA4B,KAAIC,wBAAJ,EAAgB,KAAKvD,SAAL,CAAeqC,EAA/B,CAA5B,CAAP;AACD;;AAE0C,QAA7Bd,6BAA6B,CAACD,IAAD,EAAkC;AAC3E,UAAMf,OAAO,GAAG;AAAE+C,MAAAA,YAAY,EAAE,KAAKA,YAArB;AAAmCE,MAAAA,QAAQ,EAAElC,IAAI,CAACmC;AAAlD,KAAhB;AACA,UAAMC,eAAe,GAAG,KAAKzD,gBAAL,CAAsByD,eAAtB,CAAsCpC,IAAI,CAACP,IAA3C,CAAxB;AACA,QAAI4C,cAAJ;;AACA,QAAID,eAAJ,EAAqB;AACnB,UAAI;AAAA;;AACFC,QAAAA,cAAc,4BAAG,+BAAK1D,gBAAL,EAAsBgB,aAAzB,0DAAG,mDAAsCK,IAAI,CAACsC,QAAL,CAAcjC,QAAd,EAAtC,EAAgEpB,OAAhE,CAAjB;AACD,OAFD,CAEE,OAAOoC,KAAP,EAAmB;AACnB,aAAKvC,aAAL,CAAmByD,IAAnB,CAAwB;AAAE9C,UAAAA,IAAI,EAAEO,IAAI,CAACP,IAAb;AAAmB4B,UAAAA;AAAnB,SAAxB;AACA;AACD;AACF;;AACD,UAAMmB,IAAI,GAAG,KAAKjD,OAAlB;;AACA,QAAI6C,eAAe,IAAIC,cAAvB,EAAuC;AACrC,WAAKxD,KAAL,CAAW0D,IAAX,CACE,GAAGF,cAAc,CAACtC,GAAf,CACA0C,MAAD,IACE,KAAIC,eAAJ,EAAS;AACPF,QAAAA,IADO;AAEP/C,QAAAA,IAAI,EAAEA,gBAAK+B,IAAL,CAAUgB,IAAV,EAAgBC,MAAM,CAACE,UAAvB,CAFC;AAGPL,QAAAA,QAAQ,EAAEM,MAAM,CAACC,IAAP,CAAYJ,MAAM,CAACK,UAAnB;AAHH,OAAT,CAFD,CADL;AAUD,KAXD,MAWO,IAAI,KAAKnE,gBAAL,CAAsBoE,2BAA1B,EAAuD;AAC5D;AACA,WAAKlE,KAAL,CAAW0D,IAAX,CAAgB,KAAIG,eAAJ,EAAS;AAAEF,QAAAA,IAAF;AAAQ/C,QAAAA,IAAI,EAAEA,gBAAK+B,IAAL,CAAUgB,IAAV,EAAgBxC,IAAI,CAACmC,QAArB,CAAd;AAA8CG,QAAAA,QAAQ,EAAEtC,IAAI,CAACsC;AAA7D,OAAT,CAAhB;AACD;AACF;;AAE2C,QAA9BnC,8BAA8B,CAACzB,SAAD,EAA8C;AACxF,UAAM8D,IAAI,GAAG,KAAKjD,OAAlB;AACA,UAAMyD,cAA4B,GAAG,EAArC;AACAtE,IAAAA,SAAS,CAACoB,KAAV,CAAgBoB,OAAhB,CAAyBlB,IAAD,IAAsB;AAC5C,YAAMoC,eAAe,GAAG,KAAKzD,gBAAL,CAAsByD,eAAtB,CAAsCpC,IAAI,CAACP,IAA3C,CAAxB;;AACA,UAAI2C,eAAJ,EAAqB;AACnBY,QAAAA,cAAc,CAACT,IAAf,CAAoBvC,IAApB;AACD,OAFD,MAEO,IAAI,KAAKrB,gBAAL,CAAsBoE,2BAA1B,EAAuD;AAC5D;AACA,aAAKlE,KAAL,CAAW0D,IAAX,CACE,KAAIG,eAAJ,EAAS;AACPF,UAAAA,IADO;AAEP/C,UAAAA,IAAI,EAAEA,gBAAK+B,IAAL,CAAUgB,IAAV,EAAgBxC,IAAI,CAACmC,QAArB,CAFC;AAGPG,UAAAA,QAAQ,EAAEtC,IAAI,CAACsC;AAHR,SAAT,CADF;AAOD;AACF,KAdD;;AAgBA,QAAIU,cAAc,CAAC/B,MAAnB,EAA2B;AACzB,UAAI;AAAA;;AACF,yCAAM,+BAAKtC,gBAAL,EAAsBuB,kBAA5B,2DAAM,oDAA2C;AAC/CxB,UAAAA,SAD+C;AAE/CsD,UAAAA,YAAY,EAAE,KAAKA,YAF4B;AAG/CiB,UAAAA,SAAS,EAAE,KAAKxE,SAAL,CAAeyE,uBAAf,CAAuCxE,SAAvC;AAHoC,SAA3C,CAAN;AAKD,OAND,CAME,OAAO2C,KAAP,EAAmB;AACnB,aAAKvC,aAAL,CAAmByD,IAAnB,CAAwB;AAAE9C,UAAAA,IAAI,EAAE,KAAKuC,YAAb;AAA2BX,UAAAA;AAA3B,SAAxB;AACD;AACF;AACF;;AAzI4B;;;;AA4IxB,MAAM8B,iBAAN,CAAwB;AAC7B5E,EAAAA,WAAW,CACDE,SADC,EAED2E,IAFC,EAGD5E,MAHC,EAID6E,YAJC,EAKDC,EALC,EAMT;AAAA,SALQ7E,SAKR,GALQA,SAKR;AAAA,SAJQ2E,IAIR,GAJQA,IAIR;AAAA,SAHQ5E,MAGR,GAHQA,MAGR;AAAA,SAFQ6E,YAER,GAFQA,YAER;AAAA,SADQC,EACR,GADQA,EACR;;AACA,QAAI,KAAK7E,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAe8E,yBAAf,CAAyC,KAAKC,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAzC;AACA,WAAKhF,SAAL,CAAeiF,sBAAf,CAAsC,KAAKF,iBAAL,CAAuBC,IAAvB,CAA4B,IAA5B,CAAtC;AACA,WAAKH,EAAL,CAAQK,gBAAR,CAAyB,KAAKC,UAAL,CAAgBH,IAAhB,CAAqB,IAArB,CAAzB;AACD;;AACD,QAAI,KAAKJ,YAAT,EAAuB;AACrB,WAAKA,YAAL,CAAkBQ,6BAAlB,CAAgD,KAAKC,gBAAL,CAAsBL,IAAtB,CAA2B,IAA3B,CAAhD;AACD;AACF;;AAEe,QAAVG,UAAU,CAACG,YAAD,EAA4C;AAC1D,QAAIA,YAAY,CAACC,eAAjB,EAAkC;AAChC;AACD;;AACD,UAAM,KAAKC,iBAAL,CAAuB,EAAvB,EAA2B;AAAEC,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,OAAO,EAAE,KAA1B;AAAiChF,MAAAA,aAAa,EAAE;AAAhD,KAA3B,CAAN;AACD;;AAEqB,QAAhB2E,gBAAgB,CAACvC,GAAD,EAAiCR,EAAjC,EAAoE;AACxF,QAAIQ,GAAG,CAAC6C,IAAJ,IAAY7C,GAAG,CAAC6C,IAAJ,KAAa,kBAAzB,IAA+C,KAAK3F,SAAxD,EAAmE;AACjE,YAAM,KAAKwF,iBAAL,CAAuB,CAAClD,EAAE,CAACV,QAAH,EAAD,CAAvB,EAAwC,EAAxC,EAA4C,IAA5C,CAAN;AACA,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD;;AAEsB,QAAjBmD,iBAAiB,CAAC9E,SAAD,EAAqD;AAC1E,UAAM8B,YAAY,GAAG,MAAM,KAAKyD,iBAAL,CAAuB,CAACvF,SAAS,CAACqC,EAAV,CAAaV,QAAb,EAAD,CAAvB,EAAkD,EAAlD,EAAsD,IAAtD,CAA3B;AACA,WAAO;AACLgE,MAAAA,OAAO,EAAE7D,YADJ;;AAELH,MAAAA,QAAQ,GAAG;AAAA;;AACT,eAAQ,GAAD,kBAAGG,YAAY,CAAC,CAAD,CAAf,4EAAG,eAAiBA,YAApB,0DAAG,sBAA+BgB,IAA/B,CAAoC,MAApC,CAA4C,EAAtD;AACD;;AAJI,KAAP;AAMD;;AAEsB,QAAjByC,iBAAiB,CACrBK,aADqB,EACc;AACnCrF,EAAAA,OAFqB,EAGrBD,OAHqB,EAIG;AACxB,QAAI,CAAC,KAAKP,SAAV,EAAqB,MAAM,KAAI8F,8BAAJ,GAAN;AACrB,QAAI,KAAK9F,SAAL,CAAe+F,QAAnB,EAA6B,MAAM,IAAIpE,KAAJ,CAAU,2DAAV,CAAN;AAC7B,UAAMqE,YAAY,GAAG,MAAM,KAAKC,eAAL,CAAqBJ,aAArB,EAAoCrF,OAAO,CAACiF,OAA5C,CAA3B;AACA,UAAMS,UAAU,GAAG,MAAM,KAAKlG,SAAL,CAAemG,OAAf,CAAuBH,YAAvB,CAAzB;AAEA,UAAMI,yBAA8C,GAAG,EAAvD;AACAF,IAAAA,UAAU,CAACzD,OAAX,CAAoB4D,CAAD,IAAO;AAAA;;AACxB,YAAMC,WAAW,GAAG,KAAK3B,IAAL,CAAU4B,MAAV,CAAiBF,CAAjB,EAAoBG,GAAxC;AACA,YAAMtG,gBAAgB,4BAAGoG,WAAW,CAACG,WAAf,0DAAG,2BAAAH,WAAW,CAApC,CAFwB,CAGxB;AACA;;AACA,UAAIpG,gBAAgB,6BAAImG,CAAC,CAACK,KAAF,CAAQC,SAAR,CAAkBC,YAAtB,kDAAI,sBAAgCC,eAAhC,EAAxB,EAA2E;AACzE,cAAMC,YAAY,GAAG5G,gBAAgB,CAACJ,WAAjB,CAA6BiH,IAA7B,IAAqC,UAA1D;AACAX,QAAAA,yBAAyB,CAACtC,IAA1B,CACE,IAAIjE,iBAAJ,CAAsB,KAAKE,MAA3B,EAAmC,KAAKC,SAAxC,EAAmDqG,CAAC,CAACK,KAAF,CAAQC,SAA3D,EAAsEzG,gBAAtE,EAAwF4G,YAAxF,CADF;AAGD;AACF,KAXD;AAYA,UAAME,6BAA6B,GAAG,MAAM,2BAAUZ,yBAAV,EAAsCa,wBAAD,IAC/EA,wBAAwB,CAAC3G,OAAzB,CAAiCC,OAAjC,EAA0CC,OAA1C,CAD0C,CAA5C;AAIA,WAAOwG,6BAAP;AACD;;AAE4B,QAAff,eAAe,CAACJ,aAAD,EAAuCJ,OAAO,GAAG,KAAjD,EAAgF;AAC3G,QAAII,aAAa,CAACrD,MAAlB,EAA0B;AACxB,aAAO,KAAKxC,SAAL,CAAekH,2BAAf,CAA2CrB,aAA3C,CAAP;AACD;;AACD,QAAIJ,OAAJ,EAAa;AACX,aAAO,KAAKzF,SAAL,CAAemH,oBAAf,EAAP;AACD;;AACD,WAAO,KAAKnH,SAAL,CAAeoH,kBAAf,EAAP;AACD;;AAjF4B","sourcesContent":["/* eslint-disable max-classes-per-file */\nimport mapSeries from 'p-map-series';\nimport { Component, ComponentID } from '@teambit/component';\nimport { EnvsMain } from '@teambit/envs';\nimport type { PubsubMain } from '@teambit/pubsub';\nimport { SerializableResults, Workspace } from '@teambit/workspace';\nimport path from 'path';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport loader from '@teambit/legacy/dist/cli/loader';\nimport { DEFAULT_DIST_DIRNAME } from '@teambit/legacy/dist/constants';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { Dist, SourceFile } from '@teambit/legacy/dist/consumer/component/sources';\nimport DataToPersist from '@teambit/legacy/dist/consumer/component/sources/data-to-persist';\nimport { AspectLoaderMain } from '@teambit/aspect-loader';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport logger from '@teambit/legacy/dist/logger/logger';\nimport componentIdToPackageName from '@teambit/legacy/dist/utils/bit/component-id-to-package-name';\nimport RemovePath from '@teambit/legacy/dist/consumer/component/sources/remove-path';\nimport { UiMain } from '@teambit/ui';\nimport type { PreStartOpts } from '@teambit/ui';\nimport { PathOsBasedAbsolute, PathOsBasedRelative } from '@teambit/legacy/dist/utils/path';\nimport { CompilerAspect } from './compiler.aspect';\nimport { CompilerErrorEvent, ComponentCompilationOnDoneEvent } from './events';\nimport { Compiler } from './types';\n\nexport type BuildResult = { component: string; buildResults: string[] | null | undefined };\n\nexport type CompileOptions = {\n  changed?: boolean; // compile only new and modified components\n  verbose?: boolean; // show more data, such as, dist paths\n  /**\n   * whether the dist root dir should be deleted before writing new dists.\n   * defaults to true for `bit compile` and false everywhere else, such as `bit watch` and `bit\n   * start` to avoid webpack \"EINTR\" error.\n   */\n  deleteDistDir?: boolean;\n};\n\nexport type CompileError = { path: string; error: Error };\n\nexport class ComponentCompiler {\n  constructor(\n    private pubsub: PubsubMain,\n    private workspace: Workspace,\n    private component: ConsumerComponent,\n    private compilerInstance: Compiler,\n    private compilerId: string,\n    private dists: Dist[] = [],\n    private compileErrors: CompileError[] = []\n  ) {}\n\n  async compile(noThrow = true, options: CompileOptions): Promise<BuildResult> {\n    let dataToPersist;\n    // delete dist folder before transpilation (because some compilers (like ngPackagr) can generate files there during the compilation process)\n    if (options.deleteDistDir) {\n      dataToPersist = new DataToPersist();\n      dataToPersist.removePath(new RemovePath(this.distDir));\n      dataToPersist.addBasePath(this.workspace.path);\n      await dataToPersist.persistAllToFS();\n    }\n\n    if (this.compilerInstance.transpileFile) {\n      await Promise.all(this.component.files.map((file: SourceFile) => this.compileOneFileWithNewCompiler(file)));\n    } else if (this.compilerInstance.transpileComponent) {\n      await this.compileAllFilesWithNewCompiler(this.component);\n    } else {\n      throw new Error(\n        `compiler ${this.compilerId.toString()} doesn't implement either \"transpileFile\" or \"transpileComponent\" methods`\n      );\n    }\n    this.throwOnCompileErrors(noThrow);\n\n    // writing the dists with `component.setDists(dists); component.dists.writeDists` is tricky\n    // as it uses other base-paths and doesn't respect the new node-modules base path.\n    dataToPersist = new DataToPersist();\n    dataToPersist.addManyFiles(this.dists);\n    dataToPersist.addBasePath(this.workspace.path);\n    await dataToPersist.persistAllToFS();\n    const buildResults = this.dists.map((distFile) => distFile.path);\n    if (this.component.compiler) loader.succeed();\n    this.pubsub.pub(\n      CompilerAspect.id,\n      new ComponentCompilationOnDoneEvent(this.compileErrors, this.component, buildResults)\n    );\n    return { component: this.component.id.toString(), buildResults };\n  }\n\n  private throwOnCompileErrors(noThrow = true) {\n    if (this.compileErrors.length) {\n      this.compileErrors.forEach((errorItem) => {\n        logger.error(`compilation error at ${errorItem.path}`, errorItem.error);\n      });\n      const formatError = (errorItem) => `${errorItem.path}\\n${errorItem.error}`;\n      const err = new Error(`compilation failed. see the following errors from the compiler\n${this.compileErrors.map(formatError).join('\\n')}`);\n\n      this.pubsub.pub(CompilerAspect.id, new CompilerErrorEvent(err));\n\n      if (!noThrow) {\n        throw err;\n      }\n\n      logger.console(err.message);\n    }\n  }\n\n  private get distDir(): PathOsBasedRelative {\n    const packageName = componentIdToPackageName(this.component);\n    const packageDir = path.join('node_modules', packageName);\n    const distDirName = DEFAULT_DIST_DIRNAME;\n    return path.join(packageDir, distDirName);\n  }\n\n  private get componentDir(): PathOsBasedAbsolute {\n    return this.workspace.componentDir(new ComponentID(this.component.id));\n  }\n\n  private async compileOneFileWithNewCompiler(file: SourceFile): Promise<void> {\n    const options = { componentDir: this.componentDir, filePath: file.relative };\n    const isFileSupported = this.compilerInstance.isFileSupported(file.path);\n    let compileResults;\n    if (isFileSupported) {\n      try {\n        compileResults = this.compilerInstance.transpileFile?.(file.contents.toString(), options);\n      } catch (error: any) {\n        this.compileErrors.push({ path: file.path, error });\n        return;\n      }\n    }\n    const base = this.distDir;\n    if (isFileSupported && compileResults) {\n      this.dists.push(\n        ...compileResults.map(\n          (result) =>\n            new Dist({\n              base,\n              path: path.join(base, result.outputPath),\n              contents: Buffer.from(result.outputText),\n            })\n        )\n      );\n    } else if (this.compilerInstance.shouldCopyNonSupportedFiles) {\n      // compiler doesn't support this file type. copy the file as is to the dist dir.\n      this.dists.push(new Dist({ base, path: path.join(base, file.relative), contents: file.contents }));\n    }\n  }\n\n  private async compileAllFilesWithNewCompiler(component: ConsumerComponent): Promise<void> {\n    const base = this.distDir;\n    const filesToCompile: SourceFile[] = [];\n    component.files.forEach((file: SourceFile) => {\n      const isFileSupported = this.compilerInstance.isFileSupported(file.path);\n      if (isFileSupported) {\n        filesToCompile.push(file);\n      } else if (this.compilerInstance.shouldCopyNonSupportedFiles) {\n        // compiler doesn't support this file type. copy the file as is to the dist dir.\n        this.dists.push(\n          new Dist({\n            base,\n            path: path.join(base, file.relative),\n            contents: file.contents,\n          })\n        );\n      }\n    });\n\n    if (filesToCompile.length) {\n      try {\n        await this.compilerInstance.transpileComponent?.({\n          component,\n          componentDir: this.componentDir,\n          outputDir: this.workspace.getComponentPackagePath(component),\n        });\n      } catch (error: any) {\n        this.compileErrors.push({ path: this.componentDir, error });\n      }\n    }\n  }\n}\n\nexport class WorkspaceCompiler {\n  constructor(\n    private workspace: Workspace,\n    private envs: EnvsMain,\n    private pubsub: PubsubMain,\n    private aspectLoader: AspectLoaderMain,\n    private ui: UiMain\n  ) {\n    if (this.workspace) {\n      this.workspace.registerOnComponentChange(this.onComponentChange.bind(this));\n      this.workspace.registerOnComponentAdd(this.onComponentChange.bind(this));\n      this.ui.registerPreStart(this.onPreStart.bind(this));\n    }\n    if (this.aspectLoader) {\n      this.aspectLoader.registerOnAspectLoadErrorSlot(this.onAspectLoadFail.bind(this));\n    }\n  }\n\n  async onPreStart(preStartOpts: PreStartOpts): Promise<void> {\n    if (preStartOpts.skipCompilation) {\n      return;\n    }\n    await this.compileComponents([], { changed: true, verbose: false, deleteDistDir: false });\n  }\n\n  async onAspectLoadFail(err: Error & { code?: string }, id: ComponentID): Promise<boolean> {\n    if (err.code && err.code === 'MODULE_NOT_FOUND' && this.workspace) {\n      await this.compileComponents([id.toString()], {}, true);\n      return true;\n    }\n    return false;\n  }\n\n  async onComponentChange(component: Component): Promise<SerializableResults> {\n    const buildResults = await this.compileComponents([component.id.toString()], {}, true);\n    return {\n      results: buildResults,\n      toString() {\n        return `${buildResults[0]?.buildResults?.join('\\n\\t')}`;\n      },\n    };\n  }\n\n  async compileComponents(\n    componentsIds: string[] | BitId[], // when empty, it compiles new+modified (unless options.all is set),\n    options: CompileOptions,\n    noThrow?: boolean\n  ): Promise<BuildResult[]> {\n    if (!this.workspace) throw new ConsumerNotFound();\n    if (this.workspace.isLegacy) throw new Error('workspace-compiler should work for Harmony workspace only');\n    const componentIds = await this.getIdsToCompile(componentsIds, options.changed);\n    const components = await this.workspace.getMany(componentIds);\n\n    const componentsAndNewCompilers: ComponentCompiler[] = [];\n    components.forEach((c) => {\n      const environment = this.envs.getEnv(c).env;\n      const compilerInstance = environment.getCompiler?.();\n      // if there is no componentDir (e.g. author that added files, not dir), then we can't write the dists\n      // inside the component dir.\n      if (compilerInstance && c.state._consumer.componentMap?.getComponentDir()) {\n        const compilerName = compilerInstance.constructor.name || 'compiler';\n        componentsAndNewCompilers.push(\n          new ComponentCompiler(this.pubsub, this.workspace, c.state._consumer, compilerInstance, compilerName)\n        );\n      }\n    });\n    const newCompilersResultOnWorkspace = await mapSeries(componentsAndNewCompilers, (componentAndNewCompilers) =>\n      componentAndNewCompilers.compile(noThrow, options)\n    );\n\n    return newCompilersResultOnWorkspace;\n  }\n\n  private async getIdsToCompile(componentsIds: Array<string | BitId>, changed = false): Promise<ComponentID[]> {\n    if (componentsIds.length) {\n      return this.workspace.resolveMultipleComponentIds(componentsIds);\n    }\n    if (changed) {\n      return this.workspace.getNewAndModifiedIds();\n    }\n    return this.workspace.getAllComponentIds();\n  }\n}\n"]}