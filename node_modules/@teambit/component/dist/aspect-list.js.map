{"version":3,"sources":["aspect-list.ts"],"names":["AspectList","constructor","entries","addEntry","aspectId","data","extensionDataEntry","ExtensionDataEntry","undefined","_legacy","entry","AspectEntry","push","ids","list","map","id","toString","get","find","legacy","stringId","ignoreVersion","aspectEntry","isEqual","predicate","pmap","entriesP","Promise","all","toConfigObject","res","forEach","config","serialize","serializedEntries","toLegacy","legacyEntries","ExtensionDataList","fromArray","stringIds","fromLegacyExtensions","legacyDataList","scope","newEntries","getAspectId","extensionId","name","ComponentID","fromString","fromLegacy","Error"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AACA;AACA;AACO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW,CAAUC,OAAV,EAAkC;AAAA,SAAxBA,OAAwB,GAAxBA,OAAwB;AAAE;;AAE/CC,EAAAA,QAAQ,CAACC,QAAD,EAAwBC,IAAqB,GAAG,EAAhD,EAAoD;AAC1D,UAAMC,kBAAkB,GAAG,KAAIC,mCAAJ,EAAuBC,SAAvB,EAAkCJ,QAAQ,CAACK,OAA3C,EAAoDD,SAApD,EAA+D,EAA/D,EAAmEH,IAAnE,CAA3B;AACA,UAAMK,KAAK,GAAG,KAAIC,0BAAJ,EAAgBP,QAAhB,EAA0BE,kBAA1B,CAAd;AACA,SAAKJ,OAAL,CAAaU,IAAb,CAAkBF,KAAlB;AACA,WAAOA,KAAP;AACD;AAED;AACF;AACA;;;AACS,MAAHG,GAAG,GAAa;AAClB,UAAMC,IAAI,GAAG,KAAKZ,OAAL,CAAaa,GAAb,CAAkBL,KAAD,IAAWA,KAAK,CAACM,EAAN,CAASC,QAAT,EAA5B,CAAb;AACA,WAAOH,IAAP;AACD;AAED;AACF;AACA;;;AACEI,EAAAA,GAAG,CAACF,EAAD,EAAsC;AACvC,WAAO,KAAKd,OAAL,CAAaiB,IAAb,CAAmBT,KAAD,IAAW;AAClC,aAAOA,KAAK,CAACU,MAAN,CAAaC,QAAb,KAA0BL,EAAjC;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;;;AACEG,EAAAA,IAAI,CAACH,EAAD,EAAkBM,aAAa,GAAG,KAAlC,EAAkE;AACpE,WAAO,KAAKpB,OAAL,CAAaiB,IAAb,CAAmBI,WAAD,IAAiB;AACxC,aAAOP,EAAE,CAACQ,OAAH,CAAWD,WAAW,CAACP,EAAvB,EAA2B;AAAEM,QAAAA;AAAF,OAA3B,CAAP;AACD,KAFM,CAAP;AAGD;AAED;AACF;AACA;;;AACEP,EAAAA,GAAG,CAACU,SAAD,EAAiD;AAClD,UAAMvB,OAAO,GAAG,KAAKA,OAAL,CAAaa,GAAb,CAAiBU,SAAjB,CAAhB;AACA,WAAO,IAAIzB,UAAJ,CAAeE,OAAf,CAAP;AACD;AAED;AACF;AACA;;;AACY,QAAJwB,IAAI,CAACD,SAAD,EAA0D;AAClE,UAAME,QAAQ,GAAG,KAAKzB,OAAL,CAAaa,GAAb,CAAiBU,SAAjB,CAAjB;AACA,UAAMvB,OAAO,GAAG,MAAM0B,OAAO,CAACC,GAAR,CAAYF,QAAZ,CAAtB;AACA,WAAO,IAAI3B,UAAJ,CAAeE,OAAf,CAAP;AACD;;AAED4B,EAAAA,cAAc,GAAG;AACf,UAAMC,GAAG,GAAG,EAAZ;AACA,SAAK7B,OAAL,CAAa8B,OAAb,CAAsBtB,KAAD,IAAW;AAC9B,UAAIA,KAAK,CAACuB,MAAN,IAAgB,CAAC,uBAAQvB,KAAK,CAACuB,MAAd,CAArB,EAA4C;AAC1CF,QAAAA,GAAG,CAACrB,KAAK,CAACM,EAAN,CAASC,QAAT,EAAD,CAAH,GAA2BP,KAAK,CAACuB,MAAjC;AACD;AACF,KAJD;AAKA,WAAOF,GAAP;AACD;;AAEDG,EAAAA,SAAS,GAAG;AACV,UAAMC,iBAAiB,GAAG,KAAKjC,OAAL,CAAaa,GAAb,CAAkBL,KAAD,IAAWA,KAAK,CAACwB,SAAN,EAA5B,CAA1B;AACA,WAAOC,iBAAP;AACD;;AAEDC,EAAAA,QAAQ,GAAsB;AAC5B,UAAMC,aAAa,GAAG,KAAKnC,OAAL,CAAaa,GAAb,CAAkBL,KAAD,IAAWA,KAAK,CAACU,MAAlC,CAAtB;AACA,WAAOkB,mCAAkBC,SAAlB,CAA4BF,aAA5B,CAAP;AACD;;AAEDG,EAAAA,SAAS,GAAa;AACpB,UAAM3B,GAAG,GAAG,KAAKX,OAAL,CAAaa,GAAb,CAAkBL,KAAD,IAAWA,KAAK,CAACM,EAAN,CAASC,QAAT,EAA5B,CAAZ;AACA,WAAOJ,GAAP;AACD;;AAE0B,SAApB4B,oBAAoB,CAACC,cAAD,EAAoCC,KAApC,EAAgE;AACzF,UAAMC,UAAU,GAAGF,cAAc,CAAC3B,GAAf,CAAoBL,KAAD,IAAW;AAC/C,aAAO,KAAIC,0BAAJ,EAAgBkC,WAAW,CAACnC,KAAD,EAAQiC,KAAR,CAA3B,EAA2CjC,KAA3C,CAAP;AACD,KAFkB,CAAnB;AAIA,WAAO,IAAIV,UAAJ,CAAe4C,UAAf,CAAP;AACD;;AApFqB;;;;AAuFxB,SAASC,WAAT,CAAqBnC,KAArB,EAAgDiC,KAAhD,EAAgE;AAC9D,MAAI,CAACjC,KAAK,CAACoC,WAAP,IAAsBpC,KAAK,CAACqC,IAAhC,EAAsC,OAAOC,2BAAYC,UAAZ,CAAuBvC,KAAK,CAACqC,IAA7B,CAAP;AACtC,MAAIrC,KAAK,CAACoC,WAAV,EAAuB,OAAOE,2BAAYE,UAAZ,CAAuBxC,KAAK,CAACoC,WAA7B,EAA0CH,KAA1C,CAAP;AACvB,QAAM,IAAIQ,KAAJ,CAAU,+CAAV,CAAN;AACD","sourcesContent":["import { isEmpty } from 'lodash';\nimport { ExtensionDataList, ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { ComponentID } from '@teambit/component-id';\nimport { AspectEntry, SerializableMap } from './aspect-entry';\n\n/**\n * list of aspects, each may have data and artifacts saved per component.\n */\nexport class AspectList {\n  constructor(readonly entries: AspectEntry[]) {}\n\n  addEntry(aspectId: ComponentID, data: SerializableMap = {}) {\n    const extensionDataEntry = new ExtensionDataEntry(undefined, aspectId._legacy, undefined, {}, data);\n    const entry = new AspectEntry(aspectId, extensionDataEntry);\n    this.entries.push(entry);\n    return entry;\n  }\n\n  /**\n   * get all ids as strings from the aspect list.\n   */\n  get ids(): string[] {\n    const list = this.entries.map((entry) => entry.id.toString());\n    return list;\n  }\n\n  /**\n   * get an aspect from the list using a serialized ID.\n   */\n  get(id: string): AspectEntry | undefined {\n    return this.entries.find((entry) => {\n      return entry.legacy.stringId === id;\n    });\n  }\n\n  /**\n   * find aspect by component ID.\n   */\n  find(id: ComponentID, ignoreVersion = false): AspectEntry | undefined {\n    return this.entries.find((aspectEntry) => {\n      return id.isEqual(aspectEntry.id, { ignoreVersion });\n    });\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  map(predicate: (entry: AspectEntry) => AspectEntry) {\n    const entries = this.entries.map(predicate);\n    return new AspectList(entries);\n  }\n\n  /**\n   * transform an aspect list into a new one.\n   */\n  async pmap(predicate: (entry: AspectEntry) => Promise<AspectEntry>) {\n    const entriesP = this.entries.map(predicate);\n    const entries = await Promise.all(entriesP);\n    return new AspectList(entries);\n  }\n\n  toConfigObject() {\n    const res = {};\n    this.entries.forEach((entry) => {\n      if (entry.config && !isEmpty(entry.config)) {\n        res[entry.id.toString()] = entry.config;\n      }\n    });\n    return res;\n  }\n\n  serialize() {\n    const serializedEntries = this.entries.map((entry) => entry.serialize());\n    return serializedEntries;\n  }\n\n  toLegacy(): ExtensionDataList {\n    const legacyEntries = this.entries.map((entry) => entry.legacy);\n    return ExtensionDataList.fromArray(legacyEntries);\n  }\n\n  stringIds(): string[] {\n    const ids = this.entries.map((entry) => entry.id.toString());\n    return ids;\n  }\n\n  static fromLegacyExtensions(legacyDataList: ExtensionDataList, scope?: string): AspectList {\n    const newEntries = legacyDataList.map((entry) => {\n      return new AspectEntry(getAspectId(entry, scope), entry);\n    });\n\n    return new AspectList(newEntries);\n  }\n}\n\nfunction getAspectId(entry: ExtensionDataEntry, scope?: string) {\n  if (!entry.extensionId && entry.name) return ComponentID.fromString(entry.name);\n  if (entry.extensionId) return ComponentID.fromLegacy(entry.extensionId, scope);\n  throw new Error('aspect cannot be loaded without setting an ID');\n}\n"]}