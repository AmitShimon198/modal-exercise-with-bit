import { ComponentID } from '@teambit/component-id';
import { Component } from '../component';
export declare class ComponentMap<T> {
    readonly hashMap: Map<string, [Component, T]>;
    constructor(hashMap: Map<string, [Component, T]>);
    byComponent(component: Component): [Component, T] | undefined;
    get components(): Component[];
    get(component: Component): [Component, T] | undefined;
    getValueByComponentId(componentId: ComponentID): T | null;
    toArray(): [Component, T][];
    map<NewType>(predicate: (value: T, component: Component) => NewType): ComponentMap<NewType>;
    flattenValue(): T[];
    filter(predicate: (value: T) => boolean): ComponentMap<T>;
    keys(): IterableIterator<string>;
    static create<U>(rawMap: [Component, U][]): ComponentMap<U>;
    static as<U>(components: Component[], predicate: (component: Component) => U): ComponentMap<U>;
}
