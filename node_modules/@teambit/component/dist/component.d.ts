import { AnyFS } from '@teambit/any-fs';
import { SemVer } from 'semver';
import { ComponentID } from '@teambit/component-id';
import { BuildStatus } from '@teambit/legacy/dist/constants';
import { ComponentFactory } from './component-factory';
import ComponentFS from './component-fs';
import ComponentConfig from './config';
import { Snap } from './snap';
import { State } from './state';
import { TagMap } from './tag-map';
import { Tag } from './tag';
declare type SnapsIterableOpts = {
    firstParentOnly?: boolean;
    stopFn?: (snap: Snap) => Promise<boolean>;
};
export declare type InvalidComponent = {
    id: ComponentID;
    err: Error;
};
export declare class Component {
    readonly id: ComponentID;
    readonly head: Snap | null;
    private _state;
    readonly tags: TagMap;
    private factory;
    constructor(id: ComponentID, head: Snap | null, _state: State, tags: TagMap, factory: ComponentFactory);
    get state(): State;
    set state(state: State);
    get config(): ComponentConfig;
    get filesystem(): ComponentFS;
    get buildStatus(): BuildStatus;
    get headTag(): Tag | undefined;
    get latest(): string | undefined;
    stringify(): string;
    get displayName(): string;
    tag(version: SemVer): void;
    isModified(): Promise<boolean>;
    isOutdated(): boolean;
    isNew(): Promise<boolean>;
    loadState(snapId: string): Promise<State>;
    loadSnap(snapId?: string): Promise<Snap>;
    snapsIterable(snapId?: string, options?: SnapsIterableOpts): AsyncIterable<Snap>;
    getClosestTag(snapToStartFrom?: string): Promise<Tag | undefined>;
    checkout(version: SemVer): void;
    write(path: string, fs?: AnyFS): void;
    equals(component: Component): boolean;
}
export {};
