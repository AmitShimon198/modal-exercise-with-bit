import { CLIMain } from '@teambit/cli';
import { ExpressMain, Route } from '@teambit/express';
import { GraphqlMain } from '@teambit/graphql';
import { SlotRegistry } from '@teambit/harmony';
import { Config } from '@teambit/config';
import { ComponentID } from '@teambit/component-id';
import { ExtensionDataList } from '@teambit/legacy/dist/consumer/config';
import { ComponentFactory } from './component-factory';
import { AspectList } from './aspect-list';
import { AspectEntry } from './aspect-entry';
import { ShowFragment } from './show';
export declare type ComponentHostSlot = SlotRegistry<ComponentFactory>;
export declare type ShowFragmentSlot = SlotRegistry<ShowFragment[]>;
export declare class ComponentMain {
    private hostSlot;
    private express;
    private showFragmentSlot;
    constructor(hostSlot: ComponentHostSlot, express: ExpressMain, showFragmentSlot: ShowFragmentSlot);
    registerHost(host: ComponentFactory): this;
    createAspectList(legacyExtensionDataList: ExtensionDataList, scope?: string): AspectList;
    createAspectListFromEntries(entries: AspectEntry[]): AspectList;
    registerRoute(routes: Route[]): this;
    setHostPriority(id: string): this;
    getHost(id?: string): ComponentFactory;
    getRoute(id: ComponentID, routeName: string): string;
    private getPriorHost;
    getShowFragments(): ShowFragment[];
    isHost(name: string): boolean;
    registerShowFragments(showFragments: ShowFragment[]): this;
    private _priorHost;
    static slots: (((registerFn: () => string) => SlotRegistry<Route[]>) | ((registerFn: () => string) => SlotRegistry<ComponentFactory>) | ((registerFn: () => string) => SlotRegistry<ShowFragment[]>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([graphql, express, cli, configAspect]: [GraphqlMain, ExpressMain, CLIMain, Config], config: any, [hostSlot, showFragmentSlot]: [ComponentHostSlot, ShowFragmentSlot]): Promise<ComponentMain>;
}
