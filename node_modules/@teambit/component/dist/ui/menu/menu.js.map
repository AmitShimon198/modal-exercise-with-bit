{"version":3,"sources":["menu.tsx"],"names":["Menu","navigationSlot","widgetSlot","className","host","menuItemSlot","component","mainMenuItems","values","styles","topBar","leftSide","rightSide","widgets","VersionRelatedDropdowns","versionList","tags","toArray","map","tag","version","filter","x","undefined","reverse","isLatestVersion","packageVersion","length","useBox","id","name","toString","ignoreVersion","packageName","split"],"mappings":"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","sourcesContent":["import { MainDropdown, MenuItemSlot } from '@teambit/ui-foundation.ui.main-dropdown';\nimport { VersionDropdown } from '@teambit/component.ui.version-dropdown';\nimport { FullLoader } from '@teambit/legacy/dist/to-eject/full-loader';\nimport { flatten, groupBy } from 'lodash';\nimport classnames from 'classnames';\nimport React, { useMemo } from 'react';\nimport { UseBoxDropdown } from '@teambit/ui-foundation.ui.use-box.dropdown';\nimport { Menu as UseBoxMenu } from '@teambit/ui-foundation.ui.use-box.menu';\nimport type { ComponentModel } from '../component-model';\nimport { useComponent } from '../use-component';\nimport { MenuNav } from './menu-nav';\nimport styles from './menu.module.scss';\nimport { OrderedNavigationSlot } from './nav-plugin';\n\nexport type MenuProps = {\n  className?: string;\n  /**\n   * slot for top bar menu nav items\n   */\n  navigationSlot: OrderedNavigationSlot;\n  /**\n   * right side menu item slot\n   */\n  widgetSlot: OrderedNavigationSlot;\n  host: string;\n  /**\n   * main dropdown item slot\n   */\n  menuItemSlot: MenuItemSlot;\n};\n\n/**\n * top bar menu.\n */\nexport function Menu({ navigationSlot, widgetSlot, className, host, menuItemSlot }: MenuProps) {\n  const { component } = useComponent(host);\n  const mainMenuItems = useMemo(() => groupBy(flatten(menuItemSlot.values()), 'category'), [menuItemSlot]);\n\n  if (!component) return <FullLoader />;\n\n  return (\n    <div className={classnames(styles.topBar, className)}>\n      <div className={styles.leftSide}>\n        <MenuNav navigationSlot={navigationSlot} />\n      </div>\n      <div className={styles.rightSide}>\n        <div className={styles.widgets}>\n          <MenuNav navigationSlot={widgetSlot} />\n        </div>\n        <VersionRelatedDropdowns component={component} />\n        <MainDropdown menuItems={mainMenuItems} />\n      </div>\n    </div>\n  );\n}\n\nfunction VersionRelatedDropdowns({ component }: { component: ComponentModel }) {\n  const versionList =\n    useMemo(\n      () =>\n        component.tags\n          ?.toArray()\n          .map((tag) => tag?.version?.version)\n          .filter((x) => x !== undefined)\n          .reverse(),\n      [component.tags]\n    ) || [];\n\n  const isLatestVersion = useMemo(() => component.version === versionList[0], [component.version]);\n  const packageVersion = useMemo(() => (isLatestVersion ? '' : `@${component.version}`), [component.version]);\n  return (\n    <>\n      {versionList.length > 0 && (\n        <UseBoxDropdown\n          position=\"bottom-end\"\n          className={styles.useBox}\n          Menu={() => (\n            <UseBoxMenu\n              componentName={component.id.name}\n              componentId={component.id.toString({ ignoreVersion: isLatestVersion })}\n              packageName={`${component.packageName}${packageVersion}`}\n              registryName={component.packageName.split('/')[0]}\n            />\n          )}\n        />\n      )}\n      <VersionDropdown versions={versionList} currentVersion={component.version} />\n    </>\n  );\n}\n"]}