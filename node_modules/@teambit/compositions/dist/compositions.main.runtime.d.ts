import { Component, ComponentMap, AspectData } from '@teambit/component';
import { GraphqlMain } from '@teambit/graphql';
import { PreviewMain } from '@teambit/preview';
import { SchemaMain } from '@teambit/schema';
import { Workspace } from '@teambit/workspace';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { DevFilesMain } from '@teambit/dev-files';
import { Composition } from './composition';
export declare type CompositionsConfig = {
    compositionFilePattern: string[];
    compositionPreviewFilePattern: string[];
};
export declare class CompositionsMain {
    private compositionFilePattern;
    private previewFilePattern;
    private preview;
    private workspace;
    private schema;
    private devFiles;
    constructor(compositionFilePattern: string[], previewFilePattern: string[], preview: PreviewMain, workspace: Workspace, schema: SchemaMain, devFiles: DevFilesMain);
    getPreviewFiles(components: Component[]): ComponentMap<AbstractVinyl[]>;
    getCompositions(component: Component): Composition[];
    readCompositions(component: Component): Composition[];
    onComponentLoad(component: Component): Promise<AspectData>;
    private computeCompositions;
    static defaultConfig: CompositionsConfig;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([preview, graphql, workspace, schema, devFiles]: [PreviewMain, GraphqlMain, Workspace, SchemaMain, DevFilesMain], config: CompositionsConfig): Promise<CompositionsMain>;
}
