import { GlobalConfig } from '@teambit/harmony';
import { ExtensionDataEntry, ExtensionDataList } from '@teambit/legacy/dist/consumer/config';
import { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';
import { ConfigType, HostConfig } from './types';
import { LegacyInitProps, WorkspaceConfig, WorkspaceConfigFileProps } from './workspace-config';
export declare type SetExtensionOptions = {
    overrideExisting: boolean;
    ignoreVersion: boolean;
};
export declare class Config {
    workspaceConfig?: WorkspaceConfig | undefined;
    scopeConfig?: WorkspaceConfig | undefined;
    constructor(workspaceConfig?: WorkspaceConfig | undefined, scopeConfig?: WorkspaceConfig | undefined);
    get type(): ConfigType;
    get path(): PathOsBased | undefined;
    get config(): HostConfig | undefined;
    static loadIfExist(dirPath: PathOsBased): Promise<Config | undefined | any>;
    static ensureWorkspace(dirPath: PathOsBasedAbsolute, workspaceConfigProps?: WorkspaceConfigFileProps, legacyInitProps?: LegacyInitProps): Promise<Config>;
    get extensions(): ExtensionDataList | undefined;
    extension(extensionId: string, ignoreVersion: boolean): ExtensionDataEntry | undefined;
    setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions): void;
    getHarmonyConfigObject(): GlobalConfig;
}
