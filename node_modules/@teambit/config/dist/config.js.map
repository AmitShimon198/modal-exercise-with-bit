{"version":3,"sources":["config.ts"],"names":["Config","constructor","workspaceConfig","scopeConfig","type","path","config","loadIfExist","dirPath","WorkspaceConfig","ensureWorkspace","workspaceConfigProps","legacyInitProps","ensure","extensions","extension","extensionId","ignoreVersion","setExtension","options","getHarmonyConfigObject","forEach","stringId"],"mappings":";;;;;;;;;AAKA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAaO,MAAMA,MAAN,CAAa;AAClBC,EAAAA,WAAW,CAAQC,eAAR,EAAkDC,WAAlD,EAAiF;AAAA,SAAzED,eAAyE,GAAzEA,eAAyE;AAAA,SAA/BC,WAA+B,GAA/BA,WAA+B;AAAE,GAD5E,CAElB;;;AAEQ,MAAJC,IAAI,GAAe;AACrB,QAAI,KAAKF,eAAT,EAA0B;AACxB,aAAO,WAAP;AACD;;AACD,WAAO,OAAP;AACD;;AAEO,MAAJG,IAAI,GAA4B;AAAA;;AAClC,2BAAO,KAAKC,MAAZ,iDAAO,aAAaD,IAApB;AACD;;AAES,MAANC,MAAM,GAA2B;AACnC,QAAI,KAAKJ,eAAT,EAA0B;AACxB,aAAO,KAAKA,eAAZ;AACD;;AACD,WAAO,KAAKC,WAAZ;AACD;;AAEuB,eAAXI,WAAW,CAACC,OAAD,EAA0D;AAChF,UAAMN,eAAe,GAAG,MAAMO,mCAAgBF,WAAhB,CAA4BC,OAA5B,CAA9B;;AACA,QAAIN,eAAJ,EAAqB;AACnB,aAAO,IAAIF,MAAJ,CAAWE,eAAX,CAAP;AACD,KAJ+E,CAKhF;AACA;AACA;;;AACA,WAAO,EAAP,CARgF,CAShF;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAC8B,eAAfQ,eAAe,CAC1BF,OAD0B,EAE1BG,oBAA8C,GAAG,EAFvB,EAG1BC,eAH0B,EAIT;AACjB,UAAMV,eAAe,GAAG,MAAMO,mCAAgBI,MAAhB,CAAuBL,OAAvB,EAAgCG,oBAAhC,EAAsDC,eAAtD,CAA9B;AACA,WAAO,IAAIZ,MAAJ,CAAWE,eAAX,CAAP;AACD;;AAEa,MAAVY,UAAU,GAAkC;AAAA;;AAC9C,4BAAO,KAAKR,MAAZ,kDAAO,cAAaQ,UAApB;AACD;;AAEDC,EAAAA,SAAS,CAACC,WAAD,EAAsBC,aAAtB,EAA8E;AAAA;;AACrF,4BAAO,KAAKX,MAAZ,kDAAO,cAAaS,SAAb,CAAuBC,WAAvB,EAAoCC,aAApC,CAAP;AACD;;AAEDC,EAAAA,YAAY,CAACF,WAAD,EAAsBV,MAAtB,EAAmDa,OAAnD,EAAiF;AAAA;;AAC3F,0BAAKb,MAAL,gEAAaY,YAAb,CAA0BF,WAA1B,EAAuCV,MAAvC,EAA+Ca,OAA/C;AACD;;AAEDC,EAAAA,sBAAsB,GAAiB;AACrC,UAAMd,MAAM,GAAG,EAAf;AACA,QAAI,CAAC,KAAKQ,UAAV,EAAsB,OAAOR,MAAP;AACtB,SAAKQ,UAAL,CAAgBO,OAAhB,CAAyBN,SAAD,IAAe;AACrCT,MAAAA,MAAM,CAACS,SAAS,CAACO,QAAX,CAAN,GAA6BP,SAAS,CAACT,MAAvC;AACD,KAFD;AAGA,WAAOA,MAAP;AACD;;AAxEiB","sourcesContent":["import { GlobalConfig } from '@teambit/harmony';\nimport { ExtensionDataEntry, ExtensionDataList } from '@teambit/legacy/dist/consumer/config';\nimport { PathOsBased, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\n\nimport { ConfigType, HostConfig } from './types';\nimport { LegacyInitProps, WorkspaceConfig, WorkspaceConfigFileProps } from './workspace-config';\n\n// export type ConfigProps = {\n//   workspaceConfig: WorkspaceConfig;\n// } | {\n//   scopeConfig: WorkspaceConfig;\n// };\n\nexport type SetExtensionOptions = {\n  overrideExisting: boolean;\n  ignoreVersion: boolean;\n};\n\nexport class Config {\n  constructor(public workspaceConfig?: WorkspaceConfig, public scopeConfig?: WorkspaceConfig) {}\n  // constructor(private props: ConfigProps) {}\n\n  get type(): ConfigType {\n    if (this.workspaceConfig) {\n      return 'workspace';\n    }\n    return 'scope';\n  }\n\n  get path(): PathOsBased | undefined {\n    return this.config?.path;\n  }\n\n  get config(): HostConfig | undefined {\n    if (this.workspaceConfig) {\n      return this.workspaceConfig;\n    }\n    return this.scopeConfig;\n  }\n\n  static async loadIfExist(dirPath: PathOsBased): Promise<Config | undefined | any> {\n    const workspaceConfig = await WorkspaceConfig.loadIfExist(dirPath);\n    if (workspaceConfig) {\n      return new Config(workspaceConfig);\n    }\n    // TODO: try load scope config here\n    // return undefined;\n    // TODO: change to return a maybe type\n    return {};\n    // return new Config(workspaceConfig, 'workspace');\n  }\n\n  /**\n   * Ensure the given directory has a workspace config\n   * Load if existing and create new if not\n   *\n   * @static\n   * @param {PathOsBasedAbsolute} dirPath\n   * @param {WorkspaceConfigFileProps} [workspaceConfigProps={} as any]\n   * @returns {Promise<WorkspaceConfig>}\n   * @memberof WorkspaceConfig\n   */\n  static async ensureWorkspace(\n    dirPath: PathOsBasedAbsolute,\n    workspaceConfigProps: WorkspaceConfigFileProps = {} as any,\n    legacyInitProps?: LegacyInitProps\n  ): Promise<Config> {\n    const workspaceConfig = await WorkspaceConfig.ensure(dirPath, workspaceConfigProps, legacyInitProps);\n    return new Config(workspaceConfig);\n  }\n\n  get extensions(): ExtensionDataList | undefined {\n    return this.config?.extensions;\n  }\n\n  extension(extensionId: string, ignoreVersion: boolean): ExtensionDataEntry | undefined {\n    return this.config?.extension(extensionId, ignoreVersion);\n  }\n\n  setExtension(extensionId: string, config: Record<string, any>, options: SetExtensionOptions) {\n    this.config?.setExtension(extensionId, config, options);\n  }\n\n  getHarmonyConfigObject(): GlobalConfig {\n    const config = {};\n    if (!this.extensions) return config;\n    this.extensions.forEach((extension) => {\n      config[extension.stringId] = extension.config;\n    });\n    return config;\n  }\n}\n"]}