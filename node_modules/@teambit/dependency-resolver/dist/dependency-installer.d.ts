import { AspectLoaderMain } from '@teambit/aspect-loader';
import { ComponentMap } from '@teambit/component';
import { Logger } from '@teambit/logger';
import { PackageManager, PackageManagerInstallOptions } from './package-manager';
import { WorkspacePolicy } from './policy';
declare type InstallArgs = {
    rootDir: string | undefined;
    rootPolicy: WorkspacePolicy;
    componentDirectoryMap: ComponentMap<string>;
    options: InstallOptions;
    packageManagerOptions: PackageManagerInstallOptions;
};
export declare type InstallOptions = {
    installTeambitBit: boolean;
};
export declare type PreInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;
export declare type PreInstallSubscriberList = Array<PreInstallSubscriber>;
export declare type PostInstallSubscriber = (installer: DependencyInstaller, installArgs: InstallArgs) => Promise<void>;
export declare type PostInstallSubscriberList = Array<PostInstallSubscriber>;
export declare class DependencyInstaller {
    private packageManager;
    private aspectLoader;
    private logger;
    private rootDir?;
    private cacheRootDir?;
    private preInstallSubscriberList?;
    private postInstallSubscriberList?;
    constructor(packageManager: PackageManager, aspectLoader: AspectLoaderMain, logger: Logger, rootDir?: string | undefined, cacheRootDir?: string | undefined, preInstallSubscriberList?: PreInstallSubscriberList | undefined, postInstallSubscriberList?: PostInstallSubscriberList | undefined);
    install(rootDir: string | undefined, rootPolicy: WorkspacePolicy, componentDirectoryMap: ComponentMap<string>, options?: InstallOptions, packageManagerOptions?: PackageManagerInstallOptions): Promise<ComponentMap<string>>;
    private cleanCompsNodeModules;
    private runPrePostSubscribers;
}
export {};
