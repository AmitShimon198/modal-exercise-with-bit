import { Component, ComponentMain } from '@teambit/component';
import type { Config } from '@teambit/config';
import { EnvsMain } from '@teambit/envs';
import { SlotRegistry, ExtensionManifest, Aspect } from '@teambit/harmony';
import { RequireableComponent } from '@teambit/harmony.modules.requireable-component';
import type { LoggerMain } from '@teambit/logger';
import { GraphqlMain } from '@teambit/graphql';
import { Logger } from '@teambit/logger';
import { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';
import { ProxyConfig } from '@teambit/legacy/dist/scope/network/http';
import { onTagIdTransformer } from '@teambit/legacy/dist/scope/component-ops/tag-model-component';
import { OnExportIdTransformer } from '@teambit/legacy/dist/scope/component-ops/export-scope-components';
import { Version as VersionModel } from '@teambit/legacy/dist/scope/models';
import LegacyComponent from '@teambit/legacy/dist/consumer/component';
import semver from 'semver';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { GlobalConfigMain } from '@teambit/global-config';
import { Registries } from './registry';
import { DependencyInstaller, PreInstallSubscriberList, PostInstallSubscriberList } from './dependency-installer';
import { DependencyVersionResolver } from './dependency-version-resolver';
import { DependencyLinker, LinkingOptions } from './dependency-linker';
import { CreateFromComponentsOptions, WorkspaceManifest, ManifestDependenciesObject } from './manifest';
import { WorkspacePolicyConfigObject, VariantPolicyConfigObject, WorkspacePolicy, VariantPolicy, WorkspacePolicyAddEntryOptions, WorkspacePolicyEntry } from './policy';
import { PackageManager } from './package-manager';
import { SerializedDependency, DependencyFactory, DependencyList } from './dependencies';
import { DependencyDetector } from './dependency-detector';
export declare const BIT_DEV_REGISTRY = "https://node.bit.dev/";
export declare const NPM_REGISTRY = "https://registry.npmjs.org/";
export { ProxyConfig } from '@teambit/legacy/dist/scope/network/http';
export interface DependencyResolverWorkspaceConfig {
    policy: WorkspacePolicyConfigObject;
    packageManager: string;
    proxy?: string;
    httpsProxy?: string;
    ca?: string;
    strictSsl?: string;
    cert?: string;
    key?: string;
    noProxy?: string;
    strictPeerDependencies: boolean;
    packageManagerArgs: string[];
    devFilePatterns: string[];
    installFromBitDevRegistry: boolean;
    savePrefix: string;
}
export interface DependencyResolverVariantConfig {
    policy: VariantPolicyConfigObject;
}
export declare type RootPolicyRegistry = SlotRegistry<WorkspacePolicy>;
export declare type PoliciesRegistry = SlotRegistry<VariantPolicyConfigObject>;
export declare type PackageManagerSlot = SlotRegistry<PackageManager>;
export declare type DependencyFactorySlot = SlotRegistry<DependencyFactory[]>;
export declare type PreInstallSlot = SlotRegistry<PreInstallSubscriberList>;
export declare type PostInstallSlot = SlotRegistry<PostInstallSubscriberList>;
export declare type MergeDependenciesFunc = (configuredExtensions: ExtensionDataList) => Promise<VariantPolicyConfigObject>;
export declare type GetInstallerOptions = {
    rootDir?: string;
    packageManager?: string;
    cacheRootDirectory?: string;
};
export declare type GetLinkerOptions = {
    rootDir?: string;
    linkingOptions?: LinkingOptions;
};
export declare type GetVersionResolverOptions = {
    cacheRootDirectory?: string;
};
export declare class DependencyResolverMain {
    readonly config: DependencyResolverWorkspaceConfig;
    private rootPolicyRegistry;
    private policiesRegistry;
    private envs;
    private logger;
    private configAspect;
    private aspectLoader;
    private globalConfig;
    readonly componentAspect: ComponentMain;
    private packageManagerSlot;
    private dependencyFactorySlot;
    private preInstallSlot;
    private postInstallSlot;
    constructor(config: DependencyResolverWorkspaceConfig, rootPolicyRegistry: RootPolicyRegistry, policiesRegistry: PoliciesRegistry, envs: EnvsMain, logger: Logger, configAspect: Config, aspectLoader: AspectLoaderMain, globalConfig: GlobalConfigMain, componentAspect: ComponentMain, packageManagerSlot: PackageManagerSlot, dependencyFactorySlot: DependencyFactorySlot, preInstallSlot: PreInstallSlot, postInstallSlot: PostInstallSlot);
    registerPackageManager(packageManager: PackageManager): void;
    registerDependencyFactories(factories: DependencyFactory[]): void;
    registerPreInstallSubscribers(subscribers: PreInstallSubscriberList): void;
    registerPostInstallSubscribers(subscribers: PreInstallSubscriberList): void;
    getSavePrefix(): string;
    getVersionWithSavePrefix(version: string, overridePrefix?: string): string;
    getPolicy(component: Component): Promise<VariantPolicy>;
    extractDepsFromLegacy(component: Component, policy?: VariantPolicy): Promise<SerializedDependency[]>;
    private getDependencyListFactory;
    getDependencies(component: Component): Promise<DependencyList>;
    private getDependenciesFromSerializedDependencies;
    getWorkspacePolicy(): WorkspacePolicy;
    getWorkspacePolicyFromConfig(): WorkspacePolicy;
    getWorkspacePolicyFromPackageJson(packageJson: Record<string, any>): WorkspacePolicy;
    mergeWorkspacePolices(polices: WorkspacePolicy[]): WorkspacePolicy;
    getWorkspaceManifest(name: string | undefined, version: semver.SemVer | undefined, rootPolicy: WorkspacePolicy, rootDir: string, components: Component[], options?: CreateFromComponentsOptions): Promise<WorkspaceManifest>;
    getInstaller(options?: GetInstallerOptions): DependencyInstaller;
    private getPreInstallSubscribers;
    private getPostInstallSubscribers;
    getLinker(options?: GetLinkerOptions): DependencyLinker;
    getPackageManagerName(): string;
    getVersionResolver(options?: GetVersionResolverOptions): DependencyVersionResolver;
    getSystemPackageManager(): PackageManager;
    getProxyConfig(): Promise<ProxyConfig>;
    private getProxyConfigFromDepResolverConfig;
    private getProxyConfigFromPackageManager;
    private getProxyConfigFromGlobalConfig;
    getRegistries(): Promise<Registries>;
    private addAuthToScopedBitRegistries;
    private getBitAuthConfig;
    get packageManagerName(): string;
    addToRootPolicy(entries: WorkspacePolicyEntry[], options?: WorkspacePolicyAddEntryOptions): WorkspacePolicy;
    persistConfig(workspaceDir?: string): Promise<void | undefined>;
    registerDependenciesPolicies(policy: VariantPolicyConfigObject): void;
    registerRootPolicy(policy: WorkspacePolicy): void;
    mergeVariantPolicies(configuredExtensions: ExtensionDataList): Promise<VariantPolicy>;
    updateDepsOnLegacyTag(component: LegacyComponent, idTransformer: onTagIdTransformer): LegacyComponent;
    updateDepsOnLegacyExport(version: VersionModel, idTransformer: OnExportIdTransformer): VersionModel;
    registerDetector(detector: DependencyDetector): this;
    onLoadRequireableExtensionSubscriber(requireableExtension: RequireableComponent, manifest: ExtensionManifest | Aspect): Promise<ExtensionManifest | Aspect>;
    private resolveRequireableExtensionManifestDepsVersionsRecursively;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<WorkspacePolicy>) | ((registerFn: () => string) => SlotRegistry<Partial<Record<keyof import("./policy").PolicyConfigKeys, {
        [dependencyId: string]: import("./policy/variant-policy/variant-policy").VariantPolicyConfigEntryValue;
    }>>>) | ((registerFn: () => string) => SlotRegistry<PackageManager>) | ((registerFn: () => string) => SlotRegistry<RegExp>) | ((registerFn: () => string) => SlotRegistry<DependencyFactory>) | ((registerFn: () => string) => SlotRegistry<PreInstallSubscriberList>) | ((registerFn: () => string) => SlotRegistry<DependencyDetector>))[];
    static defaultConfig: DependencyResolverWorkspaceConfig;
    static provider([envs, loggerExt, configMain, aspectLoader, componentAspect, graphql, globalConfig]: [
        EnvsMain,
        LoggerMain,
        Config,
        AspectLoaderMain,
        ComponentMain,
        GraphqlMain,
        GlobalConfigMain
    ], config: DependencyResolverWorkspaceConfig, [rootPolicyRegistry, policiesRegistry, packageManagerSlot, dependencyFactorySlot, preInstallSlot, postInstallSlot,]: [
        RootPolicyRegistry,
        PoliciesRegistry,
        PackageManagerSlot,
        DependencyFactorySlot,
        PreInstallSlot,
        PostInstallSlot
    ]): Promise<DependencyResolverMain>;
    getEmptyDepsObject(): ManifestDependenciesObject;
}
