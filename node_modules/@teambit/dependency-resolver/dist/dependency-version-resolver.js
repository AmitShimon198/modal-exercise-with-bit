"use strict";

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DependencyVersionResolver = void 0;
const DEFAULT_REMOTE_RESOLVE_VERSIONS = {
  fetchToCache: true,
  update: true
};

class DependencyVersionResolver {
  constructor(
  /**
   * package manager instance.
   */
  packageManager, cacheRootDir) {
    this.packageManager = packageManager;
    this.cacheRootDir = cacheRootDir;
  }

  async resolveRemoteVersion(packageName, options) {
    // Make sure to take other default if passed options with only one option
    const calculatedOpts = Object.assign({}, DEFAULT_REMOTE_RESOLVE_VERSIONS, {
      cacheRootDir: this.cacheRootDir
    }, options); // TODO: the cache should be probably passed to the package manager constructor not to the install function

    const resolved = await this.packageManager.resolveRemoteVersion(packageName, calculatedOpts);
    return resolved;
  }

}

exports.DependencyVersionResolver = DependencyVersionResolver;

//# sourceMappingURL=dependency-version-resolver.js.map