import { ManifestDependenciesObject } from '../manifest';
import { WorkspacePolicy } from '../../policy';
import { PackageName, SemverVersion } from '../../dependencies';
import { ComponentDependenciesMap } from '../workspace-manifest-factory';
export { getEmptyDedupedDependencies } from './hoist-dependencies';
export declare type conflictedComponent = {
    componentPackageName: PackageName;
    range: SemverVersion;
};
export declare type DedupedDependenciesPeerConflicts = {
    packageName: PackageName;
    conflictedComponents: conflictedComponent[];
    conflictMessage: string;
};
export declare type DedupedDependenciesIssues = {
    peerConflicts: DedupedDependenciesPeerConflicts[];
};
export declare type DedupedDependencies = {
    rootDependencies: ManifestDependenciesObject;
    componentDependenciesMap: ComponentDependenciesMap;
    issus?: DedupedDependenciesIssues;
};
export declare function dedupeDependencies(rootPolicy: WorkspacePolicy, componentDependenciesMap: ComponentDependenciesMap): DedupedDependencies;
