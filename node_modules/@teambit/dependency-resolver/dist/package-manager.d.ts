import { ComponentMap } from '@teambit/component';
import { Registries } from './registry';
import { DepsFilterFn } from './manifest';
import { WorkspacePolicy } from './policy';
import { ProxyConfig } from './dependency-resolver.main.runtime';
export declare type PackageManagerInstallOptions = {
    cacheRootDir?: string;
    dedupe?: boolean;
    copyPeerToRuntimeOnRoot?: boolean;
    copyPeerToRuntimeOnComponents?: boolean;
    dependencyFilterFn?: DepsFilterFn;
};
export declare type ResolvedPackageVersion = {
    packageName: string;
    version: string | null;
    isSemver: boolean;
    resolvedVia?: string;
};
export declare type PackageManagerResolveRemoteVersionOptions = {
    rootDir: string;
    cacheRootDir?: string;
};
export interface PackageManager {
    install(rootDir: string, rootPolicy: WorkspacePolicy, componentDirectoryMap: ComponentMap<string>, options?: PackageManagerInstallOptions): Promise<void>;
    resolveRemoteVersion(packageName: string, options: PackageManagerResolveRemoteVersionOptions): Promise<ResolvedPackageVersion>;
    getRegistries?(): Promise<Registries>;
    getProxyConfig?(): Promise<ProxyConfig>;
}
