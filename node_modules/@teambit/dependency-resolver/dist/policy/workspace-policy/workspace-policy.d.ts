import { Policy, PolicyEntry, SemverVersion, GitUrlVersion, FileSystemPath, PolicyConfigKeys } from '../policy';
import { DependencyLifecycleType } from '../../dependencies';
export declare type WorkspacePolicyConfigKeys = Omit<PolicyConfigKeys, 'devDependencies'>;
export declare type WorkspacePolicyConfigKeysNames = keyof WorkspacePolicyConfigKeys;
export declare type WorkspacePolicyConfigObject = Partial<Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleConfigObject>>;
export declare type WorkspacePolicyManifest = Partial<Record<WorkspacePolicyConfigKeysNames, WorkspacePolicyLifecycleManifestObject>>;
declare type WorkspacePolicyLifecycleConfigObject = {
    [dependencyId: string]: WorkspacePolicyConfigEntryValue;
};
declare type WorkspacePolicyLifecycleManifestObject = {
    [dependencyId: string]: WorkspacePolicyEntryVersion;
};
export declare type WorkspacePolicyConfigEntryValue = WorkspacePolicyEntryValue | WorkspacePolicyEntryVersion;
export declare type AddEntryOptions = {
    updateExisting: boolean;
};
export declare type WorkspacePolicyEntryVersion = SemverVersion | GitUrlVersion | FileSystemPath;
export declare type WorkspacePolicyEntryValue = {
    version: WorkspacePolicyEntryVersion;
    preserve?: boolean;
};
export declare type WorkspacePolicyEntry = PolicyEntry & {
    value: WorkspacePolicyEntryValue;
};
export declare class WorkspacePolicy implements Policy<WorkspacePolicyConfigObject> {
    private _policiesEntries;
    constructor(_policiesEntries: WorkspacePolicyEntry[]);
    get entries(): WorkspacePolicyEntry[];
    add(entry: WorkspacePolicyEntry, options?: AddEntryOptions): void;
    forEach(predicate: (dep: WorkspacePolicyEntry, index?: number) => void): void;
    filter(predicate: (dep: WorkspacePolicyEntry, index?: number) => boolean): WorkspacePolicy;
    find(depId: string, lifecycleType?: DependencyLifecycleType): WorkspacePolicyEntry | undefined;
    remove(depId: string): WorkspacePolicy;
    getDepVersion(depId: string, lifecycleType?: DependencyLifecycleType): WorkspacePolicyEntryVersion | undefined;
    toConfigObject(): WorkspacePolicyConfigObject;
    toManifest(): WorkspacePolicyManifest;
    byLifecycleType(lifecycleType: DependencyLifecycleType): WorkspacePolicy;
    static mergePolices(policies: WorkspacePolicy[]): WorkspacePolicy;
}
export {};
