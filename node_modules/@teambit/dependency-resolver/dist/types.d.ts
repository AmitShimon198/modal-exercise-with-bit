import { ComponentConfig, ComponentFS } from '@teambit/component';
import { PathLinux } from '@teambit/legacy/dist/utils/path';
import { ComponentManifest } from './manifest/component-manifest';
import { PackageName } from './dependencies';
export declare type RegistryName = string;
export declare type Registry = {
    uri: string;
    alwaysAuth: boolean;
    authHeaderValue?: string;
    originalAuthType: string;
    originalAuthValue: string;
};
export declare type RegistriesMap = Record<RegistryName, Registry>;
export interface RawComponentState {
    filesystem: ComponentFS;
    config: ComponentConfig;
}
export declare type Specifier = {
    isDefault: boolean;
    name: string;
};
export declare type ImportSpecifier = {
    mainFile: Specifier;
    linkFile?: Specifier;
};
export declare type RelativePath = {
    sourceRelativePath: PathLinux;
    destinationRelativePath: PathLinux;
    importSpecifiers?: ImportSpecifier[];
    isCustomResolveUsed?: boolean;
    importSource?: string;
};
interface FileDependencyDefinition {
    dependencyPath: string;
    relativePaths?: RelativePath[];
    isType?: boolean;
}
export declare type FileDependenciesDefinition = FileDependencyDefinition[];
export declare type ComponentsManifestsMap = Map<PackageName, ComponentManifest>;
export {};
