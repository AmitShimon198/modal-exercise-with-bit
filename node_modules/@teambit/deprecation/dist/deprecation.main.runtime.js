"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DeprecationMain = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("@teambit/legacy/dist/api/scope");

  _scope = function () {
    return data;
  };

  return data;
}

function _cli() {
  const data = require("@teambit/cli");

  _cli = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _scope2() {
  const data = require("@teambit/scope");

  _scope2 = function () {
    return data;
  };

  return data;
}

function _graphql() {
  const data = require("@teambit/graphql");

  _graphql = function () {
    return data;
  };

  return data;
}

function _deprecation() {
  const data = require("./deprecation.aspect");

  _deprecation = function () {
    return data;
  };

  return data;
}

function _deprecation2() {
  const data = require("./deprecation.graphql");

  _deprecation2 = function () {
    return data;
  };

  return data;
}

function _deprecation3() {
  const data = require("./deprecation.fragment");

  _deprecation3 = function () {
    return data;
  };

  return data;
}

class DeprecationMain {
  constructor(scope) {
    this.scope = scope;
  }

  getDeprecationInfo(component) {
    const deprecated = component.state._consumer.deprecated;
    const isDeprecate = !!deprecated;
    return {
      isDeprecate
    };
  }

  async deprecate(ids) {
    const results = await (0, _scope().deprecate)({
      path: this.scope.path,
      ids
    }, null);
    this.scope.clearCache();
    return results;
  }

  async unDeprecate(ids) {
    const results = (0, _scope().undeprecate)({
      path: this.scope.path,
      ids
    }, null);
    this.scope.clearCache();
    return results;
  }

  static async provider([graphql, scope, componentAspect]) {
    const deprecation = new DeprecationMain(scope);
    componentAspect.registerShowFragments([new (_deprecation3().DeprecationFragment)(deprecation)]);
    graphql.register((0, _deprecation2().deprecationSchema)(deprecation));
  }

}

exports.DeprecationMain = DeprecationMain;
(0, _defineProperty2().default)(DeprecationMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(DeprecationMain, "dependencies", [_graphql().GraphqlAspect, _scope2().ScopeAspect, _component().ComponentAspect]);

_deprecation().DeprecationAspect.addRuntime(DeprecationMain);

//# sourceMappingURL=deprecation.main.runtime.js.map