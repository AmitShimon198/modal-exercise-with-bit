import { SlotRegistry } from '@teambit/harmony';
import { Workspace } from '@teambit/workspace';
import { EnvsMain } from '@teambit/envs';
import { Component, ComponentMain } from '@teambit/component';
import { GraphqlMain } from '@teambit/graphql';
import { DevFiles } from './dev-files';
export declare type DevPatterns = string[];
export declare type DevPatternSlot = SlotRegistry<DevPatterns>;
export declare type DevFilesConfig = {
    patterns: string[];
};
export declare class DevFilesMain {
    private envs;
    private devPatternSlot;
    readonly config: DevFilesConfig;
    constructor(envs: EnvsMain, devPatternSlot: DevPatternSlot, config: DevFilesConfig);
    computeDevPatterns(component: Component): {
        [x: string]: any;
        config: any;
    } & {
        [id: string]: any;
    };
    getDevPatterns(component: Component, aspectId?: string): string[];
    isDevFile(component: Component, filePath: string): boolean;
    registerDevPattern(pattern: DevPatterns): void;
    getDevFiles(component: Component): DevFiles;
    computeDevFiles(component: Component): DevFiles;
    static slots: ((registerFn: () => string) => SlotRegistry<DevPatterns>)[];
    static defaultConfig: {
        patterns: never[];
    };
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([envs, workspace, componentAspect, graphql]: [EnvsMain, Workspace, ComponentMain, GraphqlMain], config: DevFilesConfig, [devPatternSlot]: [DevPatternSlot]): Promise<DevFilesMain>;
}
