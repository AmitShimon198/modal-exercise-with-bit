import { Workspace } from '@teambit/workspace';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { BitId, BitIds } from '@teambit/legacy/dist/bit-id';
import Component from '@teambit/legacy/dist/consumer/component/consumer-component';
import PackageJsonFile from '@teambit/legacy/dist/consumer/component/package-json-file';
import { Logger } from '@teambit/logger';
export declare type EjectResults = {
    ejectedComponents: BitIds;
    failedComponents: FailedComponents;
};
export declare type EjectOptions = {
    force: boolean;
    keepFiles: boolean;
};
declare type FailedComponents = {
    modifiedComponents: BitIds;
    stagedComponents: BitIds;
    notExportedComponents: BitIds;
    selfHostedExportedComponents: BitIds;
};
export declare class ComponentsEjector {
    private workspace;
    private logger;
    private ejectOptions;
    consumer: Consumer;
    componentsIds: BitId[];
    idsToEject: BitIds;
    componentsToEject: Component[];
    notEjectedDependents: Array<{
        dependent: Component;
        ejectedDependencies: Component[];
    }>;
    failedComponents: FailedComponents;
    packageJsonFilesBeforeChanges: PackageJsonFile[];
    constructor(workspace: Workspace, logger: Logger, componentsIds: BitId[], ejectOptions: EjectOptions);
    eject(): Promise<EjectResults>;
    decideWhichComponentsToEject(): Promise<void>;
    loadComponentsToEject(): Promise<void>;
    removeComponentsFromNodeModules(): Promise<void>;
    installPackages(): Promise<void>;
    getPackagesToInstall(): string[];
    _buildExceptionMessageWithRollbackData(action: string): string;
    private removeComponentsFiles;
    private untrackComponents;
    throwEjectError(message: string, originalError: Error): void;
    _validateIdsHaveScopesAndVersions(): void;
}
export {};
