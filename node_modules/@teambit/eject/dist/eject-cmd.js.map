{"version":3,"sources":["eject-cmd.ts"],"names":["EjectCmd","constructor","workspace","logger","report","ids","force","json","keepFiles","bitIds","map","id","consumer","bitMap","getExistingBitId","componentEjector","ComponentsEjector","ejectResults","eject","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEO,MAAMA,QAAN,CAAkC;AAavCC,EAAAA,WAAW,CAASC,SAAT,EAAuCC,MAAvC,EAAuD;AAAA,SAA9CD,SAA8C,GAA9CA,SAA8C;AAAA,SAAhBC,MAAgB,GAAhBA,MAAgB;AAAA,kDAZ3D,eAY2D;AAAA,yDAXpD,8EAWoD;AAAA,mDAV1D,GAU0D;AAAA,qDATxD,CACR,CAAC,GAAD,EAAM,OAAN,EAAe,mFAAf,CADQ,EAER,CAAC,GAAD,EAAM,MAAN,EAAc,kCAAd,CAFQ,EAGR,CAAC,EAAD,EAAK,YAAL,EAAmB,kDAAnB,CAHQ,CASwD;AAAA,oDAJzD,IAIyD;AAAA,uDAHtD,IAGsD;AAAA,mDAF1D,aAE0D;AAAE;;AAExD,QAANC,MAAM,CACV,CAACC,GAAD,CADU,EAEV;AAAEC,IAAAA,KAAK,GAAG,KAAV;AAAiBC,IAAAA,IAAI,GAAG,KAAxB;AAA+BC,IAAAA,SAAS,GAAG;AAA3C,GAFU,EAGO;AACjB,UAAMC,MAAM,GAAGJ,GAAG,CAACK,GAAJ,CAASC,EAAD,IAAQ,KAAKT,SAAL,CAAeU,QAAf,CAAwBC,MAAxB,CAA+BC,gBAA/B,CAAgDH,EAAhD,CAAhB,CAAf,CADiB,CACoE;;AACrF,UAAMI,gBAAgB,GAAG,KAAIC,sCAAJ,EAAsB,KAAKd,SAA3B,EAAsC,KAAKC,MAA3C,EAAmD,uBAAQM,MAAR,CAAnD,EAAoE;AAAEH,MAAAA,KAAF;AAASE,MAAAA;AAAT,KAApE,CAAzB;AACA,UAAMS,YAAY,GAAG,MAAMF,gBAAgB,CAACG,KAAjB,EAA3B;AACA,QAAIX,IAAJ,EAAU,OAAOY,IAAI,CAACC,SAAL,CAAeH,YAAf,EAA6B,IAA7B,EAAmC,CAAnC,CAAP;AACV,WAAO,8BAAcA,YAAd,CAAP;AACD;;AAxBsC","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { Workspace } from '@teambit/workspace';\nimport ejectTemplate from '@teambit/legacy/dist/cli/templates/eject-template';\nimport { Logger } from '@teambit/logger';\nimport { compact } from 'lodash';\nimport { ComponentsEjector } from './components-ejector';\n\nexport class EjectCmd implements Command {\n  name = 'eject <id...>';\n  description = 'replaces the components from the local scope with the corresponding packages';\n  alias = 'E';\n  options = [\n    ['f', 'force', 'ignore local version. remove the components even when they are staged or modified'],\n    ['j', 'json', 'print the results in JSON format'],\n    ['', 'keep-files', 'keep the component files in the workspace intact'],\n  ] as CommandOptions;\n  loader = true;\n  migration = true;\n  group = 'development';\n\n  constructor(private workspace: Workspace, private logger: Logger) {}\n\n  async report(\n    [ids]: [string[]],\n    { force = false, json = false, keepFiles = false }: { force: boolean; json: boolean; keepFiles: boolean }\n  ): Promise<string> {\n    const bitIds = ids.map((id) => this.workspace.consumer.bitMap.getExistingBitId(id)); // this also assure that the ID is in .bitmap\n    const componentEjector = new ComponentsEjector(this.workspace, this.logger, compact(bitIds), { force, keepFiles });\n    const ejectResults = await componentEjector.eject();\n    if (json) return JSON.stringify(ejectResults, null, 2);\n    return ejectTemplate(ejectResults);\n  }\n}\n"]}