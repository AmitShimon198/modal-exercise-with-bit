import type { Linter, LinterContext } from '@teambit/linter';
import type { Formatter, FormatterContext } from '@teambit/formatter';
import type { Tester } from '@teambit/tester';
import type { Compiler } from '@teambit/compiler';
import type { Bundler, BundlerContext, DevServer, DevServerContext } from '@teambit/bundler';
import type { BuildTask } from '@teambit/builder';
import type { SchemaExtractor } from '@teambit/schema';
import type { WebpackConfigTransformer } from '@teambit/webpack';
import type { PackageJsonProps } from '@teambit/pkg';
import type { VariantPolicyConfigObject } from '@teambit/dependency-resolver';
export declare type EnvDescriptor = {
    type: string;
};
export interface Environment {
    name?: string;
    description?: string;
    icon?: string;
    [key: string]: any;
    __getDescriptor?: () => Promise<EnvDescriptor>;
    getSchemaExtractor?: (config?: any) => SchemaExtractor;
}
export interface DependenciesEnv extends Environment {
    getDependencies?: () => VariantPolicyConfigObject | Promise<VariantPolicyConfigObject>;
}
export interface PackageEnv extends Environment {
    getPackageJsonProps?: () => PackageJsonProps;
}
export interface LinterEnv extends Environment {
    getLinter?: (context: LinterContext, transformers: any[]) => Linter;
}
export interface FormatterEnv extends Environment {
    getFormatter?: (context: FormatterContext, transformers: any[]) => Formatter;
}
export interface PreviewEnv extends Environment {
    getMounter?: () => string;
    getDocsTemplate?: () => string;
    getBundler?: (context: BundlerContext, transformers: any[]) => Promise<Bundler>;
}
export declare type PipeServiceModifiersMap = Record<string, PipeServiceModifier>;
export interface PipeServiceModifier {
    transformers?: Function[];
    module?: any;
}
export interface BuilderEnv extends PreviewEnv {
    getPipe?: () => BuildTask[];
    getBuildPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];
    getTagPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];
    getSnapPipe?: (modifiersMap?: PipeServiceModifiersMap) => BuildTask[];
}
export interface TesterEnv extends Environment {
    getTester?: (path: string, tester: any) => Tester;
}
export interface CompilerEnv {
    getCompiler: () => Compiler;
}
export declare function hasCompiler(obj: Environment): obj is CompilerEnv;
export interface DevEnv extends PreviewEnv {
    getDevEnvId?: (context?: any) => string;
    getDevServer?: (context: DevServerContext, transformers: WebpackConfigTransformer[]) => DevServer | Promise<DevServer>;
}
