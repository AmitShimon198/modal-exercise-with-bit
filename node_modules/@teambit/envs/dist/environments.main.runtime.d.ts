import { CLIMain } from '@teambit/cli';
import { Component, ComponentMain, ComponentID, AspectData } from '@teambit/component';
import { GraphqlMain } from '@teambit/graphql';
import { Harmony, SlotRegistry } from '@teambit/harmony';
import { Logger, LoggerMain } from '@teambit/logger';
import { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';
import { EnvService } from './services';
import { Environment } from './environment';
import { Runtime } from './runtime';
import { EnvDefinition } from './env-definition';
import { EnvServiceList } from './env-service-list';
export declare type EnvsRegistry = SlotRegistry<Environment>;
export declare type EnvsConfig = {
    env: string;
    options: EnvOptions;
};
export declare type EnvOptions = {};
export declare type EnvTransformer = (env: Environment) => Environment;
export declare type ServiceSlot = SlotRegistry<EnvService<any>>;
export declare type Descriptor = {
    id: string;
    icon: string;
    services?: [];
};
export declare const DEFAULT_ENV = "teambit.harmony/node";
export declare class EnvsMain {
    readonly config: EnvsConfig;
    private context;
    private envSlot;
    private logger;
    private serviceSlot;
    private componentMain;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    private alreadyShownWarning;
    icon(): string;
    constructor(config: EnvsConfig, context: Harmony, envSlot: EnvsRegistry, logger: Logger, serviceSlot: ServiceSlot, componentMain: ComponentMain);
    createEnvironment(components: Component[]): Promise<Runtime>;
    getDefaultEnv(): EnvDefinition;
    compose(targetEnv: Environment, envTransformers: EnvTransformer[]): Environment;
    override(propsToOverride: Environment): EnvTransformer;
    merge<T>(targetEnv: Environment, sourceEnv: Environment): T;
    getEnvData(component: Component): AspectData;
    private getEnvIdFromEnvsData;
    getEnvId(component: Component): string;
    getEnv(component: Component): EnvDefinition;
    getDescriptor(component: Component): Descriptor | null;
    resolveEnv(component: Component, id: string): ComponentID | undefined;
    calculateEnv(component: Component): EnvDefinition;
    getAllEnvsConfiguredOnComponent(component: Component): EnvDefinition[];
    calculateEnvFromExtensions(extensions: ExtensionDataList): EnvDefinition;
    private getEnvIdFromEnvsConfig;
    private getEnvDefinitionById;
    private getEnvDefinitionByStringId;
    private printWarningIfFirstTime;
    isEnvRegistered(id: string): boolean;
    registerService(envService: EnvService<any>): this;
    getServices(env: EnvDefinition): EnvServiceList;
    implements(env: EnvDefinition, service: EnvService<any>): boolean;
    registerEnv(env: Environment): void;
    private createRuntime;
    private aggregateByDefs;
    private throwForDuplicateComponents;
    static slots: (((registerFn: () => string) => SlotRegistry<Environment>) | ((registerFn: () => string) => SlotRegistry<EnvService<any, {}, {}>>))[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([graphql, loggerAspect, component, cli]: [GraphqlMain, LoggerMain, ComponentMain, CLIMain], config: EnvsConfig, [envSlot, serviceSlot]: [EnvsRegistry, ServiceSlot], context: Harmony): Promise<EnvsMain>;
}
