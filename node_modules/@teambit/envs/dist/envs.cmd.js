"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EnvsCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _ink() {
  const data = require("ink");

  _ink = function () {
    return data;
  };

  return data;
}

function _cliTable() {
  const data = require("@teambit/cli-table");

  _cliTable = function () {
    return data;
  };

  return data;
}

function _envOverview() {
  const data = require("./components/env-overview");

  _envOverview = function () {
    return data;
  };

  return data;
}

class EnvsCmd {
  constructor(envs, componentAspect) {
    this.envs = envs;
    this.componentAspect = componentAspect;
    (0, _defineProperty2().default)(this, "name", 'envs [name]');
    (0, _defineProperty2().default)(this, "alias", 'env');
    (0, _defineProperty2().default)(this, "shortDescription", 'show all component envs');
    (0, _defineProperty2().default)(this, "description", 'show all components envs');
    (0, _defineProperty2().default)(this, "options", []);
    (0, _defineProperty2().default)(this, "group", 'development');
  }

  async showEnv(id, host) {
    const component = await host.get(await host.resolveComponentId(id));
    if (!component) throw new Error(`component for env ${id} was not found`);
    const env = this.envs.getEnv(component);
    const services = this.envs.getServices(env);
    const all = services.services.map(([serviceId, service]) => {
      if (service.render) return /*#__PURE__*/_react().default.createElement(_ink().Text, null, /*#__PURE__*/_react().default.createElement(_ink().Text, {
        bold: true,
        underline: true,
        color: "cyan"
      }, serviceId), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), /*#__PURE__*/_react().default.createElement(_ink().Newline, null), service.render(env));
      return /*#__PURE__*/_react().default.createElement(_ink().Text, {
        key: serviceId
      }, /*#__PURE__*/_react().default.createElement(_ink().Text, {
        bold: true,
        underline: true
      }, serviceId));
    });
    return /*#__PURE__*/_react().default.createElement(_ink().Text, null, /*#__PURE__*/_react().default.createElement(_envOverview().EnvOverview, {
      envDef: env
    }), all.map(item => item));
  }

  async render([name]) {
    const host = await this.componentAspect.getHost(); // TODO: think what to do re this line with gilad.

    if (!host) throw new Error('error: workspace not found');
    if (name) return this.showEnv(name, host);
    const components = await host.list(); // TODO: refactor to a react table

    return /*#__PURE__*/_react().default.createElement(_ink().Text, null, this.getTable(components));
  }

  getTable(components) {
    const tableData = components.map(component => {
      const env = this.envs.getDescriptor(component);
      return {
        component: component.id.toString(),
        env: env ? env.id : 'N/A'
      };
    });
    const header = [{
      value: 'component'
    }, {
      value: 'env'
    }];

    const table = _cliTable().CLITable.fromObject(header, tableData);

    return table.render();
  }

}

exports.EnvsCmd = EnvsCmd;

//# sourceMappingURL=envs.cmd.js.map