{"version":3,"sources":["envs.cmd.tsx"],"names":["EnvsCmd","constructor","envs","componentAspect","showEnv","id","host","component","get","resolveComponentId","Error","env","getEnv","services","getServices","all","map","serviceId","service","render","item","name","getHost","components","list","getTable","tableData","getDescriptor","toString","header","value","table","CLITable","fromObject"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text, Newline } from 'ink';\nimport { CLITable } from '@teambit/cli-table';\nimport { Command } from '@teambit/cli';\nimport { ComponentMain, ComponentFactory, Component } from '@teambit/component';\nimport { EnvsMain } from './environments.main.runtime';\nimport { EnvOverview } from './components/env-overview';\n\nexport class EnvsCmd implements Command {\n  name = 'envs [name]';\n  alias = 'env';\n  shortDescription = 'show all component envs';\n  description = 'show all components envs';\n  options = [];\n  group = 'development';\n\n  constructor(private envs: EnvsMain, private componentAspect: ComponentMain) {}\n\n  async showEnv(id: string, host: ComponentFactory) {\n    const component = await host.get(await host.resolveComponentId(id));\n    if (!component) throw new Error(`component for env ${id} was not found`);\n    const env = this.envs.getEnv(component);\n    const services = this.envs.getServices(env);\n    const all = services.services.map(([serviceId, service]) => {\n      if (service.render)\n        return (\n          <Text>\n            <Text bold underline color=\"cyan\">\n              {serviceId}\n            </Text>\n            <Newline />\n            <Newline />\n            {service.render(env)}\n          </Text>\n        );\n      return (\n        <Text key={serviceId}>\n          <Text bold underline>\n            {serviceId}\n          </Text>\n        </Text>\n      );\n    });\n\n    return (\n      <Text>\n        <EnvOverview envDef={env} />\n        {all.map((item) => item)}\n      </Text>\n    );\n  }\n\n  async render([name]: [string]): Promise<JSX.Element> {\n    const host = await this.componentAspect.getHost();\n    // TODO: think what to do re this line with gilad.\n    if (!host) throw new Error('error: workspace not found');\n    if (name) return this.showEnv(name, host);\n    const components = await host.list();\n    // TODO: refactor to a react table\n    return <Text>{this.getTable(components)}</Text>;\n  }\n\n  private getTable(components: Component[]) {\n    const tableData = components.map((component) => {\n      const env = this.envs.getDescriptor(component);\n      return {\n        component: component.id.toString(),\n        env: env ? env.id : 'N/A',\n      };\n    });\n\n    const header = [\n      {\n        value: 'component',\n      },\n      {\n        value: 'env',\n      },\n    ];\n    const table = CLITable.fromObject(header, tableData);\n    return table.render();\n  }\n}\n"]}