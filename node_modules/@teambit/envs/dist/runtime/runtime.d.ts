import { Logger } from '@teambit/logger';
import { EnvService, ServiceExecutionResult } from '../services';
import { EnvRuntime } from './env-runtime';
import { EnvsExecutionResult } from './envs-execution-result';
export interface EnvResult<T extends ServiceExecutionResult> {
    env: EnvRuntime;
    data?: T;
    error?: Error;
}
export declare class Runtime {
    readonly runtimeEnvs: EnvRuntime[];
    private logger;
    constructor(runtimeEnvs: EnvRuntime[], logger: Logger);
    runEnv<T>(envRuntimeId: string, service: EnvService<T>, options?: {
        [key: string]: any;
    }): Promise<EnvsExecutionResult<T>>;
    runOnce<T>(service: EnvService<T>, options?: {
        [key: string]: any;
    }): Promise<any>;
    run<T>(service: EnvService<T>, options?: {
        [key: string]: any;
    }, runtimes?: EnvRuntime[]): Promise<EnvsExecutionResult<T>>;
}
