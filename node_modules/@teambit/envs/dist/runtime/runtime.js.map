{"version":3,"sources":["runtime.ts"],"names":["Runtime","constructor","runtimeEnvs","logger","runEnv","envRuntimeId","service","options","envRuntime","find","runtime","id","ComponentID","fromString","withoutVersion","_legacy","toStringWithoutVersion","EnvNotFoundInRuntime","run","runOnce","Error","envsExecutionContext","map","env","ExecutionContext","serviceResult","runtimes","errors","contexts","data","err","error","message","consoleFailure","name","push","EnvsExecutionResult"],"mappings":";;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAQO,MAAMA,OAAN,CAAc;AACnBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,WAJA,EAMDC,MANC,EAOT;AAAA,SAHSD,WAGT,GAHSA,WAGT;AAAA,SADQC,MACR,GADQA,MACR;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,MAAM,CACJC,YADI,EAEJC,OAFI,EAGJC,OAHI,EAI6B;AACjC,UAAMC,UAAU,GAAG,KAAKN,WAAL,CAAiBO,IAAjB,CAAuBC,OAAD,IAAa;AACpD,YAAMC,EAAE,GAAGC,yBAAYC,UAAZ,CAAuBH,OAAO,CAACC,EAA/B,CAAX;;AACA,YAAMG,cAAc,GAAGH,EAAE,CAACI,OAAH,CAAWC,sBAAX,EAAvB;;AACA,aAAOF,cAAc,KAAKT,YAA1B;AACD,KAJkB,CAAnB;AAKA,QAAI,CAACG,UAAL,EAAiB,MAAM,KAAIS,kCAAJ,EAAyBZ,YAAzB,CAAN;AACjB,WAAO,KAAKa,GAAL,CAASZ,OAAT,EAAkBC,OAAlB,EAA2B,CAACC,UAAD,CAA3B,CAAP;AACD;;AAEY,QAAPW,OAAO,CAAIb,OAAJ,EAA4BC,OAA5B,EAA4E;AACvF,QAAI,CAACD,OAAO,CAACa,OAAb,EAAsB,MAAM,IAAIC,KAAJ,CAAU,8DAAV,CAAN;AACtB,UAAMC,oBAAoB,GAAG,KAAKnB,WAAL,CAAiBoB,GAAjB,CAAsBC,GAAD,IAAS,KAAIC,2BAAJ,EAAqB,IAArB,EAA2BD,GAA3B,CAA9B,CAA7B;AACA,UAAME,aAAa,GAAG,MAAMnB,OAAO,CAACa,OAAR,CAAgBE,oBAAhB,EAAsCd,OAAtC,CAA5B;AACA,WAAOkB,aAAP;AACD;AAED;AACF;AACA;;;AACW,QAAHP,GAAG;AACP;AACJ;AACA;AACIZ,EAAAA,OAJO;AAMP;AACJ;AACA;AACIC,EAAAA,OATO,EAUPmB,QAVO,EAW0B;AACjC,QAAI,CAACpB,OAAO,CAACY,GAAb,EAAkB,MAAM,IAAIE,KAAJ,CAAU,0DAAV,CAAN;AAClB,UAAMO,MAAe,GAAG,EAAxB;AACA,UAAMC,QAAwB,GAAG,MAAM,2BAAUF,QAAQ,IAAI,KAAKxB,WAA3B,EAAwC,MAAOqB,GAAP,IAAe;AAC5F,UAAI;AACF;AACA,cAAME,aAAa,GAAG,MAAMnB,OAAO,CAACY,GAAR,CAAY,KAAIM,2BAAJ,EAAqB,IAArB,EAA2BD,GAA3B,CAAZ,EAA6ChB,OAA7C,CAA5B;AAEA,eAAO;AACLgB,UAAAA,GADK;AAELM,UAAAA,IAAI,EAAEJ;AAFD,SAAP;AAID,OARD,CAQE,OAAOK,GAAP,EAAiB;AACjB,aAAK3B,MAAL,CAAY4B,KAAZ,CAAkBD,GAAG,CAACE,OAAtB,EAA+BF,GAA/B;AACA,aAAK3B,MAAL,CAAY8B,cAAZ,CAA4B,WAAU3B,OAAO,CAAC4B,IAAK,QAAOX,GAAG,CAACZ,EAAG,gBAAemB,GAAG,CAACE,OAAQ,EAA5F;AACAL,QAAAA,MAAM,CAACQ,IAAP,CAAYL,GAAZ;AACA,eAAO;AACLP,UAAAA,GADK;AAELQ,UAAAA,KAAK,EAAED;AAFF,SAAP;AAID;AACF,KAlBsC,CAAvC;AAoBA,WAAO,KAAIM,0CAAJ,EAAwBR,QAAxB,CAAP;AACD;;AAxEkB","sourcesContent":["import { Logger } from '@teambit/logger';\nimport { ComponentID } from '@teambit/component';\nimport mapSeries from 'p-map-series';\nimport { EnvNotFoundInRuntime } from '../exceptions';\nimport { ExecutionContext } from '../context';\nimport { EnvService, ServiceExecutionResult } from '../services';\nimport { EnvRuntime } from './env-runtime';\nimport { EnvsExecutionResult } from './envs-execution-result';\n\nexport interface EnvResult<T extends ServiceExecutionResult> {\n  env: EnvRuntime;\n  data?: T;\n  error?: Error;\n}\n\nexport class Runtime {\n  constructor(\n    /**\n     * runtime instances of the environments.\n     */\n    readonly runtimeEnvs: EnvRuntime[],\n\n    private logger: Logger\n  ) {}\n\n  /**\n   * execute a service on a specific env.\n   */\n  runEnv<T>(\n    envRuntimeId: string,\n    service: EnvService<T>,\n    options?: { [key: string]: any }\n  ): Promise<EnvsExecutionResult<T>> {\n    const envRuntime = this.runtimeEnvs.find((runtime) => {\n      const id = ComponentID.fromString(runtime.id);\n      const withoutVersion = id._legacy.toStringWithoutVersion();\n      return withoutVersion === envRuntimeId;\n    });\n    if (!envRuntime) throw new EnvNotFoundInRuntime(envRuntimeId);\n    return this.run(service, options, [envRuntime]);\n  }\n\n  async runOnce<T>(service: EnvService<T>, options?: { [key: string]: any }): Promise<any> {\n    if (!service.runOnce) throw new Error('a service must implement `runOnce()` in order to be executed');\n    const envsExecutionContext = this.runtimeEnvs.map((env) => new ExecutionContext(this, env));\n    const serviceResult = await service.runOnce(envsExecutionContext, options);\n    return serviceResult;\n  }\n\n  /**\n   * execute a service on all environments.\n   */\n  async run<T>(\n    /**\n     * environment service to execute.\n     */\n    service: EnvService<T>,\n\n    /**\n     * options to proxy to the service upon execution.\n     */\n    options?: { [key: string]: any },\n    runtimes?: EnvRuntime[]\n  ): Promise<EnvsExecutionResult<T>> {\n    if (!service.run) throw new Error('a service must implement `run()` in order to be executed');\n    const errors: Error[] = [];\n    const contexts: EnvResult<T>[] = await mapSeries(runtimes || this.runtimeEnvs, async (env) => {\n      try {\n        // @ts-ignore\n        const serviceResult = await service.run(new ExecutionContext(this, env), options);\n\n        return {\n          env,\n          data: serviceResult,\n        };\n      } catch (err: any) {\n        this.logger.error(err.message, err);\n        this.logger.consoleFailure(`service ${service.name} env ${env.id} has failed. ${err.message}`);\n        errors.push(err);\n        return {\n          env,\n          error: err,\n        };\n      }\n    });\n\n    return new EnvsExecutionResult(contexts);\n  }\n}\n"]}