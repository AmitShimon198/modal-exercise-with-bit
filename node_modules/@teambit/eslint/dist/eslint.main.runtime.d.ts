import { ESLint as ESLintLib } from 'eslint';
import { Linter, LinterContext } from '@teambit/linter';
import { Logger, LoggerMain } from '@teambit/logger';
import { EslintConfigMutator } from '@teambit/defender.eslint.config-mutator';
export declare type ESLintOptions = {
    config: ESLintLib.Options;
    pluginPath?: string;
    formatter?: string;
    extensions?: string[];
};
export declare type EslintConfigTransformContext = {
    fix: boolean;
};
export declare type EslintConfigTransformer = (config: EslintConfigMutator, context: EslintConfigTransformContext) => EslintConfigMutator;
export declare class ESLintMain {
    private logger;
    constructor(logger: Logger);
    createLinter(context: LinterContext, options: ESLintOptions, transformers?: EslintConfigTransformer[], ESLintModule?: any): Linter;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([loggerExt]: [LoggerMain]): Promise<ESLintMain>;
}
export declare function runTransformersWithContext(config: EslintConfigMutator, transformers: EslintConfigTransformer[] | undefined, context: EslintConfigTransformContext): EslintConfigMutator;
