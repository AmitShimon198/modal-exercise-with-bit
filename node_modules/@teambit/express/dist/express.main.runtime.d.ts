import { SlotRegistry } from '@teambit/harmony';
import { Logger, LoggerMain } from '@teambit/logger';
import { Express } from 'express';
import { Route } from './types';
import { MiddlewareManifest } from './middleware-manifest';
export declare type ExpressConfig = {
    port: number;
    namespace: string;
    loggerIgnorePath: string[];
};
export declare type MiddlewareSlot = SlotRegistry<MiddlewareManifest[]>;
export declare type RouteSlot = SlotRegistry<Route[]>;
export declare class ExpressMain {
    readonly config: ExpressConfig;
    private moduleSlot;
    readonly logger: Logger;
    readonly middlewareSlot: MiddlewareSlot;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    constructor(config: ExpressConfig, moduleSlot: RouteSlot, logger: Logger, middlewareSlot: MiddlewareSlot);
    listen(port?: number): Promise<void>;
    register(routes: Route[]): this;
    registerMiddleware(middlewares: MiddlewareManifest[]): this;
    private createRootRoutes;
    createApp(expressApp?: Express, options?: {
        disableBodyParser: true;
    }): Express;
    private createRoutes;
    private verbValidation;
    private catchErrorsMiddlewares;
    private bodyParser;
    static slots: (((registerFn: () => string) => SlotRegistry<Route[]>) | ((registerFn: () => string) => SlotRegistry<MiddlewareManifest[]>))[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        port: number;
        namespace: string;
        loggerIgnorePath: string[];
    };
    static provider([loggerFactory]: [LoggerMain], config: ExpressConfig, [routeSlot, middlewareSlot]: [RouteSlot, MiddlewareSlot]): Promise<ExpressMain>;
}
