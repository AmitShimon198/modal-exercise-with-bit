import { CLIMain } from '@teambit/cli';
import { Component, ComponentMain } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { FormatterService } from './formatter.service';
import { FormatTask } from './format.task';
import { FormatterOptions } from './formatter-context';
export declare type FormatterConfig = {};
export declare class FormatterMain {
    private envs;
    private formatterService;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    constructor(envs: EnvsMain, formatterService: FormatterService);
    format(components: Component[], opts: FormatterOptions): Promise<import("@teambit/envs").EnvsExecutionResult<import("./formatter").FormatResults>>;
    check(components: Component[], opts: FormatterOptions): Promise<import("@teambit/envs").EnvsExecutionResult<import("./formatter").FormatResults>>;
    private toFormatServiceOptions;
    createTask(name?: string): FormatTask;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: FormatterConfig;
    static provider([envs, cli, component, loggerAspect, workspace]: [EnvsMain, CLIMain, ComponentMain, LoggerMain, Workspace], config: FormatterConfig): Promise<FormatterMain>;
}
