{"version":3,"sources":["formatter.service.ts"],"names":["FormatterService","constructor","formatterConfig","run","context","options","mergedOpts","formatterContext","Object","assign","formatter","env","getFormatter","results","check","format"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUO,MAAMA,gBAAN,CAA4D;AAGjEC,EAAAA,WAAW,CAASC,eAAT,EAA2C;AAAA,SAAlCA,eAAkC,GAAlCA,eAAkC;AAAA,kDAF/C,WAE+C;AAAE;;AAE/C,QAAHC,GAAG,CAACC,OAAD,EAA4BC,OAA5B,EAAsF;AAC7F,UAAMC,UAAU,GAAG,wBAASD,OAAT,EAAkB,KAAKH,eAAvB,CAAnB;AACA,UAAMK,gBAAkC,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,EAA8BF,OAA9B,CAA3C;AACA,UAAMM,SAAoB,GAAGN,OAAO,CAACO,GAAR,CAAYC,YAAZ,CAAyBL,gBAAzB,CAA7B;AAEA,UAAMM,OAAO,GAAGR,OAAO,CAACS,KAAR,GAAgB,MAAMJ,SAAS,CAACI,KAAV,CAAgBP,gBAAhB,CAAtB,GAA0D,MAAMG,SAAS,CAACK,MAAV,CAAiBR,gBAAjB,CAAhF;AACA,WAAOM,OAAP;AACD;;AAZgE","sourcesContent":["import { defaults } from 'lodash';\nimport { EnvService, ExecutionContext } from '@teambit/envs';\nimport { Formatter, FormatResults } from './formatter';\nimport { FormatterContext, FormatterOptions } from './formatter-context';\nimport { FormatterConfig } from './formatter.main.runtime';\n\nexport type FormatterServiceOptions = FormatterOptions & {\n  check?: boolean;\n};\n\nexport class FormatterService implements EnvService<FormatResults> {\n  name = 'formatter';\n\n  constructor(private formatterConfig: FormatterConfig) {}\n\n  async run(context: ExecutionContext, options: FormatterServiceOptions): Promise<FormatResults> {\n    const mergedOpts = defaults(options, this.formatterConfig);\n    const formatterContext: FormatterContext = Object.assign({}, mergedOpts, context);\n    const formatter: Formatter = context.env.getFormatter(formatterContext);\n\n    const results = options.check ? await formatter.check(formatterContext) : await formatter.format(formatterContext);\n    return results;\n  }\n}\n"]}