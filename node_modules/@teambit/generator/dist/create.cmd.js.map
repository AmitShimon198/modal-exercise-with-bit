{"version":3,"sources":["create.cmd.ts"],"names":["CreateCmd","constructor","generator","report","templateName","componentNames","options","results","generateComponentTemplate","title","length","componentsData","map","result","chalk","bold","id","toString","dir","envId","join","footer","green"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUO,MAAMA,SAAN,CAAmC;AAcxCC,EAAAA,WAAW,CAASC,SAAT,EAAmC;AAAA,SAA1BA,SAA0B,GAA1BA,SAA0B;AAAA,kDAbvC,2CAauC;AAAA,yDAZhC,wCAYgC;AAAA,8DAX3B,EAW2B;AAAA,mDAVtC,EAUsC;AAAA,oDATrC,IASqC;AAAA,mDARtC,aAQsC;AAAA,qDAPpC,CACR,CAAC,GAAD,EAAM,oBAAN,EAA6B,iEAA7B,CADQ,EAER,CAAC,GAAD,EAAM,gBAAN,EAAyB,iFAAzB,CAFQ,EAGR,CAAC,GAAD,EAAM,iBAAN,EAAyB,qFAAzB,CAHQ,EAIR,CAAC,GAAD,EAAM,eAAN,EAAuB,qFAAvB,CAJQ,CAOoC;AAAE;;AAEpC,QAANC,MAAM,CAAC,CAACC,YAAD,EAAeC,cAAf,CAAD,EAAqDC,OAArD,EAA6E;AACvF,UAAMC,OAAO,GAAG,MAAM,KAAKL,SAAL,CAAeM,yBAAf,CAAyCH,cAAzC,EAAyDD,YAAzD,EAAuEE,OAAvE,CAAtB;AACA,UAAMG,KAAK,GAAI,iBAAgBF,OAAO,CAACG,MAAO,4BAA9C;AAEA,UAAMC,cAAc,GAAGJ,OAAO,CAC3BK,GADoB,CACfC,MAAD,IAAY;AACf,aAAQ,GAAEC,iBAAMC,IAAN,CAAWF,MAAM,CAACG,EAAP,CAAUC,QAAV,EAAX,CAAiC;AACnD,gBAAgBJ,MAAM,CAACK,GAAI;AAC3B,gBAAgBL,MAAM,CAACM,KAAM;AAC7B,CAHQ;AAID,KANoB,EAOpBC,IAPoB,CAOf,IAPe,CAAvB;AAQA,UAAMC,MAAM,GAAI,uKAAhB;AAEA,WAAQ,GAAEP,iBAAMQ,KAAN,CAAYb,KAAZ,CAAmB,OAAME,cAAe,OAAMU,MAAO,EAA/D;AACD;;AA/BuC","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { GeneratorMain } from './generator.main.runtime';\n\nexport type CreateOptions = {\n  namespace?: string;\n  aspect?: string;\n  scope?: string;\n  path?: string;\n};\n\nexport class CreateCmd implements Command {\n  name = 'create <templateName> <componentNames...>';\n  description = 'create a new component from a template';\n  shortDescription = '';\n  alias = '';\n  loader = true;\n  group = 'development';\n  options = [\n    ['n', 'namespace <string>', `sets the component's namespace and nested dirs inside the scope`],\n    ['s', 'scope <string>', `sets the component's scope-name. if not entered, the default-scope will be used`],\n    ['a', 'aspect <string>', 'aspect-id of the template. helpful when multiple aspects use the same template name'],\n    ['p', 'path <string>', 'relative path in the workspace. by default the path is `<scope>/<namespace>/<name>`'],\n  ] as CommandOptions;\n\n  constructor(private generator: GeneratorMain) {}\n\n  async report([templateName, componentNames]: [string, string[]], options: CreateOptions) {\n    const results = await this.generator.generateComponentTemplate(componentNames, templateName, options);\n    const title = `the following ${results.length} component(s) were created`;\n\n    const componentsData = results\n      .map((result) => {\n        return `${chalk.bold(result.id.toString())}\n    location: ${result.dir}\n    env:      ${result.envId}\n`;\n      })\n      .join('\\n');\n    const footer = `env configuration is according to workspace variants. learn more at https://harmony-docs.bit.dev/building-with-bit/environments/#configure-environment-for-components`;\n\n    return `${chalk.green(title)}\\n\\n${componentsData}\\n\\n${footer}`;\n  }\n}\n"]}