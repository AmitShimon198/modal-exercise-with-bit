import { GraphqlMain } from '@teambit/graphql';
import { CLIMain } from '@teambit/cli';
import { Workspace } from '@teambit/workspace';
import { EnvsMain } from '@teambit/envs';
import { Component } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { ComponentTemplate } from './component-template';
import { CreateOptions } from './create.cmd';
import { GenerateResult } from './component-generator';
import { WorkspaceTemplate } from './workspace-template';
import { NewOptions } from './new.cmd';
export declare type ComponentTemplateSlot = SlotRegistry<ComponentTemplate[]>;
export declare type WorkspaceTemplateSlot = SlotRegistry<WorkspaceTemplate[]>;
export declare type TemplateDescriptor = {
    aspectId: string;
    name: string;
    description?: string;
    hidden?: boolean;
};
export declare type GeneratorConfig = {
    aspects: string[];
};
export declare class GeneratorMain {
    private componentTemplateSlot;
    private workspaceTemplateSlot;
    private config;
    private workspace;
    private envs;
    private aspectLoader;
    private aspectLoaded;
    constructor(componentTemplateSlot: ComponentTemplateSlot, workspaceTemplateSlot: WorkspaceTemplateSlot, config: GeneratorConfig, workspace: Workspace, envs: EnvsMain, aspectLoader: AspectLoaderMain);
    registerComponentTemplate(templates: ComponentTemplate[]): this;
    registerWorkspaceTemplate(templates: WorkspaceTemplate[]): this;
    listTemplates(): Promise<TemplateDescriptor[]>;
    listComponentTemplates(): Promise<TemplateDescriptor[]>;
    isRunningInsideWorkspace(): boolean;
    getComponentTemplateByAspect(aspectId: string): ComponentTemplate[];
    getComponentTemplate(name: string, aspectId?: string): ComponentTemplate | undefined;
    findTemplateInGlobalScope(aspectId: string, name?: string): Promise<WorkspaceTemplate | undefined>;
    findTemplateInOtherWorkspace(workspacePath: string, name: string, aspectId?: string): Promise<WorkspaceTemplate | undefined>;
    getWorkspaceTemplate(name: string, aspectId?: string): Promise<{
        workspaceTemplate: WorkspaceTemplate;
        aspect?: Component;
    }>;
    searchRegisteredWorkspaceTemplate(name?: string, aspectId?: string): Promise<WorkspaceTemplate | undefined>;
    generateComponentTemplate(componentNames: string[], templateName: string, options: CreateOptions): Promise<GenerateResult[]>;
    generateWorkspaceTemplate(workspaceName: string, templateName: string, options: NewOptions): Promise<string>;
    private getAllComponentTemplatesFlattened;
    private getAllWorkspaceTemplatesFlattened;
    private loadAspects;
    static slots: (((registerFn: () => string) => SlotRegistry<ComponentTemplate[]>) | ((registerFn: () => string) => SlotRegistry<WorkspaceTemplate[]>))[];
    static dependencies: import("@teambit/bit").Aspect[];
    static runtime: import("@teambit/bit").RuntimeDefinition;
    static provider([workspace, cli, graphql, envs, aspectLoader]: [Workspace, CLIMain, GraphqlMain, EnvsMain, AspectLoaderMain], config: GeneratorConfig, [componentTemplateSlot, workspaceTemplateSlot]: [ComponentTemplateSlot, WorkspaceTemplateSlot]): Promise<GeneratorMain>;
}
