import { Component } from '@teambit/component';
import { Graph } from 'cleargraph';
import { Dependency } from '../model/dependency';
import { DuplicateDependency } from '../duplicate-dependency';
export declare const DEPENDENCIES_TYPES: string[];
declare type Node = {
    id: string;
    node: Component;
};
declare type Edge = {
    sourceId: string;
    targetId: string;
    edge: Dependency;
};
export declare class ComponentGraph extends Graph<Component, Dependency> {
    versionMap: Map<string, {
        allVersionNodes: string[];
        latestVersionNode: string;
    }>;
    constructor(nodes?: Node[], edges?: Edge[]);
    protected create(nodes?: Node[], edges?: Edge[]): this;
    findDuplicateDependencies(): Map<string, DuplicateDependency>;
    buildFromCleargraph(graph: Graph<Component, Dependency>): ComponentGraph;
    runtimeOnly(componentIds: string[]): this;
    _calculateVersionMap(): Map<string, {
        allVersionNodes: string[];
        latestVersionNode: string;
    }>;
}
export {};
