{"version":3,"sources":["component-graph.ts"],"names":["DEPENDENCIES_TYPES","ComponentGraph","Graph","constructor","nodes","edges","versionMap","Map","create","findDuplicateDependencies","duplicateDependencies","compFullName","versions","allVersionNodes","length","versionSubgraphs","notLatestVersions","filter","version","latestVersionNode","forEach","predecessors","predecessorsSubgraph","immediatePredecessors","map","predecessor","id","subGraph","buildFromCleargraph","versionSubgraph","versionId","immediateDependents","push","duplicateDep","DuplicateDependency","set","graph","newGraph","newGraphNodes","node","attr","newGraphEdges","edge","sourceId","targetId","setNodes","setEdges","runtimeOnly","componentIds","successorsSubgraph","type","_calculateVersionMap","comp","compKey","_legacy","toStringWithoutVersion","has","value","get","Object","prototype","hasOwnProperty","call","currentCompVersion","getVersion","latestCompVersion","isLaterThan"],"mappings":"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","sourcesContent":["import { Component } from '@teambit/component';\nimport { Graph } from 'cleargraph';\n\nimport { Dependency } from '../model/dependency';\nimport { DuplicateDependency, VersionSubgraph } from '../duplicate-dependency';\n\nexport const DEPENDENCIES_TYPES = ['dependencies', 'devDependencies'];\n\ntype Node = { id: string; node: Component };\ntype Edge = { sourceId: string; targetId: string; edge: Dependency };\n\nexport class ComponentGraph extends Graph<Component, Dependency> {\n  versionMap: Map<string, { allVersionNodes: string[]; latestVersionNode: string }>;\n  constructor(nodes: Node[] = [], edges: Edge[] = []) {\n    super(nodes, edges);\n    this.versionMap = new Map();\n  }\n\n  protected create(nodes: Node[] = [], edges: Edge[] = []): this {\n    return new ComponentGraph(nodes, edges) as this;\n  }\n\n  findDuplicateDependencies(): Map<string, DuplicateDependency> {\n    const duplicateDependencies: Map<string, DuplicateDependency> = new Map();\n    for (const [compFullName, versions] of this.versionMap) {\n      if (versions.allVersionNodes.length > 1) {\n        const versionSubgraphs: VersionSubgraph[] = [];\n        const notLatestVersions = versions.allVersionNodes.filter((version) => version !== versions.latestVersionNode);\n        notLatestVersions.forEach((version) => {\n          const predecessors = this.predecessorsSubgraph(version);\n          const immediatePredecessors = this.predecessors(version).map((predecessor) => predecessor.id);\n          const subGraph = this.buildFromCleargraph(predecessors);\n          const versionSubgraph: VersionSubgraph = {\n            versionId: version,\n            subGraph,\n            // TODO: validate that this is working correctly\n            immediateDependents: immediatePredecessors,\n          };\n          versionSubgraphs.push(versionSubgraph);\n        });\n        if (versionSubgraphs.length > 0) {\n          const duplicateDep = new DuplicateDependency(versions.latestVersionNode, versionSubgraphs);\n          duplicateDependencies.set(compFullName, duplicateDep);\n        }\n      }\n    }\n    return duplicateDependencies;\n  }\n\n  buildFromCleargraph(graph: Graph<Component, Dependency>): ComponentGraph {\n    // TODO: once cleargraph constructor and graph.nodes are consistent we should just use this line\n    // this.create(graph.nodes, graph.edges)\n\n    const newGraph = new ComponentGraph();\n    const newGraphNodes: Node[] = graph.nodes.map((node) => {\n      return {\n        id: node.id,\n        node: node.attr,\n      };\n    });\n    const newGraphEdges: Edge[] = graph.edges.map((edge) => {\n      return {\n        sourceId: edge.sourceId,\n        targetId: edge.targetId,\n        edge: edge.attr,\n      };\n    });\n    newGraph.setNodes(newGraphNodes);\n    newGraph.setEdges(newGraphEdges);\n\n    return newGraph;\n  }\n\n  runtimeOnly(componentIds: string[]) {\n    return this.successorsSubgraph(componentIds, (edge) => edge.attr.type === 'runtime');\n  }\n\n  _calculateVersionMap() {\n    const versionMap: Map<string, { allVersionNodes: string[]; latestVersionNode: string }> = new Map();\n    for (const node of this.nodes) {\n      const comp = node.attr;\n      const compKey = node.id;\n      const compFullName = comp.id._legacy.toStringWithoutVersion();\n      if (!versionMap.has(compFullName)) {\n        versionMap.set(compFullName, {\n          allVersionNodes: [compKey],\n          latestVersionNode: compKey,\n        });\n      } else {\n        const value = versionMap.get(compFullName);\n        if (value) {\n          if (Object.prototype.hasOwnProperty.call(value, 'allVersionNodes')) {\n            value.allVersionNodes.push(compKey);\n          }\n          const currentCompVersion = this.node(compKey)?.attr.id._legacy.getVersion();\n          const latestCompVersion = this.node(value.latestVersionNode)?.attr.id._legacy.getVersion();\n          if (!!currentCompVersion && !!latestCompVersion && currentCompVersion.isLaterThan(latestCompVersion)) {\n            value.latestVersionNode = compKey;\n          }\n        }\n      }\n    }\n    return versionMap;\n  }\n}\n"]}