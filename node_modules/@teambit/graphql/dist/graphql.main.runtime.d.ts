/// <reference types="node" />
import { Harmony, SlotRegistry } from '@teambit/harmony';
import { Logger, LoggerMain } from '@teambit/logger';
import { Express } from 'express';
import { PubSub } from 'graphql-subscriptions';
import { Server } from 'http';
import { GraphQLServer } from './graphql-server';
import { Schema } from './schema';
export declare enum Verb {
    WRITE = "write",
    READ = "read"
}
export declare type GraphQLConfig = {
    port: number;
    subscriptionsPortRange: number[];
    subscriptionsPath: string;
};
export declare type GraphQLServerSlot = SlotRegistry<GraphQLServer>;
export declare type SchemaSlot = SlotRegistry<Schema>;
export declare type GraphQLServerOptions = {
    schemaSlot?: SchemaSlot;
    app?: Express;
    graphiql?: boolean;
    remoteSchemas?: GraphQLServer[];
    subscriptionsPortRange?: number[];
    onWsConnect?: Function;
};
export declare class GraphqlMain {
    readonly config: GraphQLConfig;
    private moduleSlot;
    private context;
    readonly pubsub: PubSub;
    readonly logger: Logger;
    private graphQLServerSlot;
    constructor(config: GraphQLConfig, moduleSlot: SchemaSlot, context: Harmony, pubsub: PubSub, logger: Logger, graphQLServerSlot: GraphQLServerSlot);
    private modules;
    createServer(options: GraphQLServerOptions): Promise<Server>;
    registerServer(server: GraphQLServer): this;
    listen(port?: number, server?: Server, app?: Express): Promise<void>;
    register(schema: Schema): this;
    private getPort;
    private createSubscription;
    private proxySubscription;
    private createRootModule;
    private buildModules;
    private getModuleDependencies;
    static slots: (((registerFn: () => string) => SlotRegistry<Schema>) | ((registerFn: () => string) => SlotRegistry<GraphQLServer>))[];
    static defaultConfig: {
        port: number;
        subscriptionsPortRange: number[];
        subscriptionsPath: string;
    };
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([loggerFactory]: [LoggerMain], config: GraphQLConfig, [moduleSlot, graphQLServerSlot]: [SchemaSlot, GraphQLServerSlot], context: Harmony): Promise<GraphqlMain>;
}
