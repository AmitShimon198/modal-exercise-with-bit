import { ReactNode } from 'react';
import { ApolloClient } from '@apollo/client';
import type { NormalizedCacheObject } from '@apollo/client';
import { GraphqlRenderLifecycle } from './render-lifecycle';
export declare type GraphQLClient<T> = ApolloClient<T>;
declare type ClientOptions = {
    state?: NormalizedCacheObject;
    subscriptionUri?: string;
};
export declare class GraphqlUI {
    createClient(uri: string, { state, subscriptionUri }?: ClientOptions): ApolloClient<NormalizedCacheObject>;
    createSsrClient({ serverUrl, headers }: {
        serverUrl: string;
        headers: any;
    }): ApolloClient<NormalizedCacheObject>;
    private createCache;
    private createLink;
    getProvider: ({ client, children }: {
        client: GraphQLClient<any>;
        children: ReactNode;
    }) => JSX.Element;
    renderHooks: GraphqlRenderLifecycle;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: never[];
    static slots: never[];
    static provider(): Promise<GraphqlUI>;
}
export {};
