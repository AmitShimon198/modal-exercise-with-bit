import { ReactNode } from 'react';
import type { NormalizedCacheObject } from '@apollo/client';
import type { BrowserData, RenderLifecycle } from '@teambit/ui';
import type { GraphqlUI, GraphQLClient } from './graphql.ui.runtime';
declare type RenderContext = {
    client: GraphQLClient<any>;
};
export declare class GraphqlRenderLifecycle implements RenderLifecycle<RenderContext, {
    state?: NormalizedCacheObject;
}> {
    private graphqlUI;
    constructor(graphqlUI: GraphqlUI);
    serverInit: ({ browser, server }?: {
        browser?: BrowserData | undefined;
        server?: {
            port: number;
        } | undefined;
    }) => RenderContext | undefined;
    onBeforeRender: (ctx: RenderContext, app: ReactNode) => Promise<void>;
    serialize: (ctx?: RenderContext | undefined) => {
        json: string;
    } | undefined;
    deserialize: (raw?: string | undefined) => {
        state: NormalizedCacheObject | undefined;
    };
    browserInit: ({ state }?: {
        state?: NormalizedCacheObject | undefined;
    }) => {
        client: import("@apollo/client").ApolloClient<NormalizedCacheObject>;
    };
    private BrowserGqlProvider;
    reactContext: ({ renderCtx, children }: {
        renderCtx?: RenderContext | undefined;
        children: ReactNode;
    }) => JSX.Element;
}
export {};
