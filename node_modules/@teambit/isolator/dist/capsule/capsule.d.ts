import { NodeFS } from '@teambit/any-fs';
import { Capsule as CapsuleTemplate, Console, Exec, State } from '@teambit/capsule';
import { Component } from '@teambit/component';
import FsContainer, { BitExecOption } from './container';
import ContainerExec from './container-exec';
export default class Capsule extends CapsuleTemplate<Exec, NodeFS> {
    protected container: FsContainer;
    readonly fs: NodeFS;
    readonly console: Console;
    readonly state: State;
    readonly component: Component;
    private _wrkDir;
    constructor(container: FsContainer, fs: NodeFS, console: Console, state: State, component: Component);
    get wrkDir(): string;
    get path(): string;
    start(): Promise<any>;
    execNode(executable: string, args: any, exec: ContainerExec): Promise<ContainerExec>;
    typedExec(opts: BitExecOption, exec?: ContainerExec): Promise<ContainerExec>;
    outputFile(file: string, data: any, options: any): Promise<any>;
    removePath(dir: string): Promise<any>;
    symlink(src: string, dest: string): Promise<any>;
    execute(cmd: string, options?: Record<string, any> | null | undefined): Promise<unknown>;
    getAllFilesPaths(dir?: string, options?: {
        ignore?: string[];
    }): any;
    static getCapsuleDirName(component: Component, config?: {
        alwaysNew?: boolean;
        name?: string;
    }): string;
    static getCapsuleRootDir(component: Component, baseDir: string, config?: {
        alwaysNew?: boolean;
        name?: string;
    }): string;
    static createFromComponent(component: Component, baseDir: string, config?: {
        alwaysNew?: boolean;
        name?: string;
    }): Promise<Capsule>;
}
