import { ComponentID } from '@teambit/component';
import type { ComponentMain, ComponentFactory } from '@teambit/component';
import type { GraphBuilder } from '@teambit/graph';
import { DependencyResolverMain, LinkingOptions } from '@teambit/dependency-resolver';
import { Logger, LoggerMain } from '@teambit/logger';
import LegacyScope from '@teambit/legacy/dist/scope/scope';
import { PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';
import { Network } from './network';
export declare type ListResults = {
    workspace: string;
    capsules: string[];
};
export declare type IsolateComponentsInstallOptions = {
    installPackages?: boolean;
    dedupe?: boolean;
    copyPeerToRuntimeOnComponents?: boolean;
    copyPeerToRuntimeOnRoot?: boolean;
    installTeambitBit?: boolean;
};
declare type CreateGraphOptions = {
    includeFromNestedHosts?: boolean;
    host?: ComponentFactory;
};
export declare type IsolateComponentsOptions = CreateGraphOptions & {
    name?: string;
    baseDir?: string;
    alwaysNew?: boolean;
    installOptions?: IsolateComponentsInstallOptions;
    linkingOptions?: LinkingOptions;
    emptyRootDir?: boolean;
    skipIfExists?: boolean;
    getExistingAsIs?: boolean;
    cachePackagesOnCapsulesRoot?: boolean;
    seedersOnly?: boolean;
    host?: ComponentFactory;
};
export declare class IsolatorMain {
    private dependencyResolver;
    private logger;
    private componentAspect;
    private graphBuilder;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {};
    _componentsPackagesVersionCache: {
        [idStr: string]: string;
    };
    static provider([dependencyResolver, loggerExtension, componentAspect, graphAspect]: [
        DependencyResolverMain,
        LoggerMain,
        ComponentMain,
        GraphBuilder
    ]): Promise<IsolatorMain>;
    constructor(dependencyResolver: DependencyResolverMain, logger: Logger, componentAspect: ComponentMain, graphBuilder: GraphBuilder);
    isolateComponents(seeders: ComponentID[], opts?: IsolateComponentsOptions, legacyScope?: LegacyScope): Promise<Network>;
    private createGraph;
    private createCapsules;
    private installInCapsules;
    private linkInCapsules;
    private getCapsulesWithModifiedPackageJson;
    private writeComponentsInCapsules;
    private getPeersOnlyPolicy;
    private getComponentWriteParams;
    private toComponentMap;
    list(workspacePath: string): Promise<ListResults>;
    getCapsulesRootDir(baseDir: string): PathOsBasedAbsolute;
    private createCapsulesFromComponents;
    private wereDependenciesInPackageJsonChanged;
    private getCapsulesPreviousPackageJson;
    private updateWithCurrentPackageJsonData;
    private getCurrentPackageJson;
    private getComponentPackageVersionWithCache;
}
export {};
