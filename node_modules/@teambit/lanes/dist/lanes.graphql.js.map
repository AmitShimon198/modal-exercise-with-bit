{"version":3,"sources":["lanes.graphql.ts"],"names":["lanesSchema","lanesMain","typeDefs","resolvers","Lanes","getLanes","lanes","lanesResults","map","lane","name","components","c","id","toString","head","isMerged","Boolean","getLaneByName","laneResult","getCurrentLaneName","getCurrentLane","getDiff","values","options","getDiffResults","compsWithDiff","item","Query"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAGO,SAASA,WAAT,CAAqBC,SAArB,EAAmD;AACxD,SAAO;AACLC,IAAAA,QAAQ,EAAE,0BAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAnDS;AAoDLC,IAAAA,SAAS,EAAE;AACTC,MAAAA,KAAK,EAAE;AACLC,QAAAA,QAAQ,EAAE,MAAOC,KAAP,IAA4B;AACpC,gBAAMC,YAAY,GAAG,MAAMD,KAAK,CAACD,QAAN,CAAe,EAAf,CAA3B;AACA,iBAAOE,YAAY,CAACC,GAAb,CAAkBC,IAAD,KAAW;AACjCC,YAAAA,IAAI,EAAED,IAAI,CAACC,IADsB;AAEjCC,YAAAA,UAAU,EAAEF,IAAI,CAACE,UAAL,CAAgBH,GAAhB,CAAqBI,CAAD,KAAQ;AAAEC,cAAAA,EAAE,EAAED,CAAC,CAACC,EAAF,CAAKC,QAAL,EAAN;AAAuBC,cAAAA,IAAI,EAAEH,CAAC,CAACG,IAAF,CAAOD,QAAP;AAA7B,aAAR,CAApB,CAFqB;AAGjCE,YAAAA,QAAQ,EAAEC,OAAO,CAACR,IAAI,CAACO,QAAN;AAHgB,WAAX,CAAjB,CAAP;AAKD,SARI;AASLE,QAAAA,aAAa,EAAE,OAAOZ,KAAP,EAAyB;AAAEI,UAAAA;AAAF,SAAzB,KAAwD;AACrE,gBAAMH,YAAY,GAAG,MAAMD,KAAK,CAACD,QAAN,CAAe;AAAEK,YAAAA;AAAF,WAAf,CAA3B;AACA,gBAAMS,UAAU,GAAGZ,YAAY,CAAC,CAAD,CAA/B;AACA,iBAAO;AACLG,YAAAA,IAAI,EAAES,UAAU,CAACT,IADZ;AAELC,YAAAA,UAAU,EAAEQ,UAAU,CAACR,UAAX,CAAsBH,GAAtB,CAA2BI,CAAD,KAAQ;AAAEC,cAAAA,EAAE,EAAED,CAAC,CAACC,EAAF,CAAKC,QAAL,EAAN;AAAuBC,cAAAA,IAAI,EAAEH,CAAC,CAACG,IAAF,CAAOD,QAAP;AAA7B,aAAR,CAA1B,CAFP;AAGLE,YAAAA,QAAQ,EAAEC,OAAO,CAACE,UAAU,CAACH,QAAZ;AAHZ,WAAP;AAKD,SAjBI;AAkBLI,QAAAA,kBAAkB,EAAGd,KAAD,IAAsB;AACxC,iBAAOA,KAAK,CAACe,cAAN,EAAP;AACD,SApBI;AAqBLC,QAAAA,OAAO,EAAE,OAAOhB,KAAP,EAAyB;AAAEiB,UAAAA,MAAF;AAAUC,UAAAA;AAAV,SAAzB,KAAqG;AAC5G,gBAAMC,cAAc,GAAG,MAAMnB,KAAK,CAACgB,OAAN,CAAcC,MAAd,EAAsBC,OAAtB,CAA7B;AACA,iDACKC,cADL;AAEEC,YAAAA,aAAa,EAAED,cAAc,CAACC,aAAf,CAA6BlB,GAA7B,CAAkCmB,IAAD,oCAAgBA,IAAhB;AAAsBd,cAAAA,EAAE,EAAEc,IAAI,CAACd,EAAL,CAAQC,QAAR;AAA1B,cAAjC;AAFjB;AAID;AA3BI,OADE;AA8BTc,MAAAA,KAAK,EAAE;AACLtB,QAAAA,KAAK,EAAE,MAAML;AADR;AA9BE;AApDN,GAAP;AAuFD","sourcesContent":["import { Schema } from '@teambit/graphql';\nimport gql from 'graphql-tag';\nimport { LanesMain } from './lanes.main.runtime';\n\nexport function lanesSchema(lanesMain: LanesMain): Schema {\n  return {\n    typeDefs: gql`\n      type CompLaneData {\n        id: String!\n        head: String!\n      }\n\n      type LanesData {\n        name: String!\n        components: [CompLaneData]\n        isMerged: Boolean\n      }\n\n      type FileDiff {\n        filePath: String!\n        diffOutput: String\n      }\n\n      type FieldsDiff {\n        fieldName: String!\n        diffOutput: String\n      }\n\n      type DiffResults {\n        id: String\n        hasDiff: Boolean\n        filesDiff: [FileDiff]\n        fieldsDiff: [FieldsDiff]\n      }\n\n      type GetDiffResult {\n        newComps: [String]\n        compsWithNoChanges: [String]\n        toLaneName: String\n        compsWithDiff: [DiffResults]\n      }\n\n      input DiffOptions {\n        color: Boolean\n      }\n\n      type Lanes {\n        getLanes: [LanesData]\n        getLaneByName(name: String): LanesData\n        getCurrentLaneName: String\n        getDiff(values: [String], options: DiffOptions): GetDiffResult\n      }\n\n      type Query {\n        lanes: Lanes\n      }\n    `,\n    resolvers: {\n      Lanes: {\n        getLanes: async (lanes: LanesMain) => {\n          const lanesResults = await lanes.getLanes({});\n          return lanesResults.map((lane) => ({\n            name: lane.name,\n            components: lane.components.map((c) => ({ id: c.id.toString(), head: c.head.toString() })),\n            isMerged: Boolean(lane.isMerged),\n          }));\n        },\n        getLaneByName: async (lanes: LanesMain, { name }: { name: string }) => {\n          const lanesResults = await lanes.getLanes({ name });\n          const laneResult = lanesResults[0];\n          return {\n            name: laneResult.name,\n            components: laneResult.components.map((c) => ({ id: c.id.toString(), head: c.head.toString() })),\n            isMerged: Boolean(laneResult.isMerged),\n          };\n        },\n        getCurrentLaneName: (lanes: LanesMain) => {\n          return lanes.getCurrentLane();\n        },\n        getDiff: async (lanes: LanesMain, { values, options }: { values: string[]; options: { color?: boolean } }) => {\n          const getDiffResults = await lanes.getDiff(values, options);\n          return {\n            ...getDiffResults,\n            compsWithDiff: getDiffResults.compsWithDiff.map((item) => ({ ...item, id: item.id.toString() })),\n          };\n        },\n      },\n      Query: {\n        lanes: () => lanesMain,\n      },\n    },\n  };\n}\n"]}