"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = fetch;

function _path2() {
  const data = _interopRequireDefault(require("ramda/src/path"));

  _path2 = function () {
    return data;
  };

  return data;
}

function _analytics() {
  const data = require("../../../analytics/analytics");

  _analytics = function () {
    return data;
  };

  return data;
}

function _loader() {
  const data = _interopRequireDefault(require("../../../cli/loader"));

  _loader = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _importComponents() {
  const data = _interopRequireDefault(require("../../../consumer/component-ops/import-components"));

  _importComponents = function () {
    return data;
  };

  return data;
}

function _lanesIsDisabled() {
  const data = require("../../../consumer/lanes/exceptions/lanes-is-disabled");

  _lanesIsDisabled = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _laneId() {
  const data = require("../../../lane-id/lane-id");

  _laneId = function () {
    return data;
  };

  return data;
}

async function fetch(ids, lanes, components, fromOriginalScope) {
  if (!lanes && !components) {
    throw new (_generalError().default)(`please provide the type of objects you would like to pull, the options are --components and --lanes`);
  }

  _loader().default.start('fetching objects...');

  const consumer = await (0, _consumer().loadConsumer)();

  if (consumer.isLegacy) {
    throw new (_lanesIsDisabled().LanesIsDisabled)();
  }

  const importOptions = {
    ids,
    objectsOnly: true,
    verbose: false,
    withEnvironments: false,
    writePackageJson: false,
    writeConfig: false,
    writeDists: false,
    override: false,
    installNpmPackages: false,
    fromOriginalScope
  };
  const importComponents = new (_importComponents().default)(consumer, importOptions);

  if (lanes) {
    const laneIds = await getLaneIds();
    importOptions.lanes = {
      laneIds
    };
  }

  const {
    dependencies,
    envComponents,
    importDetails
  } = await importComponents.importComponents();
  const bitIds = dependencies.map((0, _path2().default)(['component', 'id']));

  _analytics().Analytics.setExtraData('num_components', bitIds.length);

  await consumer.onDestroy();
  return {
    dependencies,
    envComponents,
    importDetails
  };

  async function getLaneIds() {
    if (ids.length) {
      return ids.map(id => {
        const trackLane = consumer.scope.lanes.getRemoteTrackedDataByLocalLane(id);
        if (trackLane) return _laneId().RemoteLaneId.from(trackLane.remoteLane, trackLane.remoteScope); // assuming it's a remote

        return _laneId().RemoteLaneId.parse(id);
      });
    }

    return consumer.scope.objects.remoteLanes.getAllRemoteLaneIds();
  }
}