"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.mergeReport = mergeReport;
exports.default = exports.applyVersionReport = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _constants() {
  const data = require("../../../constants");

  _constants = function () {
    return data;
  };

  return data;
}

function _mergeVersion() {
  const data = require("../../../consumer/versions-ops/merge-version");

  _mergeVersion = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _snapCmd() {
  const data = require("./snap-cmd");

  _snapCmd = function () {
    return data;
  };

  return data;
}

function _featureToggle() {
  const data = require("../../../api/consumer/lib/feature-toggle");

  _featureToggle = function () {
    return data;
  };

  return data;
}

const applyVersionReport = (components, addName = true, showVersion = false) => {
  const tab = addName ? '\t' : '';
  return components.map(component => {
    const name = showVersion ? component.id.toString() : component.id.toStringWithoutVersion();
    const files = Object.keys(component.filesStatus).map(file => {
      const note = component.filesStatus[file] === _mergeVersion().FileStatus.manual ? _chalk().default.white('automatic merge failed. please fix conflicts manually and then tag the results.') : '';
      return `${tab}${component.filesStatus[file]} ${_chalk().default.bold(file)} ${note}`;
    }).join('\n');
    return `${addName ? name : ''}\n${_chalk().default.cyan(files)}`;
  }).join('\n\n');
};

exports.applyVersionReport = applyVersionReport;

class Merge {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'merge [values...]');
    (0, _defineProperty2().default)(this, "shortDescription", 'merge changes of different component versions');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "description", `merge changes of different component versions
  \`bit merge <version> [ids...]\` => merge changes of the given version into the checked out version
  \`bit merge [ids...]\` => EXPERIMENTAL. merge changes of the remote head into local, optionally use '--abort' or '--resolve'
  ${(0, _constants().WILDCARD_HELP)('merge 0.0.1')}`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['', 'ours', 'in case of a conflict, override the used version with the current modification'], ['', 'theirs', 'in case of a conflict, override the current modification with the specified version'], ['', 'manual', 'in case of a conflict, leave the files with a conflict state to resolve them manually later'], ['', 'abort', 'EXPERIMENTAL. in case of an unresolved merge, revert to the state before the merge began'], ['', 'resolve', 'EXPERIMENTAL. mark an unresolved merge as resolved and create a new snap with the changes'], ['', 'no-snap', 'EXPERIMENTAL. do not auto snap in case the merge completed without conflicts'], ['', 'build', 'in case of snap during the merge, run the build-pipeline (similar to bit snap --build)'], ['m', 'message <message>', 'EXPERIMENTAL. override the default message for the auto snap']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }

  action([values = []], {
    ours = false,
    theirs = false,
    manual = false,
    abort = false,
    resolve = false,
    build = false,
    noSnap = false,
    message
  }) {
    build = (0, _featureToggle().isFeatureEnabled)(_featureToggle().BUILD_ON_CI) ? Boolean(build) : true;
    const mergeStrategy = (0, _mergeVersion().getMergeStrategy)(ours, theirs, manual);
    if (abort && resolve) throw new (_generalError().default)('unable to use "abort" and "resolve" flags together');
    if (noSnap && message) throw new (_generalError().default)('unable to use "noSnap" and "message" flags together');
    return (0, _consumer().merge)(values, mergeStrategy, abort, resolve, noSnap, message, build);
  }

  report({
    components,
    failedComponents,
    version,
    resolvedComponents,
    abortedComponents,
    mergeSnapResults
  }) {
    if (resolvedComponents) {
      const title = 'successfully resolved component(s)\n';
      const componentsStr = resolvedComponents.map(c => c.id.toStringWithoutVersion()).join('\n');
      return _chalk().default.underline(title) + _chalk().default.green(componentsStr);
    }

    if (abortedComponents) {
      const title = 'successfully aborted the merge of the following component(s)\n';
      const componentsStr = abortedComponents.map(c => c.id.toStringWithoutVersion()).join('\n');
      return _chalk().default.underline(title) + _chalk().default.green(componentsStr);
    }

    return mergeReport({
      components,
      failedComponents,
      version,
      mergeSnapResults
    });
  }

}

exports.default = Merge;

function mergeReport({
  components,
  failedComponents,
  version,
  mergeSnapResults
}) {
  const getSuccessOutput = () => {
    if (!components || !components.length) return ''; // @ts-ignore version is set in case of merge command

    const title = `successfully merged components${version ? `from version ${_chalk().default.bold(version)}` : ''}\n`; // @ts-ignore components is set in case of merge command

    return _chalk().default.underline(title) + _chalk().default.green(applyVersionReport(components));
  };

  const getSnapsOutput = () => {
    if (!mergeSnapResults || !mergeSnapResults.snappedComponents) return '';
    const {
      snappedComponents,
      autoSnappedResults
    } = mergeSnapResults;

    const outputComponents = comps => {
      return comps.map(component => {
        let componentOutput = `     > ${component.id.toString()}`;
        const autoTag = autoSnappedResults.filter(result => result.triggeredBy.searchWithoutScopeAndVersion(component.id));

        if (autoTag.length) {
          const autoTagComp = autoTag.map(a => a.component.id.toString());
          componentOutput += `\n       ${_snapCmd().AUTO_SNAPPED_MSG}: ${autoTagComp.join(', ')}`;
        }

        return componentOutput;
      }).join('\n');
    };

    return `\n${_chalk().default.underline('merge-snapped components')}\n(${'components that snapped as a result of the merge'})\n${outputComponents(snappedComponents)}\n`;
  };

  const getFailureOutput = () => {
    if (!failedComponents || !failedComponents.length) return '';
    const title = 'the merge has been canceled on the following component(s)';
    const body = failedComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${_chalk().default.red(failedComponent.failureMessage)}`).join('\n');
    return `${_chalk().default.underline(title)}\n${body}\n\n`;
  };

  return getSuccessOutput() + getFailureOutput() + getSnapsOutput();
}