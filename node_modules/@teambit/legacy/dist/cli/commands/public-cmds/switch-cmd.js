"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _is2() {
  const data = _interopRequireDefault(require("ramda/src/is"));

  _is2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _consumer() {
  const data = require("../../../api/consumer");

  _consumer = function () {
    return data;
  };

  return data;
}

function _mergeVersion() {
  const data = require("../../../consumer/versions-ops/merge-version");

  _mergeVersion = function () {
    return data;
  };

  return data;
}

function _generalError() {
  const data = _interopRequireDefault(require("../../../error/general-error"));

  _generalError = function () {
    return data;
  };

  return data;
}

function _mergeCmd() {
  const data = require("./merge-cmd");

  _mergeCmd = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class Switch {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'switch <lane>');
    (0, _defineProperty2().default)(this, "description", `switch to the specified lane`);
    (0, _defineProperty2().default)(this, "private", true);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "opts", [['r', 'remote <scope>', 'fetch remote lane objects and switch to a local lane tracked to the remote'], ['n', 'as <as>', 'relevant when --remote flag is used. name a local lane differently than the remote lane'], ['m', 'merge [strategy]', 'merge local changes with the checked out version. strategy should be "theirs", "ours" or "manual"'], ['a', 'get-all', 'checkout all components in a lane include ones that do not exist in the workspace'], ['v', 'verbose', 'showing verbose output for inspection'], ['j', 'json', 'return the output as JSON']]);
    (0, _defineProperty2().default)(this, "loader", true);
  }

  action([lane], {
    remote,
    as,
    merge,
    getAll = false,
    verbose = false,
    json = false
  }) {
    let mergeStrategy;

    if (merge && (0, _is2().default)(String, merge)) {
      const options = Object.keys(_mergeVersion().MergeOptions);

      if (!options.includes(merge)) {
        throw new (_generalError().default)(`merge must be one of the following: ${options.join(', ')}`);
      }

      mergeStrategy = merge;
    }

    const switchProps = {
      laneName: lane,
      remoteScope: remote,
      existingOnWorkspaceOnly: !getAll,
      newLaneName: as
    };
    const checkoutProps = {
      mergeStrategy,
      verbose,
      skipNpmInstall: false,
      // not relevant in Harmony
      ignorePackageJson: true,
      // not relevant in Harmony
      ignoreDist: true,
      // not relevant in Harmony
      isLane: true,
      promptMergeOptions: false,
      writeConfig: false,
      reset: false,
      all: false
    };
    return (0, _consumer().switchAction)(switchProps, checkoutProps).then(results => _objectSpread(_objectSpread({}, results), {}, {
      lane,
      json
    }));
  }

  report({
    components,
    failedComponents,
    lane,
    json
  }) {
    if (json) {
      return JSON.stringify({
        components,
        failedComponents
      }, null, 4);
    }

    const getFailureOutput = () => {
      if (!failedComponents || !failedComponents.length) return '';
      const title = 'the switch has been canceled on the following component(s)';
      const body = failedComponents.map(failedComponent => `${_chalk().default.bold(failedComponent.id.toString())} - ${_chalk().default.red(failedComponent.failureMessage)}`).join('\n');
      return `${title}\n${body}\n\n`;
    };

    const getSuccessfulOutput = () => {
      const laneSwitched = _chalk().default.green(`\nsuccessfully set "${_chalk().default.bold(lane)}" as the active lane`);

      if (!components || !components.length) return `No component had been changed.${laneSwitched}`;

      if (components.length === 1) {
        const component = components[0];
        const componentName = component.id.toStringWithoutVersion();
        const title = `successfully switched ${_chalk().default.bold(componentName)} to version ${_chalk().default.bold(component.id.version)}\n`;
        return `${title} ${(0, _mergeCmd().applyVersionReport)(components, false)}${laneSwitched}`;
      }

      const title = `successfully switched the following components to the version of ${lane}\n\n`;
      const componentsStr = (0, _mergeCmd().applyVersionReport)(components, true, false);
      return title + componentsStr + laneSwitched;
    };

    const failedOutput = getFailureOutput();
    const successOutput = getSuccessfulOutput();
    return failedOutput + successOutput;
  }

}

exports.default = Switch;