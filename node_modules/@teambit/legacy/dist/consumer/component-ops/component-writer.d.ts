import { BitIds } from '../../bit-id';
import { Scope } from '../../scope';
import { PathLinuxRelative } from '../../utils/path';
import BitMap from '../bit-map/bit-map';
import ComponentMap, { ComponentOrigin } from '../bit-map/component-map';
import Component from '../component/consumer-component';
import PackageJsonFile from '../component/package-json-file';
import Consumer from '../consumer';
export declare type ComponentWriterProps = {
    component: Component;
    writeToPath: PathLinuxRelative;
    writeConfig?: boolean;
    writePackageJson?: boolean;
    override?: boolean;
    isolated?: boolean;
    origin: ComponentOrigin;
    consumer: Consumer | undefined;
    scope?: Scope | undefined;
    bitMap: BitMap;
    ignoreBitDependencies?: boolean | BitIds;
    deleteBitDirContent?: boolean;
    existingComponentMap?: ComponentMap;
    excludeRegistryPrefix?: boolean;
    saveOnLane?: boolean;
    applyPackageJsonTransformers?: boolean;
};
export default class ComponentWriter {
    component: Component;
    writeToPath: PathLinuxRelative;
    writeConfig: boolean;
    writePackageJson: boolean;
    override: boolean;
    isolated: boolean | undefined;
    origin: ComponentOrigin;
    consumer: Consumer | undefined;
    scope?: Scope | undefined;
    bitMap: BitMap;
    ignoreBitDependencies: boolean | BitIds;
    deleteBitDirContent: boolean | undefined;
    existingComponentMap: ComponentMap | undefined;
    excludeRegistryPrefix: boolean;
    saveOnLane: boolean;
    applyPackageJsonTransformers: boolean;
    constructor({ component, writeToPath, writeConfig, writePackageJson, override, isolated, origin, consumer, scope, bitMap, ignoreBitDependencies, deleteBitDirContent, existingComponentMap, excludeRegistryPrefix, saveOnLane, applyPackageJsonTransformers, }: ComponentWriterProps);
    static getInstance(componentWriterProps: ComponentWriterProps): ComponentWriter;
    write(): Promise<Component>;
    populateComponentsFilesToWrite(packageManager?: string): Promise<Component>;
    private throwForImportingLegacyIntoHarmony;
    populateFilesToWriteToComponentDir(packageManager?: string): Promise<void>;
    private populateArtifacts;
    private getArtifactsDir;
    addComponentToBitMap(rootDir: string | undefined): ComponentMap;
    _mergePackageJsonPropsFromOverrides(packageJson: PackageJsonFile): void;
    _applyTransformers(component: Component, packageJson: PackageJsonFile): Promise<void>;
    _mergeChangedPackageJsonProps(packageJson: PackageJsonFile): void;
    _replaceDistPathTemplateWithCalculatedDistPath(packageJson: PackageJsonFile): Record<string, any>;
    _copyFilesIntoDistsWhenDistsOutsideComponentDir(): void;
    _updateComponentRootPathAccordingToBitMap(): void;
    _updateBitMapIfNeeded(): void;
    _updateConsumerConfigIfNeeded(): Promise<void>;
    _determineWhetherToWriteConfig(): void;
    _determineWhetherToWritePackageJson(): void;
    _handlePreviouslyNestedCurrentlyImportedCase(): Promise<void>;
    _determineWhetherToDeleteComponentDirContent(): void;
    _updateFilesBasePaths(): void;
    _cleanOldNestedComponent(): Promise<void>;
    _removeNodeModulesLinksFromDependents(): Promise<void>;
    _getNextPatchVersion(): string;
}
