import { BitId, BitIds } from '../../bit-id';
import { Consumer } from '../../consumer';
import { RemoteLaneId } from '../../lane-id/lane-id';
import { ComponentWithDependencies, Scope } from '../../scope';
import DependencyGraph from '../../scope/graph/scope-graph';
import { Lane } from '../../scope/models';
import Component from '../component';
import { FilesStatus, MergeStrategy } from '../versions-ops/merge-version/merge-version';
import { MergeResultsThreeWay } from '../versions-ops/merge-version/three-way-merge';
export declare type ImportOptions = {
    ids: string[];
    verbose: boolean;
    merge?: boolean;
    mergeStrategy?: MergeStrategy;
    withEnvironments: boolean;
    writeToPath?: string;
    writePackageJson: boolean;
    writeConfig: boolean;
    writeDists: boolean;
    override: boolean;
    installNpmPackages: boolean;
    objectsOnly: boolean;
    saveDependenciesAsComponents?: boolean;
    importDependenciesDirectly?: boolean;
    importDependents?: boolean;
    fromOriginalScope?: boolean;
    skipLane?: boolean;
    lanes?: {
        laneIds: RemoteLaneId[];
        lanes?: Lane[];
    };
    allHistory?: boolean;
};
declare type ComponentMergeStatus = {
    componentWithDependencies: ComponentWithDependencies;
    mergeResults: MergeResultsThreeWay | null | undefined;
};
declare type ImportedVersions = {
    [id: string]: string[];
};
export declare type ImportStatus = 'added' | 'updated' | 'up to date';
export declare type ImportDetails = {
    id: string;
    versions: string[];
    status: ImportStatus;
    filesStatus: FilesStatus | null | undefined;
    missingDeps: BitId[];
};
export declare type ImportResult = Promise<{
    dependencies: ComponentWithDependencies[];
    envComponents?: Component[];
    importDetails: ImportDetails[];
}>;
export default class ImportComponents {
    consumer: Consumer;
    scope: Scope;
    options: ImportOptions;
    mergeStatus: {
        [id: string]: FilesStatus;
    };
    private divergeData;
    constructor(consumer: Consumer, options: ImportOptions);
    importComponents(): ImportResult;
    importSpecificComponents(): ImportResult;
    _fetchDivergeData(componentsWithDependencies: ComponentWithDependencies[]): Promise<void>;
    _throwForDivergedHistory(): void;
    _filterComponentsWithLowerVersions(componentsWithDependencies: ComponentWithDependencies[]): ComponentWithDependencies[];
    _getBitIds(): Promise<BitIds>;
    _getDependenciesFromGraph(bitIds: BitId[], graphs: DependencyGraph[]): BitId[];
    _getDependentsFromGraph(bitIds: BitId[], graphs: DependencyGraph[]): BitId[];
    _getComponentsGraphs(bitIds: BitId[]): Promise<DependencyGraph[]>;
    importAccordingToBitMap(): ImportResult;
    getIdsOfDepsInstalledAsPackages(): Promise<BitId[]>;
    _getCurrentVersions(ids: BitIds): Promise<ImportedVersions>;
    _getImportDetails(currentVersions: ImportedVersions, components: ComponentWithDependencies[]): Promise<ImportDetails[]>;
    _throwForPotentialIssues(ids: BitIds): Promise<void>;
    _throwForModifiedOrNewComponents(ids: BitIds): Promise<void>;
    _throwForModifiedOrNewDependencies(componentsAndDependencies: ComponentWithDependencies[]): Promise<void>;
    _throwForDifferentComponentWithSameName(ids: BitIds): void;
    _getMergeStatus(componentWithDependencies: ComponentWithDependencies): Promise<ComponentMergeStatus>;
    _updateComponentFilesPerMergeStrategy(componentMergeStatus: ComponentMergeStatus): FilesStatus | null | undefined;
    updateAllComponentsAccordingToMergeStrategy(componentsWithDependencies: ComponentWithDependencies[]): Promise<ComponentWithDependencies[]>;
    _shouldSaveLaneData(): boolean;
    _saveLaneDataIfNeeded(componentsWithDependencies: ComponentWithDependencies[]): Promise<void>;
    _writeToFileSystem(componentsWithDependencies: ComponentWithDependencies[]): Promise<void>;
}
export {};
