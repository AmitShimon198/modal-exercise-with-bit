import { ResolvedPackageData } from '../../../../../utils/packages';
export declare type Specifier = {
    isDefault: boolean;
    name: string;
    exported?: boolean;
};
export declare type ImportSpecifier = {
    mainFile: Specifier;
    linkFile?: Specifier;
};
export declare type FileObject = {
    file: string;
    importSpecifiers?: ImportSpecifier[];
    importSource?: string;
    isCustomResolveUsed?: boolean;
    isLink?: boolean;
    linkDependencies?: Record<string, any>[];
};
export declare type LinkFile = {
    file: string;
    importSpecifiers: ImportSpecifier[];
};
declare type MissingType = 'files' | 'packages' | 'components';
export declare class DependenciesTreeItem {
    files: FileObject[];
    packages: {
        [packageName: string]: string;
    };
    unidentifiedPackages: string[];
    components: ResolvedPackageData[];
    error?: Error;
    missing?: {
        [key in MissingType]: string[];
    };
    isEmpty(): any;
}
export declare type DependenciesTree = {
    [filePath: string]: DependenciesTreeItem;
};
export declare type ResolveModulesConfig = {
    modulesDirectories?: string[];
    aliases?: {
        [key: string]: string;
    };
};
export declare type DependencyTreeParams = {
    componentDir: string;
    workspacePath: string;
    filePaths: string[];
    bindingPrefix: string;
    isLegacyProject: boolean;
    resolveModulesConfig?: ResolveModulesConfig;
    visited?: Record<string, any>;
    cacheResolvedDependencies?: Record<string, any>;
    cacheProjectAst?: Record<string, any>;
};
export {};
