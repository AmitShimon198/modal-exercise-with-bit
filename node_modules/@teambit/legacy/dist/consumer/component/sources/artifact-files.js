"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.importMultipleDistsArtifacts = importMultipleDistsArtifacts;
exports.refsToModelObjects = refsToModelObjects;
exports.getRefsFromExtensions = getRefsFromExtensions;
exports.getArtifactFilesByExtension = getArtifactFilesByExtension;
exports.convertBuildArtifactsToModelObject = convertBuildArtifactsToModelObject;
exports.convertBuildArtifactsFromModelObject = convertBuildArtifactsFromModelObject;
exports.getArtifactsFiles = getArtifactsFiles;
exports.reStructureBuildArtifacts = reStructureBuildArtifacts;
exports.deserializeArtifactFiles = deserializeArtifactFiles;
exports.ArtifactFiles = void 0;

function _flatten2() {
  const data = _interopRequireDefault(require("ramda/src/flatten"));

  _flatten2 = function () {
    return data;
  };

  return data;
}

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _fsExtra() {
  const data = _interopRequireDefault(require("fs-extra"));

  _fsExtra = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _showDoctorError() {
  const data = _interopRequireDefault(require("../../../error/show-doctor-error"));

  _showDoctorError = function () {
    return data;
  };

  return data;
}

function _scopeComponentsImporter() {
  const data = _interopRequireDefault(require("../../../scope/component-ops/scope-components-importer"));

  _scopeComponentsImporter = function () {
    return data;
  };

  return data;
}

function _objects() {
  const data = require("../../../scope/objects");

  _objects = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("../../../utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _artifact() {
  const data = require("./artifact");

  _artifact = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

/**
 * Artifacts utilize lazy loading mechanism. As such, when loading them from the objects, they are
 * not converted to ArtifactVinyl[]. Instead, they are loaded as ArtifactRef[].
 * Later, when they're needed, the `getVinylsAndImportIfMissing` method is used to load them and if
 * needed, to import them from a remote.
 *
 * the workflow of an artifact during the tag is as follows:
 * 1. First, it got created on a capsule and saved to the ConsumerComponent as ArtifactVinyl.
 * 2. On tag, it is transformed to ArtifactSource in order to save the Sources (BitObjects) in the objects.
 * 3. Finally, once the Version object is saved, it needs to save only the hash of the artifacts, hence ArtifactModel.
 */
class ArtifactFiles {
  constructor(paths = [], vinyls = [], refs = []) {
    this.paths = paths;
    this.vinyls = vinyls;
    this.refs = refs;
  }

  clone() {
    const vinyls = this.vinyls.map(vinyl => vinyl.clone());
    const refs = this.refs.map(ref => _objectSpread({}, ref));
    return new ArtifactFiles(_objectSpread({}, this.paths), vinyls, refs);
  }

  populateRefsFromSources(sources) {
    this.refs = sources.map(source => ({
      relativePath: source.relativePath,
      ref: source.source.hash()
    }));
  }

  populateVinylsFromPaths(rootDir) {
    this.vinyls = this.paths.map(file => new (_artifact().ArtifactVinyl)({
      path: file,
      contents: _fsExtra().default.readFileSync(_path().default.join(rootDir, file))
    }));
  }

  getExistingVinyls() {
    return this.vinyls;
  }

  isEmpty() {
    return !this.vinyls.length && !this.refs.length && !this.paths.length;
  }

  static fromModel(artifactModels = []) {
    const refs = artifactModels.map(artifactModel => ({
      relativePath: artifactModel.relativePath,
      ref: _objects().Ref.from(artifactModel.file)
    }));
    return new ArtifactFiles([], [], refs);
  }

  static fromVinylsToSources(vinyls) {
    return vinyls.map(artifact => {
      return {
        relativePath: (0, _utils().pathNormalizeToLinux)(artifact.relative),
        source: artifact.toSourceAsLinuxEOL()
      };
    });
  }

  async getVinylsAndImportIfMissing(scopeName, scope) {
    if (this.isEmpty()) return [];
    if (this.vinyls.length) return this.vinyls;
    const allHashes = this.refs.map(artifact => artifact.ref.hash);

    const scopeComponentsImporter = _scopeComponentsImporter().default.getInstance(scope);

    await scopeComponentsImporter.importManyObjects({
      [scopeName]: allHashes
    });

    const getOneArtifact = async artifact => {
      const content = await artifact.ref.load(scope.objects);
      if (!content) throw new (_showDoctorError().default)(`failed loading file ${artifact.relativePath} from the model`);
      return new (_artifact().ArtifactVinyl)({
        base: '.',
        path: artifact.relativePath,
        contents: content.contents
      });
    };

    this.vinyls = await Promise.all(this.refs.map(artifact => getOneArtifact(artifact)));
    return this.vinyls;
  }

}

exports.ArtifactFiles = ArtifactFiles;

async function importMultipleDistsArtifacts(scope, components) {
  const extensionsNamesForDistArtifacts = 'teambit.compilation/compiler';
  const groupedHashes = {};
  components.forEach(component => {
    const artifactsFiles = getArtifactFilesByExtension(component.extensions, extensionsNamesForDistArtifacts);
    artifactsFiles.forEach(artifactFiles => {
      var _ref;

      if (!artifactFiles) return;

      if (!(artifactFiles instanceof ArtifactFiles)) {
        artifactFiles = deserializeArtifactFiles(artifactFiles);
      }

      if (artifactFiles.isEmpty()) return;
      if (artifactFiles.vinyls.length) return;
      const allHashes = artifactFiles.refs.map(artifact => artifact.ref.hash);
      (groupedHashes[_ref = component.scope] || (groupedHashes[_ref] = [])).push(...allHashes);
    });
  });

  const scopeComponentsImporter = _scopeComponentsImporter().default.getInstance(scope);

  await scopeComponentsImporter.importManyObjects(groupedHashes);
}

function refsToModelObjects(refs) {
  return refs.map(artifact => {
    return {
      relativePath: artifact.relativePath,
      file: artifact.ref.hash
    };
  });
}

function getRefsFromExtensions(extensions) {
  const artifactsFiles = getArtifactsFiles(extensions);
  const refs = artifactsFiles.map(artifactFiles => artifactFiles.refs.map(r => r.ref));
  return (0, _flatten2().default)(refs).filter(ref => ref);
}

function getArtifactFilesByExtension(extensions, extensionName) {
  const buildArtifacts = getBuildArtifacts(extensions);
  return buildArtifacts.filter(artifact => artifact.task.id === extensionName).map(artifact => artifact.files);
}

function convertBuildArtifactsToModelObject(extensions) {
  const buildArtifacts = getBuildArtifacts(extensions);
  buildArtifacts.forEach(artifact => {
    // @ts-ignore
    artifact.files = refsToModelObjects(artifact.files.refs);
  });
}

function convertBuildArtifactsFromModelObject(extensions) {
  const artifactObjects = getBuildArtifacts(extensions);
  artifactObjects.forEach(artifactObject => {
    // @ts-ignore
    artifactObject.files = ArtifactFiles.fromModel(artifactObject.files);
  });
}

function getArtifactsFiles(extensions) {
  const buildArtifacts = getBuildArtifacts(extensions);
  return buildArtifacts.map(artifacts => artifacts.files);
}

function reStructureBuildArtifacts(extensions) {
  const buildArtifacts = getBuildArtifacts(extensions);
  buildArtifacts.forEach(artifacts => {
    artifacts.files = deserializeArtifactFiles(artifacts.files);
  });
}

function deserializeArtifactFiles(obj) {
  const refs = obj.refs.map(ref => ({
    relativePath: ref.relativePath,
    ref: new (_objects().Ref)(ref.ref.hash)
  }));
  return new ArtifactFiles(obj.paths, obj.vinyls, refs);
}

function getBuildArtifacts(extensions) {
  var _extensions$findExten, _extensions$findExten2;

  return ((_extensions$findExten = extensions.findExtension('teambit.pipelines/builder')) === null || _extensions$findExten === void 0 ? void 0 : (_extensions$findExten2 = _extensions$findExten.data) === null || _extensions$findExten2 === void 0 ? void 0 : _extensions$findExten2.artifacts) || [];
}