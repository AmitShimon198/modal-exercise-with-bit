import { Consumer } from '..';
import { BitId } from '../../bit-id';
import { PathOsBasedAbsolute, PathOsBasedRelative } from '../../utils/path';
import Component from '../component/consumer-component';
import PackageJsonFile from '../component/package-json-file';
import AbstractConfig, { Compilers, Testers } from './abstract-config';
import { ComponentOverridesData } from './component-overrides';
import { ExtensionDataList } from './extension-data';
import { ILegacyWorkspaceConfig } from './legacy-workspace-config-interface';
declare type ConfigProps = {
    lang?: string;
    compiler?: string | Compilers;
    tester?: string | Testers;
    bindingPrefix: string;
    extensions?: ExtensionDataList;
    defaultScope?: string;
    overrides?: ComponentOverridesData;
};
declare type ConfigLoadRegistry = {
    [extId: string]: Function;
};
declare type ConfigLegacyLoadRegistry = {
    [extId: string]: Function;
};
export default class ComponentConfig extends AbstractConfig {
    overrides: ComponentOverridesData | null | undefined;
    defaultScope: string | undefined;
    componentHasWrittenConfig: boolean;
    packageJsonFile: PackageJsonFile | null | undefined;
    static componentConfigLoadingRegistry: ConfigLoadRegistry;
    static registerOnComponentConfigLoading(extId: any, func: (id: any) => any): void;
    static componentConfigLegacyLoadingRegistry: ConfigLegacyLoadRegistry;
    static registerOnComponentConfigLegacyLoading(extId: any, func: (id: any, config: any) => any): void;
    constructor({ compiler, tester, lang, bindingPrefix, extensions, defaultScope, overrides }: ConfigProps);
    toPlainObject(): any;
    validate(bitJsonPath: string): void;
    parseExtensions(): ExtensionDataList;
    static fromPlainObject(object: Record<string, any>): ComponentConfig;
    static fromComponent(component: Component): ComponentConfig;
    mergeWithComponentData(component: Component): void;
    static mergeWithWorkspaceRootConfigs(consumer: Consumer, componentId: BitId, componentConfig: Record<string, any>, workspaceConfig: ILegacyWorkspaceConfig | undefined): ComponentConfig;
    static loadConfigFromFolder({ componentDir, workspaceDir, }: {
        componentDir: PathOsBasedAbsolute | undefined;
        workspaceDir: PathOsBasedAbsolute;
    }): Promise<{
        componentHasWrittenConfig: boolean;
        config: any;
        packageJsonFile: any;
        bitJsonPath: string;
    }>;
    static load({ consumer, componentId, componentDir, workspaceDir, workspaceConfig, }: {
        consumer: Consumer;
        componentId: BitId;
        componentDir: PathOsBasedRelative | undefined;
        workspaceDir: PathOsBasedRelative;
        workspaceConfig: ILegacyWorkspaceConfig;
    }): Promise<ComponentConfig>;
    static runOnLegacyLoadEvent(subscribers: ConfigLegacyLoadRegistry, id: BitId, config: any): Promise<void>;
    static runOnLoadEvent(subscribers: ConfigLoadRegistry, id: BitId): Promise<any[]>;
}
export {};
