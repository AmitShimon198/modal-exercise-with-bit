import { BitId, BitIds } from '../../bit-id';
declare type ConfigOnlyEntry = {
    id: string;
    config: Record<string, any> | RemoveExtensionSpecialSign;
};
export declare const REMOVE_EXTENSION_SPECIAL_SIGN = "-";
declare type RemoveExtensionSpecialSign = '-';
export declare class ExtensionDataEntry {
    legacyId?: string | undefined;
    extensionId?: BitId | undefined;
    name?: string | undefined;
    rawConfig: {
        [key: string]: any;
    } | RemoveExtensionSpecialSign;
    data: {
        [key: string]: any;
    };
    newExtensionId: any;
    constructor(legacyId?: string | undefined, extensionId?: BitId | undefined, name?: string | undefined, rawConfig?: {
        [key: string]: any;
    } | RemoveExtensionSpecialSign, data?: {
        [key: string]: any;
    }, newExtensionId?: any);
    get id(): string | BitId;
    get stringId(): string;
    get config(): {
        [key: string]: any;
    };
    set config(val: {
        [key: string]: any;
    });
    get isLegacy(): boolean;
    get isRemoved(): boolean;
    toModelObject(): {
        extensionId: {
            scope: string | null | undefined;
            name: string;
            version: string | undefined;
        } | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    };
    toComponentObject(): {
        extensionId: string | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    };
    clone(): ExtensionDataEntry;
}
export declare class ExtensionDataList extends Array<ExtensionDataEntry> {
    static coreExtensionsNames: Map<string, string>;
    static registerCoreExtensionName(name: string): void;
    static registerManyCoreExtensionNames(names: string[]): void;
    get ids(): string[];
    get extensionsBitIds(): BitIds;
    toModelObjects(): {
        extensionId: {
            scope: string | null | undefined;
            name: string;
            version: string | undefined;
        } | undefined;
        config: {
            [key: string]: any;
        };
        data: {
            [key: string]: any;
        };
        legacyId: string | undefined;
        name: string | undefined;
        newExtensionId: any;
    }[];
    static fromModelObject(entries: ExtensionDataEntry[]): ExtensionDataList;
    findExtension(extensionId: string, ignoreVersion?: boolean, ignoreScope?: boolean): ExtensionDataEntry | undefined;
    findCoreExtension(extensionId: string): ExtensionDataEntry | undefined;
    remove(id: BitId): ExtensionDataList;
    filterRemovedExtensions(): ExtensionDataList;
    toConfigObject(): {};
    toConfigArray(): ConfigOnlyEntry[];
    clone(): ExtensionDataList;
    _filterLegacy(): ExtensionDataList;
    sortById(): ExtensionDataList;
    static fromConfigObject(obj: {
        [extensionId: string]: any;
    }): ExtensionDataList;
    static fromArray(entries: ExtensionDataEntry[]): ExtensionDataList;
    static mergeConfigs(list: ExtensionDataList[]): ExtensionDataList;
}
export {};
