import { Consumer } from '..';
import { BitId } from '../../bit-id';
import { ComponentWithDependencies } from '../../scope';
import Version from '../../scope/models/version';
import ConsumerComponent from '../component';
import { SourceFile } from '../component/sources';
import { ApplyVersionResult, ApplyVersionResults, MergeStrategy } from './merge-version';
import { MergeResultsThreeWay } from './merge-version/three-way-merge';
export declare type CheckoutProps = {
    version?: string;
    ids?: BitId[];
    latestVersion?: boolean;
    promptMergeOptions: boolean;
    mergeStrategy: MergeStrategy | null | undefined;
    verbose: boolean;
    skipNpmInstall: boolean;
    ignorePackageJson: boolean;
    writeConfig: boolean;
    reset: boolean;
    all: boolean;
    ignoreDist: boolean;
    isLane: boolean;
};
export declare type ComponentStatus = {
    componentFromFS?: ConsumerComponent;
    componentFromModel?: Version;
    id: BitId;
    failureMessage?: string;
    unchangedLegitimately?: boolean;
    mergeResults?: MergeResultsThreeWay | null | undefined;
};
declare type ApplyVersionWithComps = {
    applyVersionResult: ApplyVersionResult;
    component?: ComponentWithDependencies;
};
export default function checkoutVersion(consumer: Consumer, checkoutProps: CheckoutProps): Promise<ApplyVersionResults>;
export declare function applyVersion(consumer: Consumer, id: BitId, componentFromFS: ConsumerComponent | null | undefined, mergeResults: MergeResultsThreeWay | null | undefined, checkoutProps: CheckoutProps): Promise<ApplyVersionWithComps>;
export declare function applyModifiedVersion(componentFiles: SourceFile[], mergeResults: MergeResultsThreeWay, mergeStrategy: MergeStrategy | null | undefined, sharedDir?: string): Record<string, any>;
export {};
