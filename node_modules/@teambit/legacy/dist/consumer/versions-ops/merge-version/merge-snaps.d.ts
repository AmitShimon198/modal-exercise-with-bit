import { Consumer } from '../..';
import { BitId } from '../../../bit-id';
import LaneId from '../../../lane-id/lane-id';
import { AutoTagResult } from '../../../scope/component-ops/auto-tag';
import { Lane, Version } from '../../../scope/models';
import { Ref } from '../../../scope/objects';
import Component from '../../component/consumer-component';
import { ApplyVersionResult, ApplyVersionResults, FailedComponents, MergeStrategy } from './merge-version';
import { MergeResultsThreeWay } from './three-way-merge';
export declare type ComponentStatus = {
    componentFromFS?: Component | null;
    componentFromModel?: Version;
    id: BitId;
    failureMessage?: string;
    mergeResults?: MergeResultsThreeWay | null;
};
export declare function mergeComponentsFromRemote(consumer: Consumer, bitIds: BitId[], mergeStrategy: MergeStrategy, noSnap: boolean, snapMessage: string, build: boolean): Promise<ApplyVersionResults>;
export declare function merge({ consumer, mergeStrategy, allComponentsStatus, remoteName, laneId, localLane, noSnap, snapMessage, build, }: {
    consumer: Consumer;
    mergeStrategy: MergeStrategy;
    allComponentsStatus: ComponentStatus[];
    remoteName: string | null;
    laneId: LaneId;
    localLane: Lane | null;
    noSnap: boolean;
    snapMessage: string;
    build: boolean;
}): Promise<{
    components: ApplyVersionResult[];
    failedComponents: FailedComponents[];
    mergeSnapResults: {
        snappedComponents: Component[];
        autoSnappedResults: AutoTagResult[];
    } | null;
}>;
export declare function getComponentStatus(consumer: Consumer, id: BitId, localLane: Lane | null, otherLaneName: string, existingOnWorkspaceOnly?: boolean): Promise<ComponentStatus>;
export declare function applyVersion({ consumer, componentFromFS, id, mergeResults, mergeStrategy, remoteHead, remoteName, laneId, localLane, }: {
    consumer: Consumer;
    componentFromFS: Component | null | undefined;
    id: BitId;
    mergeResults: MergeResultsThreeWay | null | undefined;
    mergeStrategy: MergeStrategy;
    remoteHead: Ref;
    remoteName: string | null;
    laneId: LaneId;
    localLane: Lane | null;
}): Promise<ApplyVersionResult>;
export declare function abortMerge(consumer: Consumer, values: string[]): Promise<ApplyVersionResults>;
export declare function resolveMerge(consumer: Consumer, values: string[], snapMessage: string, build: boolean): Promise<ApplyVersionResults>;
