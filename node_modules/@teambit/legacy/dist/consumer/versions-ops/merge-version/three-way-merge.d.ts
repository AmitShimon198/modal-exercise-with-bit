import { Consumer } from '../..';
import { Version } from '../../../scope/models';
import { SourceFileModel } from '../../../scope/models/version';
import { PathLinux } from '../../../utils/path';
import Component from '../../component';
import { SourceFile } from '../../component/sources';
export declare type MergeResultsThreeWay = {
    addFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    removeFiles: Array<{
        filePath: PathLinux;
    }>;
    modifiedFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
        baseFile: SourceFileModel;
        currentFile: SourceFileModel;
        output: string | null | undefined;
        conflict: string | null | undefined;
    }>;
    unModifiedFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    overrideFiles: Array<{
        filePath: PathLinux;
        fsFile: SourceFile;
    }>;
    hasConflicts: boolean;
};
export default function threeWayMergeVersions({ consumer, otherComponent, otherLabel, currentComponent, currentLabel, baseComponent, }: {
    consumer: Consumer;
    otherComponent: Component;
    otherLabel: string;
    currentComponent: Version;
    currentLabel: string;
    baseComponent: Version;
}): Promise<MergeResultsThreeWay>;
