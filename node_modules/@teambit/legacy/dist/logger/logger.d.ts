import { Logger as PinoLogger, Level } from 'pino';
export { Level as LoggerLevel };
declare const createExtensionLogger: (extensionName: string) => any;
export interface IBitLogger {
    trace(message: string, ...meta: any[]): void;
    debug(message: string, ...meta: any[]): void;
    warn(message: string, ...meta: any[]): void;
    info(message: string, ...meta: any[]): void;
    error(message: string, ...meta: any[]): void;
    fatal(message: string, ...meta: any[]): void;
    console(msg: string): void;
}
declare class BitLogger implements IBitLogger {
    logger: PinoLogger;
    private profiler;
    isDaemon: boolean;
    shouldWriteToConsole: boolean;
    constructor(logger: PinoLogger);
    silly(message: string, ...meta: any[]): void;
    trace(message: string, ...meta: any[]): void;
    debug(message: string, ...meta: any[]): void;
    warn(message: string, ...meta: any[]): void;
    info(message: string, ...meta: any[]): void;
    error(message: string, ...meta: any[]): void;
    fatal(message: string, ...meta: any[]): void;
    get isJsonFormat(): any;
    console(msg?: string | Error, level?: Level, color?: string): void;
    profile(id: string, console?: boolean): void;
    exitAfterFlush(code: number | undefined, commandName: string): Promise<void>;
    debugAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    warnAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    errorAndAddBreadCrumb(category: string, message: string, data?: Record<string, any>, extraData?: Record<string, any>): void;
    private addToLoggerAndToBreadCrumb;
    switchToConsoleLogger(level?: Level): void;
}
declare const logger: BitLogger;
export declare const printWarning: (msg: string) => void;
export declare function writeLogToScreen(levelOrPrefix?: string): void;
export { createExtensionLogger };
export default logger;
