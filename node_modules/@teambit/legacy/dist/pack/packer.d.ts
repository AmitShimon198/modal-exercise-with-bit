import { IBitLogger } from '../logger/logger';
import Scope from '../scope/scope';
export declare type PackResultMetadata = {
    pkgJson: Record<any, string>;
    tarPath: string;
    tarName: string;
    checksum?: string;
};
export declare type PackWriteOptions = {
    outDir?: string;
    override?: boolean;
};
export declare type PackOptions = {
    writeOptions: PackWriteOptions;
    prefix?: boolean;
    keep?: boolean;
    loadScopeFromCache?: boolean;
    dryRun?: boolean;
};
export declare type PackResult = {
    metadata?: PackResultMetadata;
    errors?: Array<Error | string>;
    warnings?: string[];
    startTime?: number;
    endTime?: number;
};
export declare class Packer {
    private logger;
    constructor(logger?: IBitLogger);
    packByScopePath(componentId: string, scopePath: string, options: PackOptions): Promise<PackResult>;
    pack(componentId: string, scope: Scope, options: PackOptions): Promise<PackResult>;
    npmPack(cwd: string, outputPath: string, override?: boolean, dryRun?: boolean, logger?: IBitLogger): Promise<PackResult>;
}
