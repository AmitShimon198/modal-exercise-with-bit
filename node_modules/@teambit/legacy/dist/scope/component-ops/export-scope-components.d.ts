import { BitId, BitIds } from '../../bit-id';
import { Lane, Version } from '../models';
import Scope from '../scope';
import { ObjectList } from '../objects/object-list';
import { MergeResult } from '../repositories/sources';
export declare type OnExportIdTransformer = (id: BitId) => BitId;
declare type UpdateDependenciesOnExportFunc = (version: Version, idTransformer: OnExportIdTransformer) => Version;
export declare function registerUpdateDependenciesOnExport(func: UpdateDependenciesOnExportFunc): void;
export declare function exportManyBareScope(scope: Scope, objectList: ObjectList): Promise<BitIds>;
export declare function exportMany({ scope, isLegacy, ids, remoteName, context, includeDependencies, changeLocallyAlthoughRemoteIsDifferent, codemod, laneObject, allVersions, originDirectly, idsWithFutureScope, resumeExportId, ignoreMissingArtifacts, }: {
    scope: Scope;
    isLegacy: boolean;
    ids: BitIds;
    remoteName: string | null | undefined;
    context?: Record<string, any>;
    includeDependencies: boolean;
    changeLocallyAlthoughRemoteIsDifferent: boolean;
    codemod: boolean;
    laneObject?: Lane;
    allVersions: boolean;
    originDirectly?: boolean;
    idsWithFutureScope: BitIds;
    resumeExportId?: string | undefined;
    ignoreMissingArtifacts?: boolean;
}): Promise<{
    exported: BitIds;
    updatedLocally: BitIds;
    newIdsOnRemote: BitId[];
}>;
export declare function saveObjects(scope: Scope, objectList: ObjectList): Promise<BitIds>;
declare type MergeObjectsResult = {
    mergedIds: BitIds;
    mergedComponentsResults: MergeResult[];
    mergedLanes: Lane[];
};
export declare function mergeObjects(scope: Scope, objectList: ObjectList, throwForMissingDeps?: boolean): Promise<MergeObjectsResult>;
export declare function resumeExport(scope: Scope, exportId: string, remotes: string[]): Promise<string[]>;
export {};
