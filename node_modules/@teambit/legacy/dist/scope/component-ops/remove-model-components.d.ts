import { BitId, BitIds } from '../../bit-id';
import Consumer from '../../consumer/consumer';
import { Lane } from '../models';
import { Ref } from '../objects';
import RemovedObjects from '../removed-components';
import Scope from '../scope';
export default class RemoveModelComponents {
    scope: Scope;
    bitIds: BitIds;
    force: boolean;
    removeSameOrigin: boolean;
    consumer: Consumer | null | undefined;
    currentLane: Lane | null;
    constructor(scope: Scope, bitIds: BitIds, force: boolean, removeSameOrigin: boolean, consumer?: Consumer);
    setCurrentLane(): Promise<void>;
    remove(): Promise<RemovedObjects>;
    getRemoveSingleData(bitId: BitId): Promise<{
        compId: BitId;
        depIds: BitIds;
        refsToRemove: Ref[];
    }>;
    private getDataForDependenciesRemoval;
    private getDataForRemovingComponent;
}
