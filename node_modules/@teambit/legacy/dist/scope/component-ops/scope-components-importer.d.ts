import { Mutex } from 'async-mutex';
import { Scope } from '..';
import { BitId, BitIds } from '../../bit-id';
import ConsumerComponent from '../../consumer/component';
import { RemoteLaneId } from '../../lane-id/lane-id';
import ComponentVersion from '../component-version';
import { Lane, ModelComponent } from '../models';
import { Repository } from '../objects';
import SourcesRepository from '../repositories/sources';
import VersionDependencies from '../version-dependencies';
import { BitObjectList } from '../objects/bit-object-list';
export default class ScopeComponentsImporter {
    scope: Scope;
    sources: SourcesRepository;
    repo: Repository;
    fetchWithDepsMutex: Mutex;
    constructor(scope: Scope);
    static getInstance(scope: Scope): ScopeComponentsImporter;
    importMany(ids: BitIds, cache?: boolean, throwForDependencyNotFound?: boolean): Promise<VersionDependencies[]>;
    importManyFromOriginalScopes(ids: BitIds): Promise<VersionDependencies[]>;
    importWithoutDeps(ids: BitIds, cache?: boolean): Promise<ComponentVersion[]>;
    importManyWithAllVersions(ids: BitIds, cache?: boolean, allDepsVersions?: boolean): Promise<VersionDependencies[]>;
    importManyDeltaWithoutDeps(ids: BitIds, allHistory?: boolean): Promise<void>;
    importFromLanes(remoteLaneIds: RemoteLaneId[]): Promise<Lane[]>;
    importLanes(remoteLaneIds: RemoteLaneId[]): Promise<Lane[]>;
    importManyObjects(groupedHashes: {
        [scopeName: string]: string[];
    }): Promise<void>;
    fetchWithoutDeps(ids: BitIds): Promise<ComponentVersion[]>;
    fetchWithDeps(ids: BitIds): Promise<VersionDependencies[]>;
    componentToVersionDependencies(component: ModelComponent, id: BitId): Promise<VersionDependencies | null>;
    loadRemoteComponent(id: BitId): Promise<ConsumerComponent>;
    loadComponent(id: BitId, localOnly?: boolean): Promise<ConsumerComponent>;
    getRemoteComponent(id: BitId): Promise<BitObjectList | null | undefined>;
    private multipleStreamsToBitObjects;
    private getVersionFromComponentDef;
    private multipleCompsDefsToVersionDeps;
    private getExternalMany;
    private getExternalManyWithoutDeps;
    private _getComponentVersion;
    private findMissingExternalsRecursively;
    private bitIdsToVersionDeps;
    private throwIfExternalFound;
}
export declare function groupByScopeName(ids: Array<BitId | RemoteLaneId>): {
    [scopeName: string]: string[];
};
