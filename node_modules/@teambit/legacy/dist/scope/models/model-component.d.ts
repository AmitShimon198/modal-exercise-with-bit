/// <reference types="node" />
import * as semver from 'semver';
import { LegacyComponentLog } from '@teambit/legacy-component-log';
import { BitId } from '../../bit-id';
import ConsumerComponent from '../../consumer/component';
import { ManipulateDirItem } from '../../consumer/component-ops/manipulate-dir';
import LaneId from '../../lane-id/lane-id';
import ComponentObjects from '../component-objects';
import { DivergeData } from '../component-ops/diverge-data';
import ComponentVersion from '../component-version';
import { BitObject, Ref } from '../objects';
import Repository from '../objects/repository';
import { Lane } from '.';
import Version from './version';
import { ObjectItem } from '../objects/object-list';
declare type State = {
    versions?: {
        [version: string]: {
            local?: boolean;
        };
    };
};
declare type Versions = {
    [version: string]: Ref;
};
export declare type ScopeListItem = {
    url: string;
    name: string;
    date: string;
};
export declare type ComponentLog = LegacyComponentLog;
export declare type ComponentProps = {
    scope: string | null | undefined;
    name: string;
    versions?: Versions;
    orphanedVersions?: Versions;
    lang: string;
    deprecated: boolean;
    bindingPrefix: string;
    local?: boolean;
    state?: State;
    scopesList?: ScopeListItem[];
    head?: Ref;
    schema?: string | undefined;
};
export default class Component extends BitObject {
    scope: string | null | undefined;
    name: string;
    versions: Versions;
    orphanedVersions: Versions;
    lang: string;
    deprecated: boolean;
    bindingPrefix: string;
    local: boolean | null | undefined;
    state: State;
    scopesList: ScopeListItem[];
    head?: Ref;
    remoteHead?: Ref | null;
    laneHeadLocal?: Ref | null;
    laneHeadRemote?: Ref | null;
    schema: string | undefined;
    private divergeData?;
    constructor(props: ComponentProps);
    get versionArray(): Ref[];
    setVersion(tag: string, ref: Ref): void;
    setOrphanedVersion(tag: string, ref: Ref): void;
    getRef(version: string): Ref | null;
    getHeadStr(): string | null;
    getHead(): Ref | undefined;
    getHeadAsTagIfExist(): string | undefined;
    hasHead(): boolean;
    setHead(head: Ref | undefined): void;
    listVersions(sort?: 'ASC' | 'DESC'): string[];
    listVersionsIncludeOrphaned(sort?: 'ASC' | 'DESC'): string[];
    hasVersion(version: string, repo: Repository, includeOrphaned?: boolean): Promise<boolean>;
    hasTag(version: string): boolean;
    get versionsIncludeOrphaned(): Versions;
    hasTagIncludeOrphaned(version: string): boolean;
    isHeadSnap(): boolean | undefined;
    addScopeListItem(scopeListItem: ScopeListItem): void;
    setDivergeData(repo: Repository, throws?: boolean, fromCache?: boolean): Promise<void>;
    getDivergeData(): DivergeData;
    populateLocalAndRemoteHeads(repo: Repository, laneId: LaneId, lane: Lane | null, remoteLaneId?: LaneId, remoteScopeName?: string | null | undefined): Promise<void>;
    setLaneHeadLocal(lane: Lane | null): void;
    _getComparableVersionsObjects(otherComponent: Component, local: boolean): {
        thisComponentVersions: Versions;
        otherComponentVersions: Versions;
    };
    compatibleWith(component: Component, local: boolean): boolean;
    diffWith(component: Component, local: boolean): string[];
    isEmpty(): boolean;
    latest(): string;
    latestIncludeRemote(repo: Repository): Promise<string>;
    latestVersion(): string;
    isLatestGreaterThan(version: string | null | undefined): boolean;
    latestExisting(repository: Repository): string;
    collectLogs(repo: Repository): Promise<ComponentLog[]>;
    collectVersions(repo: Repository): Promise<ConsumerComponent[]>;
    getTagOfRefIfExists(ref: Ref, allTags?: Versions): string | undefined;
    switchHashesWithTagsIfExist(refs: Ref[]): string[];
    getVersionToAdd(releaseType?: semver.ReleaseType, exactVersion?: string | null, incrementBy?: number, preRelease?: string): string;
    isEqual(component: Component, considerOrphanedVersions?: boolean): boolean;
    getSnapToAdd(): string;
    addVersion(version: Version, versionToAdd: string, lane: Lane | null, repo: Repository): string;
    version(releaseType?: semver.ReleaseType, incrementBy?: number, preRelease?: string): string;
    id(): string;
    toBitId(): BitId;
    toBitIdWithLatestVersion(): BitId;
    toBitIdWithLatestVersionAllowNull(): BitId;
    toObject(): {
        name: string;
        scope: string | null | undefined;
        versions: {};
        lang: string;
        deprecated: boolean;
        bindingPrefix: string;
        remotes: ScopeListItem[];
        schema: string | undefined;
    };
    loadVersion(versionStr: string, repository: Repository, throws?: boolean): Promise<Version>;
    loadVersionSync(version: string, repository: Repository, throws?: boolean): Version;
    collectVersionsObjects(repo: Repository, versions: string[], ignoreMissingArtifacts?: boolean): Promise<ObjectItem[]>;
    collectObjects(repo: Repository): Promise<ComponentObjects>;
    removeVersion(version: string): Ref;
    toComponentVersion(versionStr: string | undefined): ComponentVersion;
    toConsumerComponent(versionStr: string, scopeName: string, repository: Repository, manipulateDirData?: ManipulateDirItem[] | null): Promise<ConsumerComponent>;
    refs(): Ref[];
    replaceRef(oldRef: Ref, newRef: Ref): void;
    validateBeforePersisting(componentStr: string): void;
    toBuffer(pretty: boolean): Buffer;
    clearStateData(): void;
    markVersionAsLocal(version: string): void;
    getLocalVersions(): string[];
    hasLocalTag(tag: string): boolean;
    hasLocalVersion(version: string): boolean;
    getLocalTagsOrHashes(): string[];
    isLocallyChangedRegardlessOfLanes(): boolean;
    isLocallyChanged(lane?: Lane | null, repo?: Repository): Promise<boolean>;
    static parse(contents: string): Component;
    static from(props: ComponentProps): Component;
    static fromBitId(bitId: BitId): Component;
    get isLegacy(): boolean;
    validate(): void;
}
export {};
