import { Compiler, CompilerOptions, TranspileFileOutput, TranspileFileParams } from '@teambit/compiler';
import { BuiltTaskResult, BuildContext, TaskResultsList } from '@teambit/builder';
export declare type MultiCompilerOptions = {
    targetExtension?: string;
};
export declare class MultiCompiler implements Compiler {
    readonly id: string;
    readonly compilers: Compiler[];
    readonly compilerOptions: Partial<CompilerOptions>;
    readonly options: MultiCompilerOptions;
    displayName: string;
    shouldCopyNonSupportedFiles: boolean;
    distDir: string;
    constructor(id: string, compilers: Compiler[], compilerOptions?: Partial<CompilerOptions>, options?: MultiCompilerOptions);
    getArtifactDefinition(): {
        generatedBy: string;
        name: string;
        globPatterns: string[];
    }[];
    private getOptions;
    displayConfig(): string;
    transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput;
    build(context: BuildContext): Promise<BuiltTaskResult>;
    preBuild(context: BuildContext): Promise<void>;
    postBuild(context: BuildContext, taskResults: TaskResultsList): Promise<void>;
    private firstMatchedCompiler;
    getDistPathBySrcPath(srcPath: string): string;
    isFileSupported(filePath: string): boolean;
    version(): string;
}
