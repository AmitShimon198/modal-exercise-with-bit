{"version":3,"sources":["multi-compiler.compiler.ts"],"names":["MultiCompiler","constructor","id","compilers","compilerOptions","options","shouldCopyNonSupportedFiles","getArtifactDefinition","generatedBy","name","artifactName","globPatterns","distGlobPatterns","distDir","getOptions","defaultOpts","targetExtension","Object","assign","displayConfig","map","compiler","displayName","join","transpileFile","fileContent","outputs","reduce","files","flatMap","file","isFileSupported","outputPath","params","filePath","compiledContent","outputText","build","context","builds","buildResult","componentsResults","artifacts","preBuild","Promise","all","postBuild","taskResults","firstMatchedCompiler","find","getDistPathBySrcPath","srcPath","matchedCompiler","version"],"mappings":"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","sourcesContent":["import { join } from 'path';\nimport pMapSeries from 'p-map-series';\nimport { Compiler, CompilerOptions, TranspileFileOutput, TranspileFileParams } from '@teambit/compiler';\nimport { BuiltTaskResult, BuildContext, TaskResultsList } from '@teambit/builder';\nimport { mergeComponentResults } from '@teambit/pipelines.modules.merge-component-results';\n\nexport type MultiCompilerOptions = {\n  targetExtension?: string;\n};\n\nexport class MultiCompiler implements Compiler {\n  displayName = 'Multi compiler';\n\n  shouldCopyNonSupportedFiles =\n    typeof this.compilerOptions.shouldCopyNonSupportedFiles === 'boolean'\n      ? this.compilerOptions.shouldCopyNonSupportedFiles\n      : true;\n  distDir = 'dist';\n\n  constructor(\n    readonly id: string,\n    readonly compilers: Compiler[],\n    readonly compilerOptions: Partial<CompilerOptions> = {},\n    readonly options: MultiCompilerOptions = {}\n  ) {}\n\n  getArtifactDefinition() {\n    return [\n      {\n        generatedBy: this.id,\n        name: this.compilerOptions.artifactName || 'dist',\n        globPatterns: this.compilerOptions.distGlobPatterns || [\n          `${this.distDir}/**`,\n          `!${this.distDir}/tsconfig.tsbuildinfo`,\n        ],\n      },\n    ];\n  }\n\n  private getOptions() {\n    const defaultOpts = {\n      targetExtension: '.js',\n    };\n\n    return Object.assign(defaultOpts, this.options);\n  }\n\n  displayConfig() {\n    return this.compilers\n      .map((compiler) => {\n        return `${compiler.displayName}\\n${compiler.displayConfig}\\n`;\n      })\n      .join('\\n');\n  }\n\n  /**\n   * the multi-compiler applies all applicable defined compilers on given content.\n   */\n  transpileFile(fileContent: string, options: TranspileFileParams): TranspileFileOutput {\n    const outputs = this.compilers.reduce<any>(\n      (files, compiler) => {\n        return files?.flatMap((file) => {\n          if (!compiler.isFileSupported(file?.outputPath)) return [file];\n          const params = Object.assign({}, options, {\n            filePath: file.outputPath,\n          });\n          const compiledContent = compiler.transpileFile?.(file.outputText, params);\n          if (!compiledContent) return null;\n\n          return compiledContent;\n        });\n      },\n      [{ outputText: fileContent, outputPath: options.filePath }]\n    );\n\n    return outputs;\n  }\n\n  async build(context: BuildContext): Promise<BuiltTaskResult> {\n    const builds = await pMapSeries(this.compilers, async (compiler) => {\n      const buildResult = await compiler.build(context);\n      return buildResult.componentsResults;\n    });\n\n    return {\n      componentsResults: mergeComponentResults(builds),\n      artifacts: this.getArtifactDefinition(),\n    };\n  }\n\n  async preBuild(context: BuildContext) {\n    await Promise.all(\n      this.compilers.map(async (compiler) => {\n        if (!compiler.preBuild) return;\n        await compiler.preBuild(context);\n      })\n    );\n  }\n\n  async postBuild(context: BuildContext, taskResults: TaskResultsList) {\n    await Promise.all(\n      this.compilers.map(async (compiler) => {\n        if (!compiler.postBuild) return;\n        await compiler.postBuild(context, taskResults);\n      })\n    );\n  }\n\n  private firstMatchedCompiler(filePath: string): Compiler | undefined {\n    return this.compilers.find((compiler) => compiler.isFileSupported(filePath));\n  }\n\n  /**\n   * given a source file, return its parallel in the dists. e.g. \"index.ts\" => \"dist/index.js\"\n   * both, the return path and the given path are relative paths.\n   */\n  getDistPathBySrcPath(srcPath: string): string {\n    const matchedCompiler = this.firstMatchedCompiler(srcPath);\n    if (!matchedCompiler) {\n      return join(this.distDir, srcPath);\n    }\n\n    return matchedCompiler.getDistPathBySrcPath(srcPath);\n  }\n\n  /**\n   * only supported files matching get compiled. others, are copied to the dist dir.\n   */\n  isFileSupported(filePath: string): boolean {\n    return !!this.firstMatchedCompiler(filePath);\n  }\n\n  /**\n   * returns the version of the current compiler instance (e.g. '4.0.1').\n   */\n  version(): string {\n    return this.compilers\n      .map((compiler) => {\n        return `${compiler.displayName}@${compiler.version()}`;\n      })\n      .join('\\n');\n  }\n}\n"]}