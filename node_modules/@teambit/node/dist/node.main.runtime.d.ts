import { VariantPolicyConfigObject } from '@teambit/dependency-resolver';
import { TsConfigSourceFile } from 'typescript';
import type { TsCompilerOptionsWithoutTsConfig } from '@teambit/typescript';
import { GeneratorMain } from '@teambit/generator';
import { BuildTask } from '@teambit/builder';
import { Compiler } from '@teambit/compiler';
import { PackageJsonProps } from '@teambit/pkg';
import { EnvsMain, EnvTransformer, Environment } from '@teambit/envs';
import { ReactMain } from '@teambit/react';
import { NodeEnv } from './node.env';
export declare class NodeMain {
    private react;
    readonly nodeEnv: NodeEnv;
    private envs;
    constructor(react: ReactMain, nodeEnv: NodeEnv, envs: EnvsMain);
    icon(): string;
    overrideTsConfig: (tsconfig: TsConfigSourceFile, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>, tsModule?: any) => EnvTransformer;
    overrideJestConfig: (jestConfigPath: string, jestModulePath?: string | undefined) => EnvTransformer;
    overrideBuildPipe: (tasks: BuildTask[]) => EnvTransformer;
    overrideCompiler: (compiler: Compiler) => EnvTransformer;
    overrideCompilerTasks: (tasks: BuildTask[]) => EnvTransformer;
    overrideBuildTsConfig: (tsconfig: any, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>) => EnvTransformer;
    overridePackageJsonProps: (props: PackageJsonProps) => EnvTransformer;
    overridePreviewConfig: (config: import("webpack").Configuration) => EnvTransformer;
    overrideDevServerConfig: (config: import("webpack").Configuration) => EnvTransformer;
    useTypescript: (modifiers?: import("@teambit/react").UseTypescriptModifiers | undefined, tsModule?: any) => EnvTransformer;
    useWebpack: (modifiers?: import("@teambit/react").UseWebpackModifiers | undefined) => EnvTransformer;
    usePrettier: (modifiers?: import("@teambit/react/react.main.runtime").UsePrettierModifiers | undefined) => EnvTransformer;
    useEslint: (modifiers?: import("@teambit/react/react.main.runtime").UseEslintModifiers | undefined) => EnvTransformer;
    overrideDependencies(dependencyPolicy: VariantPolicyConfigObject): EnvTransformer;
    overrideMounter: (mounterPath: string) => EnvTransformer;
    compose(transformers: EnvTransformer[], targetEnv?: Environment): Environment;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([envs, react, generator]: [EnvsMain, ReactMain, GeneratorMain]): Promise<NodeMain>;
}
