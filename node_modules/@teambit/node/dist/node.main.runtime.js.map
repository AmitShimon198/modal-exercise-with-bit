{"version":3,"sources":["node.main.runtime.ts"],"names":["NodeMain","constructor","react","nodeEnv","envs","overrideTsConfig","bind","overrideJestConfig","overrideBuildPipe","overrideCompiler","overrideCompilerTasks","overrideBuildTsConfig","overridePackageJsonProps","overridePreviewConfig","overrideDevServerConfig","useTypescript","useWebpack","usePrettier","useEslint","overrideMounter","icon","overrideDependencies","dependencyPolicy","override","getDependencies","compose","transformers","targetEnv","merge","provider","generator","NodeEnv","reactEnv","registerEnv","registerComponentTemplate","nodeEnvTemplate","MainRuntime","EnvsAspect","ReactAspect","GeneratorAspect","NodeAspect","addRuntime"],"mappings":"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","sourcesContent":["import { VariantPolicyConfigObject } from '@teambit/dependency-resolver';\nimport { merge } from 'lodash';\nimport { TsConfigSourceFile } from 'typescript';\nimport type { TsCompilerOptionsWithoutTsConfig } from '@teambit/typescript';\nimport { MainRuntime } from '@teambit/cli';\nimport { GeneratorAspect, GeneratorMain } from '@teambit/generator';\nimport { BuildTask } from '@teambit/builder';\nimport { Compiler } from '@teambit/compiler';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { EnvsAspect, EnvsMain, EnvTransformer, Environment } from '@teambit/envs';\nimport { ReactAspect, ReactMain } from '@teambit/react';\nimport { NodeAspect } from './node.aspect';\nimport { NodeEnv } from './node.env';\nimport { nodeEnvTemplate } from './templates/node-env';\n\nexport class NodeMain {\n  constructor(\n    private react: ReactMain,\n\n    readonly nodeEnv: NodeEnv,\n\n    private envs: EnvsMain\n  ) {}\n\n  icon() {\n    return 'https://static.bit.dev/extensions-icons/nodejs.svg';\n  }\n\n  /**\n   * @deprecated use useTypescript()\n   * override the TS config of the environment.\n   */\n  overrideTsConfig: (\n    tsconfig: TsConfigSourceFile,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>,\n    tsModule?: any\n  ) => EnvTransformer = this.react.overrideTsConfig.bind(this.react);\n\n  /**\n   * override the jest config of the environment.\n   */\n  overrideJestConfig = this.react.overrideJestConfig.bind(this.react);\n\n  /**\n   * override the env build pipeline.\n   */\n  overrideBuildPipe: (tasks: BuildTask[]) => EnvTransformer = this.react.overrideBuildPipe.bind(this.react);\n\n  /**\n   * override the env compilers list.\n   */\n  overrideCompiler: (compiler: Compiler) => EnvTransformer = this.react.overrideCompiler.bind(this.react);\n\n  /**\n   * override the env compilers tasks in the build pipe.\n   */\n  overrideCompilerTasks: (tasks: BuildTask[]) => EnvTransformer = this.react.overrideCompilerTasks.bind(this.react);\n\n  /**\n   * @deprecated use useTypescript()\n   * override the build ts config.\n   */\n  overrideBuildTsConfig: (\n    tsconfig: any,\n    compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>\n  ) => EnvTransformer = this.react.overrideBuildTsConfig.bind(this.react);\n\n  /**\n   * override package json properties.\n   */\n  overridePackageJsonProps: (props: PackageJsonProps) => EnvTransformer = this.react.overridePackageJsonProps.bind(\n    this.react\n  );\n\n  /**\n   * @deprecated - use useWebpack\n   * override the preview config in the env.\n   */\n  overridePreviewConfig = this.react.overridePreviewConfig.bind(this.react);\n\n  /**\n   * @deprecated - use useWebpack\n   * override the dev server configuration.\n   */\n  overrideDevServerConfig = this.react.overrideDevServerConfig.bind(this.react);\n\n  /**\n   * override the env's typescript config for both dev and build time.\n   * Replaces both overrideTsConfig (devConfig) and overrideBuildTsConfig (buildConfig)\n   */\n  useTypescript = this.react.useTypescript.bind(this.react);\n\n  /**\n   * override the env's dev server and preview webpack configurations.\n   * Replaces both overrideDevServerConfig and overridePreviewConfig\n   */\n  useWebpack = this.react.useWebpack.bind(this.react);\n\n  /**\n   * An API to mutate the prettier config\n   */\n  usePrettier = this.react.usePrettier.bind(this.react);\n\n  /**\n   * An API to mutate the eslint config\n   */\n  useEslint = this.react.useEslint.bind(this.react);\n\n  /**\n   * override the dependency configuration of the component environment.\n   */\n  overrideDependencies(dependencyPolicy: VariantPolicyConfigObject) {\n    return this.envs.override({\n      getDependencies: () => merge(dependencyPolicy, this.nodeEnv.getDependencies()),\n    });\n  }\n\n  overrideMounter = this.react.overrideMounter.bind(this.react);\n\n  /**\n   * create a new composition of the node environment.\n   */\n  compose(transformers: EnvTransformer[], targetEnv: Environment = {}) {\n    return this.envs.compose(this.envs.merge(targetEnv, this.nodeEnv), transformers);\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [EnvsAspect, ReactAspect, GeneratorAspect];\n\n  static async provider([envs, react, generator]: [EnvsMain, ReactMain, GeneratorMain]) {\n    const nodeEnv: NodeEnv = envs.merge(new NodeEnv(), react.reactEnv);\n    envs.registerEnv(nodeEnv);\n    generator.registerComponentTemplate([nodeEnvTemplate]);\n    return new NodeMain(react, nodeEnv, envs);\n  }\n}\n\nNodeAspect.addRuntime(NodeMain);\n"]}