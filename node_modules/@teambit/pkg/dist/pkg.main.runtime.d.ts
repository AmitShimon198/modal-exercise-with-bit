import { CLIMain } from '@teambit/cli';
import { Component, ComponentMain, Snap } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { SlotRegistry } from '@teambit/harmony';
import { IsolatorMain } from '@teambit/isolator';
import { LoggerMain, Logger } from '@teambit/logger';
import { ScopeMain } from '@teambit/scope';
import { Workspace } from '@teambit/workspace';
import LegacyComponent from '@teambit/legacy/dist/consumer/component';
import { BuilderMain } from '@teambit/builder';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { GraphqlMain } from '@teambit/graphql';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { Packer, PackOptions, PackResult } from './packer';
import { PublishTask } from './publish.task';
import { PkgArtifact } from './pkg-artifact';
export interface PackageJsonProps {
    [key: string]: any;
}
export declare type PackageJsonPropsRegistry = SlotRegistry<PackageJsonProps>;
export declare type PkgExtensionConfig = {};
export declare type ComponentPkgExtensionConfig = {
    packageJson: Record<string, any>;
};
export declare type ComponentPkgExtensionData = {
    packageJsonModification: Record<string, any>;
    pkgJson?: Record<string, any>;
    checksum?: string;
};
declare type ComponentPackageManifest = {
    name: string;
    distTags: Record<string, string>;
    externalRegistry: boolean;
    versions: VersionPackageManifest[];
};
declare type VersionPackageManifest = {
    [key: string]: any;
    dist: {
        tarball: string;
        shasum: string;
    };
};
export declare class PkgMain {
    readonly logger: Logger;
    readonly config: PkgExtensionConfig;
    private packageJsonPropsRegistry;
    private workspace;
    private scope;
    private builder;
    private packer;
    private envs;
    private componentAspect;
    publishTask: PublishTask;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: ((registerFn: () => string) => SlotRegistry<PackageJsonProps>)[];
    static defaultConfig: {};
    static provider([cli, scope, envs, isolator, logger, workspace, builder, dependencyResolver, componentAspect, graphql]: [
        CLIMain,
        ScopeMain,
        EnvsMain,
        IsolatorMain,
        LoggerMain,
        Workspace,
        BuilderMain,
        DependencyResolverMain,
        ComponentMain,
        GraphqlMain
    ], config: PkgExtensionConfig, [packageJsonPropsRegistry]: [PackageJsonPropsRegistry]): Promise<PkgMain>;
    getPackageName(component: Component): string;
    getModulePath(component: Component, options?: {
        absPath?: boolean;
    }): string;
    constructor(logger: Logger, config: PkgExtensionConfig, packageJsonPropsRegistry: PackageJsonPropsRegistry, workspace: Workspace, scope: ScopeMain, builder: BuilderMain, packer: Packer, envs: EnvsMain, componentAspect: ComponentMain, publishTask: PublishTask);
    registerPackageJsonNewProps(props: PackageJsonProps): void;
    packComponent(componentId: string, scopePath: string | undefined, options: PackOptions): Promise<PackResult>;
    mergePackageJsonProps(component: Component): Promise<PackageJsonProps>;
    getPackageJsonModifications(component: Component): Record<string, any>;
    getPkgArtifact(component: Component): Promise<PkgArtifact>;
    getManifest(component: Component): Promise<ComponentPackageManifest>;
    private getAllSnapsManifests;
    isPublishedToExternalRegistry(component: Component): boolean;
    private getComponentBuildData;
    getSnapManifest(component: Component, snap: Snap): Promise<VersionPackageManifest | undefined>;
    getPackageTarFile(component: Component): Promise<AbstractVinyl>;
    transformPackageJson(legacyComponent: LegacyComponent, packageJsonObject: Record<string, any>): Promise<Record<string, any>>;
}
export {};
