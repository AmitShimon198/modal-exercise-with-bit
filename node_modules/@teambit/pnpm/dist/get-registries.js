"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getRegistries = getRegistries;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _credentialsByUri() {
  const data = _interopRequireDefault(require("credentials-by-uri"));

  _credentialsByUri = function () {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@teambit/legacy/dist/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _lodash() {
  const data = require("lodash");

  _lodash = function () {
    return data;
  };

  return data;
}

function _nerfDart() {
  const data = _interopRequireDefault(require("nerf-dart"));

  _nerfDart = function () {
    return data;
  };

  return data;
}

function _readConfig() {
  const data = require("./read-config");

  _readConfig = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

async function getRegistries() {
  const config = await (0, _readConfig().readConfig)();
  const registriesMap = {};
  Object.keys(config.config.registries).forEach(regName => {
    const uri = config.config.registries[regName];
    let credentials = (0, _credentialsByUri().default)(config.config.rawConfig, uri);
    let originalAuthConfig = getOriginalAuthConfigByUri(config.config.rawConfig, uri);

    if ((0, _lodash().isEmpty)(credentials)) {
      credentials = (0, _credentialsByUri().default)(config.config.rawConfig, switchTrailingSlash(uri));
      originalAuthConfig = getOriginalAuthConfigByUri(config.config.rawConfig, switchTrailingSlash(uri));
    }

    registriesMap[regName] = _objectSpread({
      uri,
      alwaysAuth: !!credentials.alwaysAuth,
      authHeaderValue: credentials.authHeaderValue
    }, originalAuthConfig);
  });
  return registriesMap;
} // based on https://github.com/pnpm/credentials-by-uri/blob/master/index.js


function getOriginalAuthConfigByUri(config, uri) {
  const nerfed = (0, _nerfDart().default)(uri);
  const defnerf = (0, _nerfDart().default)(config.registry);
  const creds = getScopedCredentials(nerfed, `${nerfed}:`, config);
  if (nerfed !== defnerf) return creds;
  const defaultCredentials = getScopedCredentials(nerfed, '', config);
  return {
    originalAuthType: creds.originalAuthType || defaultCredentials.originalAuthType,
    originalAuthValue: creds.originalAuthValue || defaultCredentials.originalAuthValue
  };
}

function getScopedCredentials(nerfed, scope, config) {
  const token = config[`${scope}_authToken`]; // Check for bearer token

  if (token) {
    return {
      originalAuthType: `authToken`,
      originalAuthValue: token
    };
  }

  const auth = config[`${scope}_auth`]; // Check for basic auth token

  if (auth) {
    return {
      originalAuthType: `auth`,
      originalAuthValue: auth
    };
  } // Check for username/password auth


  let username;
  let password;

  if (config[`${scope}username`]) {
    username = config[`${scope}username`];
  }

  if (config[`${scope}_password`]) {
    if (scope === '') {
      password = config[`${scope}_password`];
    } else {
      password = Buffer.from(config[`${scope}_password`], 'base64').toString('utf8');
    }
  }

  if (username && password) {
    return {
      originalAuthType: `user-pass`,
      originalAuthValue: `${username}:${password}`
    };
  }

  return {
    originalAuthType: '',
    originalAuthValue: ''
  };
}

function switchTrailingSlash(uri) {
  if (!uri.endsWith('/')) {
    return `${uri}/`;
  }

  return (0, _utils().stripTrailingChar)(uri, '/');
}

//# sourceMappingURL=get-registries.js.map