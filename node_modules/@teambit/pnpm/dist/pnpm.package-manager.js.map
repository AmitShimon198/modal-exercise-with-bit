{"version":3,"sources":["pnpm.package-manager.ts"],"names":["defaultStoreDir","userHome","PnpmPackageManager","constructor","depResolver","pkg","logger","install","rootDir","rootPolicy","componentDirectoryMap","installOptions","require","storeDir","cacheRootDir","components","toArray","map","component","options","filterComponentsFromManifests","createManifestForComponentsWithoutDependencies","dedupe","dependencyFilterFn","workspaceManifest","getWorkspaceManifest","undefined","rootManifest","toJson","includeDir","copyPeerToRuntime","copyPeerToRuntimeOnRoot","componentsManifests","computeComponentsManifests","componentsManifestsMap","copyPeerToRuntimeOnComponents","debug","setStatusLine","off","registries","getRegistries","proxyConfig","getProxyConfig","on","console","consoleSuccess","componentsManifestsFromWorkspace","reduce","acc","dir","packageName","getPackageName","has","get","resolveRemoteVersion","pnpmRegistry","defaultRegistry","Registry","default","uri","alwaysAuth","authHeaderValue","originalAuthType","originalAuthValue","pnpmScoped","scopesRegistries","Object","keys","scopedRegName","scopedReg","name","replace","bit","BIT_DEV_REGISTRY","Registries"],"mappings":"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","sourcesContent":["import { ComponentMap } from '@teambit/component';\nimport {\n  ComponentsManifestsMap,\n  CreateFromComponentsOptions,\n  WorkspacePolicy,\n  DependencyResolverMain,\n  PackageManager,\n  PackageManagerInstallOptions,\n  PackageManagerResolveRemoteVersionOptions,\n  ResolvedPackageVersion,\n  Registries,\n  Registry,\n  BIT_DEV_REGISTRY,\n  PackageManagerProxyConfig,\n} from '@teambit/dependency-resolver';\nimport { Logger } from '@teambit/logger';\nimport { omit } from 'lodash';\nimport { PkgMain } from '@teambit/pkg';\nimport { join } from 'path';\nimport userHome from 'user-home';\n\nconst defaultStoreDir = join(userHome, '.pnpm-store');\n\nexport class PnpmPackageManager implements PackageManager {\n  constructor(private depResolver: DependencyResolverMain, private pkg: PkgMain, private logger: Logger) {}\n\n  async install(\n    rootDir: string,\n    rootPolicy: WorkspacePolicy,\n    componentDirectoryMap: ComponentMap<string>,\n    installOptions: PackageManagerInstallOptions = {}\n  ): Promise<void> {\n    // require it dynamically for performance purpose. the pnpm package require many files - do not move to static import\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const { install } = require('./lynx');\n    const storeDir = installOptions?.cacheRootDir ? join(installOptions?.cacheRootDir, '.pnpm-store') : defaultStoreDir;\n\n    const components = componentDirectoryMap.toArray().map(([component]) => component);\n    const options: CreateFromComponentsOptions = {\n      filterComponentsFromManifests: true,\n      createManifestForComponentsWithoutDependencies: true,\n      dedupe: installOptions.dedupe,\n      dependencyFilterFn: installOptions.dependencyFilterFn,\n    };\n    const workspaceManifest = await this.depResolver.getWorkspaceManifest(\n      undefined,\n      undefined,\n      rootPolicy,\n      rootDir,\n      components,\n      options\n    );\n    const rootManifest = workspaceManifest.toJson({\n      includeDir: true,\n      copyPeerToRuntime: installOptions.copyPeerToRuntimeOnRoot,\n    });\n\n    const componentsManifests = this.computeComponentsManifests(\n      componentDirectoryMap,\n      workspaceManifest.componentsManifestsMap,\n      // In case of not deduping we want to install peers inside the components\n      // !options.dedupe\n      installOptions.copyPeerToRuntimeOnComponents\n    );\n    this.logger.debug('root manifest for installation', rootManifest);\n    this.logger.debug('components manifests for installation', componentsManifests);\n    this.logger.setStatusLine('installing dependencies using pnpm');\n    // turn off the logger because it interrupts the pnpm output\n    this.logger.off();\n    const registries = await this.depResolver.getRegistries();\n    const proxyConfig = await this.depResolver.getProxyConfig();\n    await install(rootManifest, componentsManifests, storeDir, registries, proxyConfig, this.logger);\n    this.logger.on();\n    // Make a divider row to improve output\n    this.logger.console('-------------------------');\n    this.logger.consoleSuccess('installing dependencies using pnpm');\n  }\n\n  private computeComponentsManifests(\n    componentDirectoryMap: ComponentMap<string>,\n    componentsManifestsFromWorkspace: ComponentsManifestsMap,\n    copyPeerToRuntime = false\n  ) {\n    return componentDirectoryMap.toArray().reduce((acc, [component, dir]) => {\n      const packageName = this.pkg.getPackageName(component);\n      if (componentsManifestsFromWorkspace.has(packageName)) {\n        acc[dir] = componentsManifestsFromWorkspace.get(packageName)?.toJson({ copyPeerToRuntime });\n      }\n      return acc;\n    }, {});\n  }\n\n  async resolveRemoteVersion(\n    packageName: string,\n    options: PackageManagerResolveRemoteVersionOptions\n  ): Promise<ResolvedPackageVersion> {\n    // require it dynamically for performance purpose. the pnpm package require many files - do not move to static import\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const { resolveRemoteVersion } = require('./lynx');\n    const storeDir = options?.cacheRootDir ? join(options?.cacheRootDir, '.pnpm-store') : defaultStoreDir;\n    const registries = await this.depResolver.getRegistries();\n    const proxyConfig = await this.depResolver.getProxyConfig();\n    return resolveRemoteVersion(packageName, options.rootDir, storeDir, registries, proxyConfig);\n  }\n\n  async getProxyConfig?(): Promise<PackageManagerProxyConfig> {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const { getProxyConfig } = require('./get-proxy-config');\n    return getProxyConfig();\n  }\n\n  async getRegistries(): Promise<Registries> {\n    // eslint-disable-next-line global-require, import/no-dynamic-require\n    const { getRegistries } = require('./get-registries');\n    const pnpmRegistry = await getRegistries();\n    const defaultRegistry = new Registry(\n      pnpmRegistry.default.uri,\n      pnpmRegistry.default.alwaysAuth,\n      pnpmRegistry.default.authHeaderValue,\n      pnpmRegistry.default.originalAuthType,\n      pnpmRegistry.default.originalAuthValue\n    );\n\n    const pnpmScoped = omit(pnpmRegistry, ['default']);\n    const scopesRegistries: Record<string, Registry> = Object.keys(pnpmScoped).reduce((acc, scopedRegName) => {\n      const scopedReg = pnpmScoped[scopedRegName];\n      const name = scopedRegName.replace('@', '');\n      acc[name] = new Registry(\n        scopedReg.uri,\n        scopedReg.alwaysAuth,\n        scopedReg.authHeaderValue,\n        scopedReg.originalAuthType,\n        scopedReg.originalAuthValue\n      );\n      return acc;\n    }, {});\n\n    // Add bit registry server if not exist\n    if (!scopesRegistries.bit) {\n      scopesRegistries.bit = new Registry(BIT_DEV_REGISTRY, true);\n    }\n\n    return new Registries(defaultRegistry, scopesRegistries);\n  }\n}\n"]}