import { BuilderMain } from '@teambit/builder';
import { BundlerMain } from '@teambit/bundler';
import { PubsubMain } from '@teambit/pubsub';
import { Component, ComponentMain, ComponentMap } from '@teambit/component';
import { EnvsMain } from '@teambit/envs';
import { SlotRegistry, Harmony } from '@teambit/harmony';
import { UiMain } from '@teambit/ui';
import { PkgMain } from '@teambit/pkg';
import { AspectLoaderMain } from '@teambit/aspect-loader';
import { Workspace } from '@teambit/workspace';
import { LoggerMain, Logger } from '@teambit/logger';
import { PreviewArtifact } from './preview-artifact';
import { PreviewDefinition } from './preview-definition';
import { BundlingStrategy } from './bundling-strategy';
export declare type PreviewDefinitionRegistry = SlotRegistry<PreviewDefinition>;
export declare type PreviewConfig = {
    bundlingStrategy: string;
    disabled: boolean;
};
export declare type BundlingStrategySlot = SlotRegistry<BundlingStrategy>;
export declare class PreviewMain {
    private harmony;
    private previewSlot;
    private ui;
    private envs;
    private pkg;
    private aspectLoader;
    readonly config: PreviewConfig;
    private bundlingStrategySlot;
    private builder;
    private workspace;
    private logger;
    constructor(harmony: Harmony, previewSlot: PreviewDefinitionRegistry, ui: UiMain, envs: EnvsMain, pkg: PkgMain, aspectLoader: AspectLoaderMain, config: PreviewConfig, bundlingStrategySlot: BundlingStrategySlot, builder: BuilderMain, workspace: Workspace | undefined, logger: Logger);
    get tempFolder(): string;
    getPreview(component: Component): Promise<PreviewArtifact | undefined>;
    getDefs(): PreviewDefinition[];
    private writeHash;
    private timestamp;
    writeLink(prefix: string, moduleMap: ComponentMap<string[]>, defaultModule: string | undefined, dirName: string): string;
    private executionRefs;
    private getPreviewTarget;
    private updateLinkFiles;
    writePreviewRuntime(context: {
        components: Component[];
    }): Promise<string>;
    private filterAspectsByExecutionContext;
    private getDefaultStrategies;
    private handleComponentChange;
    private handleComponentRemoval;
    getBundlingStrategy(): BundlingStrategy;
    registerBundlingStrategy(bundlingStrategy: BundlingStrategy): this;
    registerDefinition(previewDef: PreviewDefinition): void;
    static slots: (((registerFn: () => string) => SlotRegistry<PreviewDefinition>) | ((registerFn: () => string) => SlotRegistry<BundlingStrategy>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        bundlingStrategy: string;
        disabled: boolean;
    };
    static provider([bundler, builder, componentExtension, uiMain, envs, workspace, pkg, pubsub, aspectLoader, loggerMain]: [
        BundlerMain,
        BuilderMain,
        ComponentMain,
        UiMain,
        EnvsMain,
        Workspace | undefined,
        PkgMain,
        PubsubMain,
        AspectLoaderMain,
        LoggerMain
    ], config: PreviewConfig, [previewSlot, bundlingStrategySlot]: [PreviewDefinitionRegistry, BundlingStrategySlot], harmony: Harmony): Promise<PreviewMain>;
}
