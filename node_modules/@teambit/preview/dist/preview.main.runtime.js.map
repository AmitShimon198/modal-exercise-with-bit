{"version":3,"sources":["preview.main.runtime.tsx"],"names":["noopResult","results","toString","DEFAULT_TEMP_DIR","CACHE_ROOT","PreviewAspect","id","PreviewMain","constructor","harmony","previewSlot","ui","envs","pkg","aspectLoader","config","bundlingStrategySlot","builder","workspace","logger","Map","Date","now","c","updater","env","getEnv","envId","executionRef","executionRefs","get","warn","updateLinkFiles","currentComponents","executionCtx","cId","component","forEach","components","found","Promise","resolve","handleComponentChange","remove","tempFolder","getTempDir","getPreview","artifacts","getArtifactsVinylByExtension","length","undefined","PreviewArtifact","getDefs","values","writeLink","prefix","moduleMap","defaultModule","dirName","contents","hash","targetPath","timestamp","writeHash","set","getPreviewTarget","context","relatedContexts","ctxId","ExecutionRef","previewRuntime","writePreviewRuntime","linkFiles","previews","paths","map","previewDef","templatePath","renderTemplatePath","getModuleMap","environment","envRuntime","compilerInstance","getCompiler","withPaths","files","modulePath","getModulePath","file","path","distRelativePath","getDistPathBySrcPath","relative","dirPath","recursive","link","all","getUi","Error","name","uiRoot","resolvedAspects","resolveAspects","PreviewRuntime","filteredAspects","filterAspectsByExecutionContext","filePath","generateRoot","aspects","allComponentContextAspects","reduce","acc","curr","concat","state","ids","hostAspects","Object","keys","toObject","allAspectsToInclude","filtered","filter","aspect","getId","isCoreAspect","includes","getDefaultStrategies","EnvBundlingStrategy","ComponentBundlingStrategy","getBundlingStrategy","defaultStrategies","strategyName","bundlingStrategy","strategies","selected","find","strategy","BundlingStrategyNotFound","registerBundlingStrategy","register","registerDefinition","provider","bundler","componentExtension","uiMain","pubsub","loggerMain","createLogger","preview","registerStartPlugin","PreviewStartPlugin","registerRoute","PreviewRoute","registerTarget","entry","bind","disabled","registerBuildTasks","PreviewTask","registerOnComponentAdd","add","registerOnComponentChange","update","registerOnComponentRemove","handleComponentRemoval","Slot","withType","MainRuntime","BundlerAspect","BuilderAspect","ComponentAspect","UIAspect","EnvsAspect","WorkspaceAspect","PkgAspect","PubsubAspect","AspectLoaderAspect","LoggerAspect","addRuntime"],"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","sourcesContent":["import { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { BundlerAspect, BundlerMain } from '@teambit/bundler';\nimport { PubsubAspect, PubsubMain } from '@teambit/pubsub';\nimport { MainRuntime } from '@teambit/cli';\nimport { Component, ComponentAspect, ComponentMain, ComponentMap, ComponentID } from '@teambit/component';\nimport { EnvsAspect, EnvsMain, ExecutionContext, hasCompiler } from '@teambit/envs';\nimport { Slot, SlotRegistry, Harmony } from '@teambit/harmony';\nimport { UIAspect, UiMain } from '@teambit/ui';\nimport { CACHE_ROOT } from '@teambit/legacy/dist/constants';\nimport objectHash from 'object-hash';\nimport { uniq } from 'lodash';\nimport { writeFileSync, existsSync, mkdirSync } from 'fs-extra';\nimport { join } from 'path';\nimport { PkgAspect, PkgMain } from '@teambit/pkg';\nimport { AspectDefinition, AspectLoaderMain, AspectLoaderAspect } from '@teambit/aspect-loader';\nimport WorkspaceAspect, { Workspace } from '@teambit/workspace';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { BundlingStrategyNotFound } from './exceptions';\nimport { generateLink } from './generate-link';\nimport { PreviewArtifact } from './preview-artifact';\nimport { PreviewDefinition } from './preview-definition';\nimport { PreviewAspect, PreviewRuntime } from './preview.aspect';\nimport { PreviewRoute } from './preview.route';\nimport { PreviewTask } from './preview.task';\nimport { BundlingStrategy } from './bundling-strategy';\nimport { EnvBundlingStrategy, ComponentBundlingStrategy } from './strategies';\nimport { ExecutionRef } from './execution-ref';\nimport { PreviewStartPlugin } from './preview.start-plugin';\n\nconst noopResult = {\n  results: [],\n  toString: () => `updating link file`,\n};\n\nconst DEFAULT_TEMP_DIR = join(CACHE_ROOT, PreviewAspect.id);\n\nexport type PreviewDefinitionRegistry = SlotRegistry<PreviewDefinition>;\n\nexport type PreviewConfig = {\n  bundlingStrategy: string;\n  disabled: boolean;\n};\n\nexport type BundlingStrategySlot = SlotRegistry<BundlingStrategy>;\n\nexport class PreviewMain {\n  constructor(\n    /**\n     * harmony context.\n     */\n    private harmony: Harmony,\n\n    /**\n     * slot for preview definitions.\n     */\n    private previewSlot: PreviewDefinitionRegistry,\n\n    private ui: UiMain,\n\n    private envs: EnvsMain,\n\n    private pkg: PkgMain,\n\n    private aspectLoader: AspectLoaderMain,\n\n    readonly config: PreviewConfig,\n\n    private bundlingStrategySlot: BundlingStrategySlot,\n\n    private builder: BuilderMain,\n\n    private workspace: Workspace | undefined,\n\n    private logger: Logger\n  ) {}\n\n  get tempFolder(): string {\n    return this.workspace?.getTempDir(PreviewAspect.id) || DEFAULT_TEMP_DIR;\n  }\n\n  async getPreview(component: Component): Promise<PreviewArtifact | undefined> {\n    const artifacts = await this.builder.getArtifactsVinylByExtension(component, PreviewAspect.id);\n    if (!artifacts.length) return undefined;\n\n    return new PreviewArtifact(artifacts);\n  }\n\n  getDefs(): PreviewDefinition[] {\n    return this.previewSlot.values();\n  }\n\n  private writeHash = new Map<string, string>();\n  private timestamp = Date.now();\n\n  /**\n   * write a link to load custom modules dynamically.\n   * @param prefix write\n   * @param moduleMap map of components to module paths to require.\n   * @param defaultModule\n   * @param dirName\n   */\n  writeLink(prefix: string, moduleMap: ComponentMap<string[]>, defaultModule: string | undefined, dirName: string) {\n    const contents = generateLink(prefix, moduleMap, defaultModule);\n    const hash = objectHash(contents);\n    const targetPath = join(dirName, `__${prefix}-${this.timestamp}.js`);\n\n    // write only if link has changed (prevents triggering fs watches)\n    if (this.writeHash.get(targetPath) !== hash) {\n      writeFileSync(targetPath, contents);\n      this.writeHash.set(targetPath, hash);\n    }\n\n    return targetPath;\n  }\n\n  private executionRefs = new Map<string, ExecutionRef>();\n\n  private async getPreviewTarget(\n    /** execution context (of the specific env) */\n    context: ExecutionContext\n  ): Promise<string[]> {\n    // store context for later link-file updates\n    // also register related envs that this context is acting on their behalf\n    [context.id, ...context.relatedContexts].forEach((ctxId) => {\n      this.executionRefs.set(ctxId, new ExecutionRef(context));\n    });\n\n    const previewRuntime = await this.writePreviewRuntime(context);\n    const linkFiles = await this.updateLinkFiles(context.components, context);\n\n    return [...linkFiles, previewRuntime];\n  }\n\n  private updateLinkFiles(components: Component[] = [], context: ExecutionContext) {\n    const previews = this.previewSlot.values();\n    const paths = previews.map(async (previewDef) => {\n      const templatePath = await previewDef.renderTemplatePath?.(context);\n\n      const map = await previewDef.getModuleMap(components);\n      const environment = context.envRuntime.env;\n\n      const compilerInstance = hasCompiler(environment) && environment.getCompiler();\n      const withPaths = map.map<string[]>((files, component) => {\n        const modulePath = this.pkg.getModulePath(component);\n        return files.map((file) => {\n          if (!this.workspace || !compilerInstance) {\n            return file.path;\n          }\n          const distRelativePath = compilerInstance.getDistPathBySrcPath(file.relative);\n          return join(this.workspace.path, modulePath, distRelativePath);\n        });\n        // return files.map((file) => file.path);\n      });\n\n      const dirPath = join(this.tempFolder, context.id);\n      if (!existsSync(dirPath)) mkdirSync(dirPath, { recursive: true });\n\n      const link = this.writeLink(previewDef.prefix, withPaths, templatePath, dirPath);\n      return link;\n    });\n\n    return Promise.all(paths);\n  }\n\n  async writePreviewRuntime(context: { components: Component[] }) {\n    const ui = this.ui.getUi();\n    if (!ui) throw new Error('ui not found');\n    const [name, uiRoot] = ui;\n    const resolvedAspects = await uiRoot.resolveAspects(PreviewRuntime.name);\n    const filteredAspects = this.filterAspectsByExecutionContext(resolvedAspects, context);\n    const filePath = await this.ui.generateRoot(filteredAspects, name, 'preview', PreviewAspect.id);\n    return filePath;\n  }\n\n  /**\n   * Filter the aspects to have only aspects that are:\n   * 1. core aspects\n   * 2. configured on the host (workspace/scope)\n   * 3. used by at least one component from the context\n   * @param aspects\n   * @param context\n   */\n  private filterAspectsByExecutionContext(aspects: AspectDefinition[], context: { components: Component[] }) {\n    let allComponentContextAspects: string[] = [];\n    allComponentContextAspects = context.components.reduce((acc, curr) => {\n      return acc.concat(curr.state.aspects.ids);\n    }, allComponentContextAspects);\n    const hostAspects = Object.keys(this.harmony.config.toObject());\n    const allAspectsToInclude = uniq(hostAspects.concat(allComponentContextAspects));\n    const filtered = aspects.filter((aspect) => {\n      if (!aspect.getId) {\n        return false;\n      }\n      return this.aspectLoader.isCoreAspect(aspect.getId) || allAspectsToInclude.includes(aspect.getId);\n    });\n    return filtered;\n  }\n\n  private getDefaultStrategies() {\n    return [new EnvBundlingStrategy(this), new ComponentBundlingStrategy()];\n  }\n\n  // TODO - executionContext should be responsible for updating components list, and emit 'update' events\n  // instead we keep track of changes\n  private handleComponentChange = async (c: Component, updater: (currentComponents: ExecutionRef) => void) => {\n    const env = this.envs.getEnv(c);\n    const envId = env.id.toString();\n\n    const executionRef = this.executionRefs.get(envId);\n    if (!executionRef) {\n      this.logger.warn(\n        `failed to update link file for component \"${c.id.toString()}\" - could not find execution context for ${envId}`\n      );\n      return noopResult;\n    }\n\n    // add / remove / etc\n    updater(executionRef);\n\n    await this.updateLinkFiles(executionRef.currentComponents, executionRef.executionCtx);\n\n    return noopResult;\n  };\n\n  private handleComponentRemoval = (cId: ComponentID) => {\n    let component: Component | undefined;\n    this.executionRefs.forEach((components) => {\n      const found = components.get(cId);\n      if (found) component = found;\n    });\n    if (!component) return Promise.resolve(noopResult);\n\n    return this.handleComponentChange(component, (currentComponents) => currentComponents.remove(cId));\n  };\n\n  /**\n   * return the configured bundling strategy.\n   */\n  getBundlingStrategy(): BundlingStrategy {\n    const defaultStrategies = this.getDefaultStrategies();\n    const strategyName = this.config.bundlingStrategy;\n    const strategies = this.bundlingStrategySlot.values().concat(defaultStrategies);\n    const selected = strategies.find((strategy) => {\n      return strategy.name === strategyName;\n    });\n\n    if (!selected) throw new BundlingStrategyNotFound(strategyName);\n\n    return selected;\n  }\n\n  /**\n   * register a new bundling strategy. default available strategies are `env` and ``\n   */\n  registerBundlingStrategy(bundlingStrategy: BundlingStrategy) {\n    this.bundlingStrategySlot.register(bundlingStrategy);\n    return this;\n  }\n\n  /**\n   * register a new preview definition.\n   */\n  registerDefinition(previewDef: PreviewDefinition) {\n    this.previewSlot.register(previewDef);\n  }\n\n  static slots = [Slot.withType<PreviewDefinition>(), Slot.withType<BundlingStrategy>()];\n\n  static runtime = MainRuntime;\n  static dependencies = [\n    BundlerAspect,\n    BuilderAspect,\n    ComponentAspect,\n    UIAspect,\n    EnvsAspect,\n    WorkspaceAspect,\n    PkgAspect,\n    PubsubAspect,\n    AspectLoaderAspect,\n    LoggerAspect,\n  ];\n\n  static defaultConfig = {\n    bundlingStrategy: 'env',\n    disabled: false,\n  };\n\n  static async provider(\n    [bundler, builder, componentExtension, uiMain, envs, workspace, pkg, pubsub, aspectLoader, loggerMain]: [\n      BundlerMain,\n      BuilderMain,\n      ComponentMain,\n      UiMain,\n      EnvsMain,\n      Workspace | undefined,\n      PkgMain,\n      PubsubMain,\n      AspectLoaderMain,\n      LoggerMain\n    ],\n    config: PreviewConfig,\n    [previewSlot, bundlingStrategySlot]: [PreviewDefinitionRegistry, BundlingStrategySlot],\n    harmony: Harmony\n  ) {\n    const logger = loggerMain.createLogger(PreviewAspect.id);\n\n    const preview = new PreviewMain(\n      harmony,\n      previewSlot,\n      uiMain,\n      envs,\n      pkg,\n      aspectLoader,\n      config,\n      bundlingStrategySlot,\n      builder,\n      workspace,\n      logger\n    );\n\n    if (workspace) uiMain.registerStartPlugin(new PreviewStartPlugin(workspace, bundler, uiMain, pubsub));\n\n    componentExtension.registerRoute([new PreviewRoute(preview, logger)]);\n    bundler.registerTarget([\n      {\n        entry: preview.getPreviewTarget.bind(preview),\n      },\n    ]);\n\n    if (!config.disabled) builder.registerBuildTasks([new PreviewTask(bundler, preview)]);\n\n    if (workspace) {\n      workspace.registerOnComponentAdd((c) =>\n        preview.handleComponentChange(c, (currentComponents) => currentComponents.add(c))\n      );\n      workspace.registerOnComponentChange((c) =>\n        preview.handleComponentChange(c, (currentComponents) => currentComponents.update(c))\n      );\n      workspace.registerOnComponentRemove((cId) => preview.handleComponentRemoval(cId));\n    }\n\n    return preview;\n  }\n}\n\nPreviewAspect.addRuntime(PreviewMain);\n"]}