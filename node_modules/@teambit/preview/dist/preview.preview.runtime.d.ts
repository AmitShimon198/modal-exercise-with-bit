import { PubsubPreview } from '@teambit/pubsub';
import { SlotRegistry } from '@teambit/harmony';
import { PreviewType } from './preview-type';
import { RenderingContext } from './rendering-context';
export declare type PreviewSlot = SlotRegistry<PreviewType>;
export declare type RenderingContextProvider = () => {
    [key: string]: any;
};
export declare type RenderingContextSlot = SlotRegistry<RenderingContextProvider>;
export declare class PreviewPreview {
    private pubsub;
    private previewSlot;
    private renderingContextSlot;
    constructor(pubsub: PubsubPreview, previewSlot: PreviewSlot, renderingContextSlot: RenderingContextSlot);
    private registerClickPubSub;
    render: () => void;
    registerPreview(preview: PreviewType): this;
    getRenderingContext(): RenderingContext;
    registerRenderContext(renderContext: RenderingContextProvider): this;
    getDefault(): string;
    private getPreview;
    private getParam;
    private getLocation;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<PreviewType>) | ((registerFn: () => string) => SlotRegistry<RenderingContextProvider>))[];
    static provider([pubsub]: [PubsubPreview], config: any, [previewSlot, renderingContextSlot]: [PreviewSlot, RenderingContextSlot]): Promise<PreviewPreview>;
}
export declare function linkModules(previewName: string, defaultModule: any, componentMap: {
    [key: string]: any;
}): void;
