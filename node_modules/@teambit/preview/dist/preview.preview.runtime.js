"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

require("core-js/modules/es.regexp.exec.js");

require("core-js/modules/web.url.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkModules = linkModules;
exports.PreviewPreview = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _pubsub() {
  const data = _interopRequireDefault(require("@teambit/pubsub"));

  _pubsub = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _componentId() {
  const data = require("@teambit/component-id");

  _componentId = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("./exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _preview() {
  const data = require("./preview.aspect");

  _preview = function () {
    return data;
  };

  return data;
}

function _events() {
  const data = require("./events");

  _events = function () {
    return data;
  };

  return data;
}

function _renderingContext() {
  const data = require("./rendering-context");

  _renderingContext = function () {
    return data;
  };

  return data;
}

const PREVIEW_MODULES = {};

class PreviewPreview {
  constructor(
  /**
   * register to pubsub
   */
  pubsub,
  /**
   * preview slot.
   */
  previewSlot, renderingContextSlot) {
    this.pubsub = pubsub;
    this.previewSlot = previewSlot;
    this.renderingContextSlot = renderingContextSlot;
    (0, _defineProperty2().default)(this, "render", () => {
      const {
        previewName,
        componentId
      } = this.getLocation();
      const name = previewName || this.getDefault();
      const preview = this.getPreview(name);

      if (!preview || !componentId) {
        throw new (_exceptions().PreviewNotFound)(previewName);
      }

      const includes = (preview.include || []).map(prevName => {
        var _includedPreview$sele;

        const includedPreview = this.getPreview(prevName);
        if (!includedPreview) return undefined;
        return (_includedPreview$sele = includedPreview.selectPreviewModel) === null || _includedPreview$sele === void 0 ? void 0 : _includedPreview$sele.call(includedPreview, componentId.fullName, PREVIEW_MODULES[prevName]);
      }).filter(module => !!module);
      return preview.render(componentId.fullName, PREVIEW_MODULES[name], includes, this.getRenderingContext());
    });
    this.registerClickPubSub();
  }

  registerClickPubSub() {
    window.addEventListener('click', e => {
      const timestamp = Date.now();
      const clickEvent = Object.assign({}, e);
      this.pubsub.pub(_preview().PreviewAspect.id, new (_events().ClickInsideAnIframeEvent)(timestamp, clickEvent));
    });
  }
  /**
   * render the preview.
   */


  /**
   * register a new preview.
   */
  registerPreview(preview) {
    this.previewSlot.register(preview);
    return this;
  }
  /**
   * get the preview rendering context.
   */


  getRenderingContext() {
    return new (_renderingContext().RenderingContext)(this.renderingContextSlot);
  }
  /**
   * allows aspects to add rendering contexts.
   * render context is available through all preview definitions.
   */


  registerRenderContext(renderContext) {
    this.renderingContextSlot.register(renderContext);
    return this;
  }

  getDefault() {
    const previews = this.previewSlot.values();
    const defaultOne = previews.find(previewCandidate => previewCandidate.default);
    return (defaultOne === null || defaultOne === void 0 ? void 0 : defaultOne.name) || previews[0].name;
  }

  getPreview(previewName) {
    const previews = this.previewSlot.values();
    const preview = previews.find(previewCandidate => previewCandidate.name === previewName);
    return preview;
  }

  getParam(query, param) {
    const params = new URLSearchParams(query);
    return params.get(param);
  }

  getLocation() {
    const withoutHash = window.location.hash.substring(1);
    const [before, after] = withoutHash.split('?');
    return {
      previewName: this.getParam(after, 'preview'),
      componentId: _componentId().ComponentID.tryFromString(before)
    };
  }

  static async provider([pubsub], config, [previewSlot, renderingContextSlot]) {
    const preview = new PreviewPreview(pubsub, previewSlot, renderingContextSlot);
    window.addEventListener('hashchange', () => {
      preview.render();
    });
    return preview;
  }

}

exports.PreviewPreview = PreviewPreview;
(0, _defineProperty2().default)(PreviewPreview, "runtime", _preview().PreviewRuntime);
(0, _defineProperty2().default)(PreviewPreview, "dependencies", [_pubsub().default]);
(0, _defineProperty2().default)(PreviewPreview, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType()]);

function linkModules(previewName, defaultModule, componentMap) {
  PREVIEW_MODULES[previewName] = {
    mainModule: defaultModule,
    componentMap
  };
}

_preview().PreviewAspect.addRuntime(PreviewPreview);

//# sourceMappingURL=preview.preview.runtime.js.map