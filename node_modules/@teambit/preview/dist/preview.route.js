"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PreviewRoute = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _mime() {
  const data = _interopRequireDefault(require("mime"));

  _mime = function () {
    return data;
  };

  return data;
}

function _uiFoundationUiPages() {
  const data = require("@teambit/ui-foundation.ui.pages.static-error");

  _uiFoundationUiPages = function () {
    return data;
  };

  return data;
}

class PreviewRoute {
  constructor(
  /**
   * preview extension.
   */
  preview, logger) {
    this.preview = preview;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "route", `/preview/:previewPath(*)`);
    (0, _defineProperty2().default)(this, "method", 'get');
    (0, _defineProperty2().default)(this, "middlewares", [async (req, res) => {
      try {
        var _artifact;

        // @ts-ignore TODO: @guy please fix.
        const component = req.component;
        if (!component) return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        let artifact; // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680

        try {
          artifact = await this.preview.getPreview(component);
        } catch (e) {
          return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        } // TODO: please fix file path concatenation here.


        const file = (_artifact = artifact) === null || _artifact === void 0 ? void 0 : _artifact.getFile(`public/${req.params.previewPath || 'index.html'}`);
        if (!file) return res.status(404).send((0, _uiFoundationUiPages().noPreview)());
        const contents = file.contents;
        const str = `${file.cwd}/${file.path}`;

        const contentType = _mime().default.getType(str);

        if (contentType) res.set('Content-Type', contentType);
        return res.send(contents);
      } catch (e) {
        this.logger.error('failed getting preview', e);
        return res.status(500).send((0, _uiFoundationUiPages().serverError)());
      }
    }]);
  }

}

exports.PreviewRoute = PreviewRoute;

//# sourceMappingURL=preview.route.js.map