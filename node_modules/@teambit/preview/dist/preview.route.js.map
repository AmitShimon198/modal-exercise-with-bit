{"version":3,"sources":["preview.route.ts"],"names":["PreviewRoute","constructor","preview","logger","req","res","component","status","send","artifact","getPreview","e","file","getFile","params","previewPath","contents","str","cwd","path","contentType","mime","getType","set","error"],"mappings":";;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAWO,MAAMA,YAAN,CAAoC;AACzCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,OAJC,EAKDC,MALC,EAMT;AAAA,SAFQD,OAER,GAFQA,OAER;AAAA,SADQC,MACR,GADQA,MACR;AAAA,mDAEO,0BAFP;AAAA,oDAGO,KAHP;AAAA,yDAKY,CACZ,OAAOC,GAAP,EAAgCC,GAAhC,KAAkD;AAChD,UAAI;AAAA;;AACF;AACA,cAAMC,SAAS,GAAGF,GAAG,CAACE,SAAtB;AACA,YAAI,CAACA,SAAL,EAAgB,OAAOD,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AAEhB,YAAIC,QAAJ,CALE,CAMF;;AACA,YAAI;AACFA,UAAAA,QAAQ,GAAG,MAAM,KAAKP,OAAL,CAAaQ,UAAb,CAAwBJ,SAAxB,CAAjB;AACD,SAFD,CAEE,OAAOK,CAAP,EAAe;AACf,iBAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AACD,SAXC,CAYF;;;AACA,cAAMI,IAAI,gBAAGH,QAAH,8CAAG,UAAUI,OAAV,CAAmB,UAAST,GAAG,CAACU,MAAJ,CAAWC,WAAX,IAA0B,YAAa,EAAnE,CAAb;AACA,YAAI,CAACH,IAAL,EAAW,OAAOP,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uCAArB,CAAP;AAEX,cAAMQ,QAAQ,GAAGJ,IAAI,CAACI,QAAtB;AACA,cAAMC,GAAG,GAAI,GAAEL,IAAI,CAACM,GAAI,IAAGN,IAAI,CAACO,IAAK,EAArC;;AACA,cAAMC,WAAW,GAAGC,gBAAKC,OAAL,CAAaL,GAAb,CAApB;;AACA,YAAIG,WAAJ,EAAiBf,GAAG,CAACkB,GAAJ,CAAQ,cAAR,EAAwBH,WAAxB;AACjB,eAAOf,GAAG,CAACG,IAAJ,CAASQ,QAAT,CAAP;AACD,OArBD,CAqBE,OAAOL,CAAP,EAAe;AACf,aAAKR,MAAL,CAAYqB,KAAZ,CAAkB,wBAAlB,EAA4Cb,CAA5C;AACA,eAAON,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,yCAArB,CAAP;AACD;AACF,KA3BW,CALZ;AAAE;;AAPqC","sourcesContent":["import { Request, Response, Route } from '@teambit/express';\nimport mime from 'mime';\nimport type { Component } from '@teambit/component';\nimport { noPreview, serverError } from '@teambit/ui-foundation.ui.pages.static-error';\nimport type { Logger } from '@teambit/logger';\n\nimport { PreviewMain } from './preview.main.runtime';\nimport { PreviewArtifact } from './preview-artifact';\n\ntype UrlParams = {\n  /** `/preview/:previewPath(*)` */\n  previewPath?: string;\n};\n\nexport class PreviewRoute implements Route {\n  constructor(\n    /**\n     * preview extension.\n     */\n    private preview: PreviewMain,\n    private logger: Logger\n  ) {}\n\n  route = `/preview/:previewPath(*)`;\n  method = 'get';\n\n  middlewares = [\n    async (req: Request<UrlParams>, res: Response) => {\n      try {\n        // @ts-ignore TODO: @guy please fix.\n        const component = req.component as Component | undefined;\n        if (!component) return res.status(404).send(noPreview());\n\n        let artifact: PreviewArtifact | undefined;\n        // TODO - prevent error `getVinylsAndImportIfMissing is not a function` #4680\n        try {\n          artifact = await this.preview.getPreview(component);\n        } catch (e: any) {\n          return res.status(404).send(noPreview());\n        }\n        // TODO: please fix file path concatenation here.\n        const file = artifact?.getFile(`public/${req.params.previewPath || 'index.html'}`);\n        if (!file) return res.status(404).send(noPreview());\n\n        const contents = file.contents;\n        const str = `${file.cwd}/${file.path}`;\n        const contentType = mime.getType(str);\n        if (contentType) res.set('Content-Type', contentType);\n        return res.send(contents);\n      } catch (e: any) {\n        this.logger.error('failed getting preview', e);\n        return res.status(500).send(serverError());\n      }\n    },\n  ];\n}\n"]}