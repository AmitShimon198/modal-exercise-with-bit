{"version":3,"sources":["preview.start-plugin.tsx"],"names":["PreviewStartPlugin","constructor","workspace","bundler","ui","pubsub","servers","initialState","initiate","options","listenToDevServers","components","byPattern","pattern","previewServers","devServer","forEach","server","listen","watcher","watchAll","msgs","onAll","onStart","onReady","onChange","onAdd","onError","onUnlink","concat","getProxy","proxyConfigs","map","context","envRuntime","id","target","port","ws","updateServers","state","compiling","onDone","results","render","PreviewPlugin","setServers"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { flatten } from 'lodash';\nimport { PreviewServerStatus } from '@teambit/preview.cli.preview-server-status';\nimport { BundlerMain, ComponentServer } from '@teambit/bundler';\nimport { PubsubMain } from '@teambit/pubsub';\nimport { ProxyEntry, StartPlugin, StartPluginOptions, UiMain } from '@teambit/ui';\nimport { Workspace } from '@teambit/workspace';\nimport { SubscribeToWebpackEvents, CompilationResult } from '@teambit/preview.cli.webpack-events-listener';\n\ntype CompilationServers = Record<string, CompilationResult>;\n\nexport class PreviewStartPlugin implements StartPlugin {\n  constructor(\n    private workspace: Workspace,\n    private bundler: BundlerMain,\n    private ui: UiMain,\n    private pubsub: PubsubMain\n  ) {}\n\n  previewServers: ComponentServer[] = [];\n\n  async initiate(options: StartPluginOptions) {\n    this.listenToDevServers();\n\n    const components = await this.workspace.byPattern(options.pattern || '');\n    // TODO: logic for creating preview servers must be refactored to this aspect from the DevServer aspect.\n    const previewServers = await this.bundler.devServer(components);\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    previewServers.forEach((server) => server.listen());\n    // DON'T add wait! this promise never resolve so it's stop all the start process!\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.workspace.watcher.watchAll({\n      msgs: {\n        onAll: () => {},\n        onStart: () => {},\n        onReady: () => {},\n        onChange: () => {},\n        onAdd: () => {},\n        onError: () => {},\n        onUnlink: () => {},\n      },\n    });\n    this.previewServers = this.previewServers.concat(previewServers);\n  }\n\n  getProxy(): ProxyEntry[] {\n    const proxyConfigs = this.previewServers.map<ProxyEntry[]>((server) => {\n      return [\n        {\n          context: [`/preview/${server.context.envRuntime.id}`],\n          target: `http://localhost:${server.port}`,\n        },\n        {\n          context: [`/_hmr/${server.context.envRuntime.id}`],\n          target: `http://localhost:${server.port}`,\n          ws: true,\n        },\n      ];\n    });\n\n    return flatten(proxyConfigs);\n  }\n\n  // TODO: this should be a part of the devServer\n  private listenToDevServers() {\n    // keep state changes immutable!\n    SubscribeToWebpackEvents(this.pubsub, {\n      onStart: (id) => {\n        this.updateServers((state) => ({\n          ...state,\n          [id]: { compiling: true },\n        }));\n      },\n      onDone: (id, results) => {\n        this.updateServers((state) => ({\n          ...state,\n          [id]: results,\n        }));\n      },\n    });\n  }\n\n  private initialState: CompilationServers = {};\n  // implements react-like setter (value or updater)\n  private updateServers: React.Dispatch<React.SetStateAction<CompilationServers>> = (servers) => {\n    this.initialState = typeof servers === 'function' ? servers(this.initialState) : servers;\n    return servers;\n  };\n\n  render() {\n    const PreviewPlugin = () => {\n      const [servers, setServers] = useState<CompilationServers>(this.initialState);\n      this.updateServers = setServers;\n      this.initialState = {};\n\n      return <PreviewServerStatus previewServers={this.previewServers} serverStats={servers} />;\n    };\n\n    return PreviewPlugin;\n  }\n}\n"]}