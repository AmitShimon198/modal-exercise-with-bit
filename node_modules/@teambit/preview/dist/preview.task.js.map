{"version":3,"sources":["preview.task.ts"],"names":["PreviewTask","constructor","bundler","preview","execute","context","defs","getDefs","url","envRuntime","id","bundlingStrategy","getBundlingStrategy","targets","computeTargets","bundlerContext","Object","assign","entry","publicPath","getPreviewDirectory","rootPath","env","getBundler","bundlerResults","run","computeResults","computePaths","capsule","previewMain","writePreviewRuntime","moduleMapsPromise","map","previewDef","moduleMap","getModuleMap","component","paths","getPathsFromMap","template","renderTemplatePath","link","writeLink","prefix","undefined","path","files","toArray","file","concat","moduleMaps","Promise","all","outputPath","compiler","getCompiler","getDistPathBySrcPath","relative"],"mappings":"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","sourcesContent":["import { resolve, join } from 'path';\nimport { ExecutionContext } from '@teambit/envs';\nimport { BuildContext, BuiltTaskResult, BuildTask, TaskLocation } from '@teambit/builder';\nimport { Bundler, BundlerContext, BundlerMain, Target } from '@teambit/bundler';\nimport { Compiler } from '@teambit/compiler';\nimport { ComponentMap } from '@teambit/component';\nimport { Capsule } from '@teambit/isolator';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { flatten } from 'lodash';\nimport { PreviewDefinition } from './preview-definition';\nimport { PreviewMain } from './preview.main.runtime';\n\nexport class PreviewTask implements BuildTask {\n  constructor(\n    /**\n     * bundler extension.\n     */\n    private bundler: BundlerMain,\n\n    /**\n     * preview extension.\n     */\n    private preview: PreviewMain\n  ) {}\n\n  aspectId = 'teambit.preview/preview';\n  name = 'GeneratePreview';\n  location: TaskLocation = 'end';\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const defs = this.preview.getDefs();\n    const url = `/preview/${context.envRuntime.id}`;\n    const bundlingStrategy = this.preview.getBundlingStrategy();\n\n    const targets: Target[] = await bundlingStrategy.computeTargets(context, defs, this);\n\n    const bundlerContext: BundlerContext = Object.assign(context, {\n      targets,\n      entry: [],\n      publicPath: this.getPreviewDirectory(context),\n      rootPath: url,\n    });\n\n    const bundler: Bundler = await context.env.getBundler(bundlerContext, []);\n    const bundlerResults = await bundler.run();\n\n    return bundlingStrategy.computeResults(bundlerContext, bundlerResults, this);\n  }\n\n  async computePaths(capsule: Capsule, defs: PreviewDefinition[], context: BuildContext): Promise<string[]> {\n    const previewMain = await this.preview.writePreviewRuntime(context);\n\n    const moduleMapsPromise = defs.map(async (previewDef) => {\n      const moduleMap = await previewDef.getModuleMap([capsule.component]);\n      const paths = this.getPathsFromMap(capsule, moduleMap, context);\n      const template = previewDef.renderTemplatePath ? await previewDef.renderTemplatePath(context) : 'undefined';\n\n      const link = this.preview.writeLink(\n        previewDef.prefix,\n        paths,\n        previewDef.renderTemplatePath ? await previewDef.renderTemplatePath(context) : undefined,\n        capsule.path\n      );\n\n      const files = flatten(paths.toArray().map(([, file]) => file)).concat([link]);\n\n      if (template) return files.concat([template]);\n      return files;\n    });\n\n    const moduleMaps = await Promise.all(moduleMapsPromise);\n\n    return flatten(moduleMaps.concat([previewMain]));\n  }\n\n  getPreviewDirectory(context: ExecutionContext) {\n    const outputPath = resolve(`${context.id}/public`);\n    return outputPath;\n  }\n\n  getPathsFromMap(\n    capsule: Capsule,\n    moduleMap: ComponentMap<AbstractVinyl[]>,\n    context: BuildContext\n  ): ComponentMap<string[]> {\n    const compiler: Compiler = context.env.getCompiler(context);\n    return moduleMap.map((files) => {\n      return files.map((file) => join(capsule.path, compiler.getDistPathBySrcPath(file.relative)));\n    });\n  }\n}\n"]}