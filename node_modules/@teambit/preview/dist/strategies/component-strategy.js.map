{"version":3,"sources":["component-strategy.ts"],"names":["ComponentBundlingStrategy","computeTargets","context","previewDefs","previewTask","Promise","all","capsuleNetwork","graphCapsules","map","capsule","entries","computePaths","components","component","outputPath","path","computeResults","results","componentsResults","result","errors","warning","warnings","artifacts","name","globPatterns","getPreviewDirectory"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAMO,MAAMA,yBAAN,CAA4D;AAAA;AAAA,kDAC1D,WAD0D;AAAA;;AAGjEC,EAAAA,cAAc,CAACC,OAAD,EAAwBC,WAAxB,EAA0DC,WAA1D,EAAuG;AACnH,WAAOC,OAAO,CAACC,GAAR,CACLJ,OAAO,CAACK,cAAR,CAAuBC,aAAvB,CAAqCC,GAArC,CAAyC,MAAOC,OAAP,IAAmB;AAC1D,aAAO;AACLC,QAAAA,OAAO,EAAE,MAAMP,WAAW,CAACQ,YAAZ,CAAyBF,OAAzB,EAAkCP,WAAlC,EAA+CD,OAA/C,CADV;AAELW,QAAAA,UAAU,EAAE,CAACH,OAAO,CAACI,SAAT,CAFP;AAGLC,QAAAA,UAAU,EAAEL,OAAO,CAACM;AAHf,OAAP;AAKD,KAND,CADK,CAAP;AASD;;AAEmB,QAAdC,cAAc,CAACf,OAAD,EAA0BgB,OAA1B,EAAoDd,WAApD,EAA8E;AAChG,WAAO;AACLe,MAAAA,iBAAiB,EAAED,OAAO,CAACT,GAAR,CAAaW,MAAD,IAAY;AACzC,eAAO;AACLC,UAAAA,MAAM,EAAED,MAAM,CAACC,MADV;AAELP,UAAAA,SAAS,EAAEM,MAAM,CAACP,UAAP,CAAkB,CAAlB,CAFN;AAGLS,UAAAA,OAAO,EAAEF,MAAM,CAACG;AAHX,SAAP;AAKD,OANkB,CADd;AAQLC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE,SAAR;AAAmBC,QAAAA,YAAY,EAAE,CAACtB,WAAW,CAACuB,mBAAZ,CAAgCzB,OAAhC,CAAD;AAAjC,OAAD;AARN,KAAP;AAUD;;AA1BgE","sourcesContent":["import { BuildContext } from '@teambit/builder';\nimport { Target, BundlerResult, BundlerContext } from '@teambit/bundler';\nimport { BundlingStrategy } from '../bundling-strategy';\nimport { PreviewDefinition } from '../preview-definition';\nimport { PreviewTask } from '../preview.task';\n\nexport class ComponentBundlingStrategy implements BundlingStrategy {\n  name = 'component';\n\n  computeTargets(context: BuildContext, previewDefs: PreviewDefinition[], previewTask: PreviewTask): Promise<Target[]> {\n    return Promise.all(\n      context.capsuleNetwork.graphCapsules.map(async (capsule) => {\n        return {\n          entries: await previewTask.computePaths(capsule, previewDefs, context),\n          components: [capsule.component],\n          outputPath: capsule.path,\n        };\n      })\n    );\n  }\n\n  async computeResults(context: BundlerContext, results: BundlerResult[], previewTask: PreviewTask) {\n    return {\n      componentsResults: results.map((result) => {\n        return {\n          errors: result.errors,\n          component: result.components[0],\n          warning: result.warnings,\n        };\n      }),\n      artifacts: [{ name: 'preview', globPatterns: [previewTask.getPreviewDirectory(context)] }],\n    };\n  }\n}\n"]}