{"version":3,"sources":["env-strategy.ts"],"names":["EnvBundlingStrategy","constructor","preview","computeTargets","context","previewDefs","outputPath","getOutputPath","entries","computePaths","components","computeResults","results","result","componentsResults","map","component","errors","err","message","warning","warnings","artifacts","getArtifactDef","env","rootDir","getDirName","name","globPatterns","envName","id","replace","capsuleNetwork","capsulesRootDir","getPaths","files","capsule","compiler","getCompiler","file","path","getDistPathBySrcPath","relative","defs","previewMain","writePreviewRuntime","moduleMapsPromise","previewDef","moduleMap","getModuleMap","paths","ComponentMap","as","graphCapsules","getCapsule","maybeFiles","get","compiledPaths","template","renderTemplatePath","link","writeLink","prefix","undefined","toArray","concat","moduleMaps","Promise","all"],"mappings":"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","sourcesContent":["import { join, resolve } from 'path';\nimport { existsSync, mkdirpSync } from 'fs-extra';\nimport { flatten } from 'lodash';\nimport { ComponentMap } from '@teambit/component';\nimport { Compiler } from '@teambit/compiler';\nimport { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';\nimport { Capsule } from '@teambit/isolator';\nimport { BuildContext, ComponentResult } from '@teambit/builder';\nimport { BundlerResult, BundlerContext } from '@teambit/bundler';\nimport { BundlingStrategy } from '../bundling-strategy';\nimport { PreviewDefinition } from '../preview-definition';\nimport { PreviewMain } from '../preview.main.runtime';\n\n/**\n * bundles all components in a given env into the same bundle.\n */\nexport class EnvBundlingStrategy implements BundlingStrategy {\n  name = 'env';\n\n  constructor(private preview: PreviewMain) {}\n\n  async computeTargets(context: BuildContext, previewDefs: PreviewDefinition[]) {\n    const outputPath = this.getOutputPath(context);\n    if (!existsSync(outputPath)) mkdirpSync(outputPath);\n\n    return [\n      {\n        entries: await this.computePaths(outputPath, previewDefs, context),\n        components: context.components,\n        outputPath,\n      },\n    ];\n  }\n\n  async computeResults(context: BundlerContext, results: BundlerResult[]) {\n    const result = results[0];\n\n    const componentsResults: ComponentResult[] = result.components.map((component) => {\n      return {\n        component,\n        errors: result.errors.map((err) => (typeof err === 'string' ? err : err.message)),\n        warning: result.warnings,\n      };\n    });\n\n    const artifacts = this.getArtifactDef(context);\n\n    return {\n      componentsResults,\n      artifacts,\n    };\n  }\n\n  private getArtifactDef(context: BuildContext) {\n    // eslint-disable-next-line @typescript-eslint/prefer-as-const\n    const env: 'env' = 'env';\n    const rootDir = this.getDirName(context);\n\n    return [\n      {\n        name: 'preview',\n        globPatterns: ['public/**'],\n        rootDir,\n        context: env,\n      },\n    ];\n  }\n\n  getDirName(context: BuildContext) {\n    const envName = context.id.replace('/', '__');\n    return `${envName}-preview`;\n  }\n\n  private getOutputPath(context: BuildContext) {\n    return resolve(`${context.capsuleNetwork.capsulesRootDir}/${this.getDirName(context)}`);\n  }\n\n  private getPaths(context: BuildContext, files: AbstractVinyl[], capsule: Capsule) {\n    const compiler: Compiler = context.env.getCompiler();\n    return files.map((file) => join(capsule.path, compiler.getDistPathBySrcPath(file.relative)));\n  }\n\n  private async computePaths(outputPath: string, defs: PreviewDefinition[], context: BuildContext): Promise<string[]> {\n    const previewMain = await this.preview.writePreviewRuntime(context);\n    const moduleMapsPromise = defs.map(async (previewDef) => {\n      const moduleMap = await previewDef.getModuleMap(context.components);\n\n      const paths = ComponentMap.as(context.components, (component) => {\n        const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n        const maybeFiles = moduleMap.get(component);\n        if (!maybeFiles || !capsule) return [];\n        const [, files] = maybeFiles;\n        const compiledPaths = this.getPaths(context, files, capsule);\n        return compiledPaths;\n      });\n\n      const template = previewDef.renderTemplatePath ? await previewDef.renderTemplatePath(context) : 'undefined';\n\n      const link = this.preview.writeLink(\n        previewDef.prefix,\n        paths,\n        previewDef.renderTemplatePath ? await previewDef.renderTemplatePath(context) : undefined,\n        outputPath\n      );\n\n      const files = flatten(paths.toArray().map(([, file]) => file)).concat([link]);\n\n      if (template) return files.concat([template]);\n      return files;\n    });\n\n    const moduleMaps = await Promise.all(moduleMapsPromise);\n\n    return flatten(moduleMaps.concat([previewMain]));\n  }\n}\n"]}