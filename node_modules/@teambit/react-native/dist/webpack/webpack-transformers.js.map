{"version":3,"sources":["webpack-transformers.ts"],"names":["commonTransformation","config","_context","addAliases","react","require","resolve","previewConfigTransformer","context","newConfig","devServerConfigTransformer"],"mappings":";;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,oBAAT,CAA8BC,MAA9B,EAA4DC,QAA5D,EAAqG;AACnGD,EAAAA,MAAM,CAACE,UAAP,CAAkB;AAChBC,IAAAA,KAAK,EAAEC,OAAO,CAACC,OAAR,CAAgB,OAAhB,CADS;AAEhB,wBAAoBD,OAAO,CAACC,OAAR,CAAgB,kBAAhB,CAFJ;AAGhB,qBAAiBD,OAAO,CAACC,OAAR,CAAgB,kBAAhB;AAHD,GAAlB;AAKA,SAAOL,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,MAAMM,wBAAkD,GAAG,CAChEN,MADgE,EAEhEO,OAFgE,KAG7D;AACH,QAAMC,SAAS,GAAGT,oBAAoB,CAACC,MAAD,EAASO,OAAT,CAAtC;AACA,SAAOC,SAAP;AACD,CANM;AAQP;AACA;AACA;AACA;AACA;AACA;;;;;AACO,MAAMC,0BAAoD,GAAG,CAClET,MADkE,EAElEO,OAFkE,KAG/D;AACH,QAAMC,SAAS,GAAGT,oBAAoB,CAACC,MAAD,EAASO,OAAT,CAAtC;AACA,SAAOC,SAAP;AACD,CANM","sourcesContent":["import { WebpackConfigTransformer, WebpackConfigMutator, WebpackConfigTransformContext } from '@teambit/webpack';\n\n/**\n * Transformation to apply for both preview and dev server\n * @param config\n * @param _context\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nfunction commonTransformation(config: WebpackConfigMutator, _context: WebpackConfigTransformContext) {\n  config.addAliases({\n    react: require.resolve('react'),\n    'react-dom/server': require.resolve('react-dom/server'),\n    'react-native$': require.resolve('react-native-web'),\n  });\n  return config;\n}\n\n/**\n * Transformation for the preview only\n * @param config\n * @param context\n * @returns\n */\nexport const previewConfigTransformer: WebpackConfigTransformer = (\n  config: WebpackConfigMutator,\n  context: WebpackConfigTransformContext\n) => {\n  const newConfig = commonTransformation(config, context);\n  return newConfig;\n};\n\n/**\n * Transformation for the dev server only\n * @param config\n * @param context\n * @returns\n */\nexport const devServerConfigTransformer: WebpackConfigTransformer = (\n  config: WebpackConfigMutator,\n  context: WebpackConfigTransformContext\n) => {\n  const newConfig = commonTransformation(config, context);\n  return newConfig;\n};\n"]}