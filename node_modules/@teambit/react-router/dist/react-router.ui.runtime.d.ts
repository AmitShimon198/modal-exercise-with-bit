import { RouteProps } from 'react-router-dom';
import { History, LocationListener, LocationDescriptor, Action } from 'history';
import { SlotRegistry } from '@teambit/harmony';
import { RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { Routing } from './routing-method';
declare type RouteChangeSlot = SlotRegistry<LocationListener>;
declare type RenderRoutesOptions = {
    initialLocation?: string;
};
export declare class ReactRouterUI {
    private routeSlot;
    private routeChangeListener;
    private routerHistory?;
    private routingMode;
    constructor(routeSlot: RouteSlot, routeChangeListener: RouteChangeSlot);
    renderRoutes(routes: RouteProps[], options?: RenderRoutesOptions): JSX.Element;
    private unregisterListener?;
    setRouter: (routerHistory: History) => void;
    setRoutingMode(routing: Routing): void;
    register(route: RouteProps): this;
    registerListener(listener: LocationListener): void;
    navigateTo: (path: LocationDescriptor, action?: Record<string, any> | Action | undefined) => void;
    private legacyNavigateTo;
    static slots: (((registerFn: () => string) => SlotRegistry<RouteProps<string, {
        [x: string]: string | undefined;
    }>>) | ((registerFn: () => string) => SlotRegistry<LocationListener<unknown>>))[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider(deps: any, config: any, [routeSlot, routeChangeSlot]: [RouteSlot, RouteChangeSlot]): Promise<ReactRouterUI>;
}
export {};
