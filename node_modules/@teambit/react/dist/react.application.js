"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReactApp = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = require("path");

  _path = function () {
    return data;
  };

  return data;
}

function _toolboxNetwork() {
  const data = require("@teambit/toolbox.network.get-port");

  _toolboxNetwork = function () {
    return data;
  };

  return data;
}

class ReactApp {
  constructor(name, entry, portRange, reactEnv, rootPath, deploy) {
    this.name = name;
    this.entry = entry;
    this.portRange = portRange;
    this.reactEnv = reactEnv;
    this.rootPath = rootPath;
    this.deploy = deploy;
    (0, _defineProperty2().default)(this, "applicationType", 'react');
  }

  async run(context) {
    const devServerContext = this.getDevServerContext(context);
    const devServer = this.reactEnv.getDevServer(devServerContext, [configMutator => {
      // configMutator.addTopLevel('output', { publicPath: `/public/${this.name}` });
      return configMutator;
    }]);
    const [from, to] = this.portRange;
    const port = await _toolboxNetwork().Port.getPort(from, to);
    await devServer.listen(port);
    return port;
  }

  async build(context, aspectId, appCapsule) {
    const reactEnv = context.env;
    const publicDir = (0, _path().join)('applications', this.name, 'build');
    const outputPath = (0, _path().join)(appCapsule.path, publicDir);
    const {
      distDir
    } = reactEnv.getCompiler();
    const entries = this.entry.map(entry => require.resolve(`${appCapsule.path}/${distDir}/${(0, _path().basename)(entry)}`));
    const bundlerContext = Object.assign(context, {
      targets: [{
        components: [appCapsule === null || appCapsule === void 0 ? void 0 : appCapsule.component],
        entries,
        outputPath
      }],
      entry: [],
      rootPath: '/'
    });
    const bundler = await reactEnv.getBundler(bundlerContext, [configMutator => {
      configMutator.addTopLevel('output', {
        path: (0, _path().join)(outputPath, 'public'),
        publicPath: `/`
      });
      return configMutator;
    }]);
    await bundler.run();
    const deployContext = Object.assign(context, {
      applicationType: this.applicationType,
      aspectId,
      publicDir: (0, _path().join)(appCapsule.path, publicDir, 'public')
    });
    return deployContext;
  }

  getDevServerContext(context) {
    return Object.assign(context, {
      entry: this.entry,
      rootPath: '',
      publicPath: `public/${this.name}`,
      title: this.name
    });
  }

}

exports.ReactApp = ReactApp;

//# sourceMappingURL=react.application.js.map