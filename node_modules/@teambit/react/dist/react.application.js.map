{"version":3,"sources":["react.application.ts"],"names":["ReactApp","constructor","name","entry","portRange","reactEnv","rootPath","deploy","run","context","devServerContext","getDevServerContext","devServer","getDevServer","configMutator","from","to","port","Port","getPort","listen","build","aspectId","appCapsule","env","publicDir","outputPath","path","distDir","getCompiler","entries","map","require","resolve","bundlerContext","Object","assign","targets","components","component","bundler","getBundler","addTopLevel","publicPath","deployContext","applicationType","title"],"mappings":"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","sourcesContent":["import { join, basename } from 'path';\nimport { Capsule } from '@teambit/isolator';\nimport { Application, AppContext, DeployContext } from '@teambit/application';\nimport { BuildContext } from '@teambit/builder';\nimport { Bundler, BundlerContext, DevServerContext } from '@teambit/bundler';\nimport { Port } from '@teambit/toolbox.network.get-port';\nimport { ReactEnv } from './react.env';\n\nexport class ReactApp implements Application {\n  constructor(\n    readonly name: string,\n    readonly entry: string[],\n    readonly portRange: number[],\n    private reactEnv: ReactEnv,\n    private rootPath: string,\n    readonly deploy?: (context: DeployContext) => Promise<void>\n  ) {}\n\n  applicationType = 'react';\n\n  async run(context: AppContext): Promise<number> {\n    const devServerContext = this.getDevServerContext(context);\n    const devServer = this.reactEnv.getDevServer(devServerContext, [\n      (configMutator) => {\n        // configMutator.addTopLevel('output', { publicPath: `/public/${this.name}` });\n        return configMutator;\n      },\n    ]);\n    const [from, to] = this.portRange;\n    const port = await Port.getPort(from, to);\n    await devServer.listen(port);\n    return port;\n  }\n\n  async build(context: BuildContext, aspectId: string, appCapsule: Capsule): Promise<DeployContext> {\n    const reactEnv: ReactEnv = context.env;\n    const publicDir = join('applications', this.name, 'build');\n    const outputPath = join(appCapsule.path, publicDir);\n    const { distDir } = reactEnv.getCompiler();\n    const entries = this.entry.map((entry) => require.resolve(`${appCapsule.path}/${distDir}/${basename(entry)}`));\n    const bundlerContext: BundlerContext = Object.assign(context, {\n      targets: [\n        {\n          components: [appCapsule?.component],\n          entries,\n          outputPath,\n        },\n      ],\n      entry: [],\n      rootPath: '/',\n    });\n    const bundler: Bundler = await reactEnv.getBundler(bundlerContext, [\n      (configMutator) => {\n        configMutator.addTopLevel('output', { path: join(outputPath, 'public'), publicPath: `/` });\n        return configMutator;\n      },\n    ]);\n    await bundler.run();\n    const deployContext = Object.assign(context, {\n      applicationType: this.applicationType,\n      aspectId,\n      publicDir: join(appCapsule.path, publicDir, 'public'),\n    });\n    return deployContext;\n  }\n\n  private getDevServerContext(context: AppContext): DevServerContext {\n    return Object.assign(context, {\n      entry: this.entry,\n      rootPath: '',\n      publicPath: `public/${this.name}`,\n      title: this.name,\n    });\n  }\n}\n"]}