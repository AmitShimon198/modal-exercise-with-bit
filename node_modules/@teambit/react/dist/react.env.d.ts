import ts, { TsConfigSourceFile } from 'typescript';
import { BuildTask } from '@teambit/builder';
import { Bundler, BundlerContext, DevServer, DevServerContext } from '@teambit/bundler';
import { CompilerMain } from '@teambit/compiler';
import { BuilderEnv, CompilerEnv, DependenciesEnv, DevEnv, LinterEnv, PackageEnv, TesterEnv, FormatterEnv, PipeServiceModifier, PipeServiceModifiersMap } from '@teambit/envs';
import { JestMain } from '@teambit/jest';
import { PkgMain } from '@teambit/pkg';
import { Tester, TesterMain } from '@teambit/tester';
import { TsConfigTransformer, TypescriptMain } from '@teambit/typescript';
import { WebpackConfigTransformer, WebpackMain } from '@teambit/webpack';
import { Workspace } from '@teambit/workspace';
import { ESLintMain, EslintConfigTransformer } from '@teambit/eslint';
import { PrettierConfigTransformer, PrettierMain } from '@teambit/prettier';
import { Linter, LinterContext } from '@teambit/linter';
import { Formatter, FormatterContext } from '@teambit/formatter';
import { SchemaExtractor } from '@teambit/schema';
import { ReactMainConfig } from './react.main.runtime';
export declare const AspectEnvType = "react";
declare type GetBuildPipeModifiers = PipeServiceModifiersMap & {
    tsModifier?: PipeServiceModifier;
};
export declare class ReactEnv implements TesterEnv, CompilerEnv, LinterEnv, DevEnv, BuilderEnv, DependenciesEnv, PackageEnv, FormatterEnv {
    private jestAspect;
    private tsAspect;
    private compiler;
    private webpack;
    private workspace;
    private pkg;
    private tester;
    private config;
    private eslint;
    private prettier;
    constructor(jestAspect: JestMain, tsAspect: TypescriptMain, compiler: CompilerMain, webpack: WebpackMain, workspace: Workspace, pkg: PkgMain, tester: TesterMain, config: ReactMainConfig, eslint: ESLintMain, prettier: PrettierMain);
    getTsConfig(targetTsConfig?: TsConfigSourceFile): TsConfigSourceFile;
    getBuildTsConfig(targetTsConfig?: TsConfigSourceFile): TsConfigSourceFile;
    getTester(jestConfigPath: string, jestModulePath?: string): Tester;
    private getTsCompilerOptions;
    private getTsCompiler;
    getCompiler(transformers?: TsConfigTransformer[], tsModule?: typeof ts): import("@teambit/compiler").Compiler;
    getLinter(context: LinterContext, transformers?: EslintConfigTransformer[]): Linter;
    getFormatter(context: FormatterContext, transformers?: PrettierConfigTransformer[]): Formatter;
    private getFileMap;
    private writeFileMap;
    getDevEnvId(id?: string): string;
    getSchemaExtractor(tsconfig: TsConfigSourceFile): SchemaExtractor;
    getDevServer(context: DevServerContext, transformers?: WebpackConfigTransformer[]): DevServer;
    getBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): Promise<Bundler>;
    private getComponentsModulesDirectories;
    private getEntriesFromWebpackConfig;
    getDocsTemplate(): string;
    icon: string;
    getMounter(): string;
    getPackageJsonProps(): import("@teambit/pkg").PackageJsonProps;
    getDependencies(): {
        dependencies: {
            react: string;
            'react-dom': string;
            'core-js': string;
        };
        devDependencies: {
            react: string;
            'react-dom': string;
            '@types/mocha': string;
            '@types/node': string;
            '@types/react': string;
            '@types/react-dom': string;
            '@types/jest': string;
            '@babel/runtime': string;
            '@types/testing-library__jest-dom': string;
        };
        peerDependencies: {
            react: string;
            'react-dom': string;
        };
    };
    getBuildPipe(modifiers?: GetBuildPipeModifiers): BuildTask[];
    private getCompilerTask;
    __getDescriptor(): Promise<{
        type: string;
    }>;
}
export {};
