import type { CompilerMain } from '@teambit/compiler';
import { Compiler } from '@teambit/compiler';
import { BuildTask } from '@teambit/builder';
import { Component } from '@teambit/component';
import { EnvsMain, EnvTransformer, Environment } from '@teambit/envs';
import type { GraphqlMain } from '@teambit/graphql';
import type { JestMain } from '@teambit/jest';
import type { PkgMain, PackageJsonProps } from '@teambit/pkg';
import type { TesterMain } from '@teambit/tester';
import type { TypescriptMain, TsCompilerOptionsWithoutTsConfig, TsConfigTransformer } from '@teambit/typescript';
import type { WebpackMain, Configuration, WebpackConfigTransformer } from '@teambit/webpack';
import { GeneratorMain } from '@teambit/generator';
import { Workspace } from '@teambit/workspace';
import { VariantPolicyConfigObject } from '@teambit/dependency-resolver';
import { ApplicationMain } from '@teambit/application';
import { ESLintMain, EslintConfigTransformer } from '@teambit/eslint';
import { PrettierMain, PrettierConfigTransformer } from '@teambit/prettier';
import { ReactEnv } from './react.env';
import { ReactAppOptions } from './react-app-options';
declare type ReactDeps = [
    EnvsMain,
    JestMain,
    TypescriptMain,
    CompilerMain,
    WebpackMain,
    Workspace,
    GraphqlMain,
    PkgMain,
    TesterMain,
    ESLintMain,
    PrettierMain,
    ApplicationMain,
    GeneratorMain
];
export declare type ReactMainConfig = {
    compiler: 'babel' | 'ts';
    tester: 'jest' | 'mocha';
    reactVersion: string;
};
export declare type UseWebpackModifiers = {
    previewConfig?: WebpackConfigTransformer[];
    devServerConfig?: WebpackConfigTransformer[];
};
export declare type UseTypescriptModifiers = {
    buildConfig?: TsConfigTransformer[];
    devConfig?: TsConfigTransformer[];
};
export declare type UseEslintModifiers = {
    transformers: EslintConfigTransformer[];
};
export declare type UsePrettierModifiers = {
    transformers: PrettierConfigTransformer[];
};
export declare class ReactMain {
    readonly reactEnv: ReactEnv;
    private envs;
    private application;
    private workspace;
    constructor(reactEnv: ReactEnv, envs: EnvsMain, application: ApplicationMain, workspace: Workspace);
    readonly env: ReactEnv;
    useTypescript(modifiers?: UseTypescriptModifiers, tsModule?: any): EnvTransformer;
    overrideTsConfig(tsconfig?: Record<string, any>, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>, tsModule?: any): EnvTransformer;
    overrideBuildTsConfig(tsconfig?: Record<string, any>, compilerOptions?: Partial<TsCompilerOptionsWithoutTsConfig>, tsModule?: any): EnvTransformer;
    registerReactApp(options: ReactAppOptions): void;
    useWebpack(modifiers?: UseWebpackModifiers): EnvTransformer;
    useEslint(modifiers?: UseEslintModifiers): EnvTransformer;
    usePrettier(modifiers?: UsePrettierModifiers): EnvTransformer;
    overrideDevServerConfig(config: Configuration): EnvTransformer;
    overridePreviewConfig(config: Configuration): EnvTransformer;
    overrideMounter(mounterPath: string): EnvTransformer;
    compose(transformers: EnvTransformer[], targetEnv?: Environment): Environment;
    overrideJestConfig(jestConfigPath: string, jestModulePath?: string): EnvTransformer;
    overrideBuildPipe(tasks: BuildTask[]): EnvTransformer;
    overrideCompilerTasks(tasks: BuildTask[]): EnvTransformer;
    overrideDependencies(dependencyPolicy: VariantPolicyConfigObject): EnvTransformer;
    overrideCompiler(compiler: Compiler): EnvTransformer;
    overrideEslintConfig(): void;
    overridePackageJsonProps(props: PackageJsonProps): EnvTransformer;
    getDocs(component: Component): {
        abstract: any;
        filePath: any;
        properties: any;
    } | null;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([envs, jestAspect, tsAspect, compiler, webpack, workspace, graphql, pkg, tester, eslint, prettier, application, generator,]: ReactDeps, config: ReactMainConfig): Promise<ReactMain>;
}
export {};
