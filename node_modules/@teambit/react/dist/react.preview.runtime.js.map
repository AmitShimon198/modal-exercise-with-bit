{"version":3,"sources":["react.preview.runtime.ts"],"names":["ReactPreview","constructor","preview","providerSlot","registerProvider","provider","register","getRenderingContext","providers","values","config","reactPreview","HighlighterProvider","registerRenderContext","PreviewRuntime","Slot","withType","PreviewAspect","ReactAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAKO,MAAMA,YAAN,CAAmB;AACxBC,EAAAA,WAAW,CAASC,OAAT,EAA0CC,YAA1C,EAAsE;AAAA,SAA7DD,OAA6D,GAA7DA,OAA6D;AAAA,SAA5BC,YAA4B,GAA5BA,YAA4B;AAAE;;AAEnFC,EAAAA,gBAAgB,CAACC,QAAD,EAAuB;AACrC,SAAKF,YAAL,CAAkBG,QAAlB,CAA2BD,QAA3B;AACD;;AAEDE,EAAAA,mBAAmB,GAAG;AACpB,WAAO;AACLC,MAAAA,SAAS,EAAE,uBAAQ,KAAKL,YAAL,CAAkBM,MAAlB,EAAR;AADN,KAAP;AAGD;;AAQoB,eAARJ,QAAQ,CAAC,CAACH,OAAD,CAAD,EAA8BQ,MAA9B,EAAsC,CAACP,YAAD,CAAtC,EAAsE;AACzF,UAAMQ,YAAY,GAAG,IAAIX,YAAJ,CAAiBE,OAAjB,EAA0BC,YAA1B,CAArB;AAEAQ,IAAAA,YAAY,CAACP,gBAAb,CAA8B,CAACQ,8BAAD,CAA9B;AAEAV,IAAAA,OAAO,CAACW,qBAAR,CAA8B,MAAM;AAClC,aAAOF,YAAY,CAACJ,mBAAb,EAAP;AACD,KAFD;AAGA,WAAOI,YAAP;AACD;;AA5BuB;;;gCAAbX,Y,aAaMc,yB;gCAbNd,Y,WAeI,CAACe,gBAAKC,QAAL,EAAD,C;gCAfJhB,Y,kBAiBW,CAACiB,kBAAD,C;;AAcxBC,qBAAYC,UAAZ,CAAuBnB,YAAvB;;eAEeA,Y","sourcesContent":["import { ComponentType } from 'react';\nimport flatten from 'lodash.flatten';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport PreviewAspect, { PreviewPreview, PreviewRuntime } from '@teambit/preview';\nimport { HighlighterProvider } from '@teambit/react.ui.highlighter-provider';\nimport { ReactAspect } from './react.aspect';\n\nexport type Provider = ComponentType<{}>;\nexport type ProviderSlot = SlotRegistry<Provider[]>;\n\nexport class ReactPreview {\n  constructor(private preview: PreviewPreview, private providerSlot: ProviderSlot) {}\n\n  registerProvider(provider: Provider[]) {\n    this.providerSlot.register(provider);\n  }\n\n  getRenderingContext() {\n    return {\n      providers: flatten(this.providerSlot.values()),\n    };\n  }\n\n  static runtime = PreviewRuntime;\n\n  static slots = [Slot.withType<Provider>()];\n\n  static dependencies = [PreviewAspect];\n\n  static async provider([preview]: [PreviewPreview], config, [providerSlot]: [ProviderSlot]) {\n    const reactPreview = new ReactPreview(preview, providerSlot);\n\n    reactPreview.registerProvider([HighlighterProvider]);\n\n    preview.registerRenderContext(() => {\n      return reactPreview.getRenderingContext();\n    });\n    return reactPreview;\n  }\n}\n\nReactAspect.addRuntime(ReactPreview);\n\nexport default ReactPreview;\n"]}