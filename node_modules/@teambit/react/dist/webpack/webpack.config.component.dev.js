"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _default;

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _componentId() {
  const data = require("@teambit/component-id");

  _componentId = function () {
    return data;
  };

  return data;
}

require("@teambit/react.babel.bit-react-transformer");

function _reactRefreshWebpackPlugin() {
  const data = _interopRequireDefault(require("@pmmmwh/react-refresh-webpack-plugin"));

  _reactRefreshWebpackPlugin = function () {
    return data;
  };

  return data;
}

// Make sure the bit-react-transformer is a dependency
// TODO: remove it once we can set policy from component to component then set it via the component.json
// This is the production and development configuration.
// It is focused on developer experience, fast rebuilds, and a minimal bundle.
// eslint-disable-next-line complexity
// export default function (workDir: string, envId: string): Configuration {
function _default(workDir, envId, componentsDirs) {
  return {
    module: {
      rules: [{
        test: /\.js$/,
        enforce: 'pre',
        // limit loader to files in the current project,
        // to skip any files linked from other projects (like Bit itself)
        include: _path().default.join(workDir, 'node_modules'),
        // only apply to packages with componentId in their package.json (ie. bit components)
        descriptionData: {
          componentId: value => !!value
        },
        use: [require.resolve('source-map-loader')]
      }, {
        test: /\.js$/,
        // limit loader to files in the current project,
        // to skip any files linked from other projects (like Bit itself)
        include: _path().default.join(workDir, 'node_modules'),
        // only apply to packages with componentId in their package.json (ie. bit components)
        descriptionData: {
          componentId: _componentId().ComponentID.isValidObject
        },
        use: [{
          loader: require.resolve('babel-loader'),
          options: {
            babelrc: false,
            configFile: false,
            plugins: [require.resolve('react-refresh/babel'), // for component highlighting in preview.
            [require.resolve('@teambit/react.babel.bit-react-transformer')]],
            // turn off all optimizations (only slow down for node_modules)
            compact: false,
            minified: false
          }
        }]
      }, // MDX support (move to the mdx aspect and extend from there)
      {
        test: /\.mdx?$/,
        // to skip any files linked from other projects (like Bit itself)
        include: _path().default.join(workDir, 'node_modules'),
        // only apply to packages with componentId in their package.json (ie. bit components)
        descriptionData: {
          componentId: value => !!value
        },
        use: [{
          loader: require.resolve('babel-loader'),
          options: {
            babelrc: false,
            configFile: false,
            presets: [require.resolve('@babel/preset-react'), require.resolve('@babel/preset-env')],
            plugins: [require.resolve('react-refresh/babel')]
          }
        }, {
          loader: require.resolve('@teambit/mdx.modules.mdx-loader')
        }]
      }]
    },
    plugins: [// No need here as we have `hot: true` in the dev server
    // new webpack.HotModuleReplacementPlugin({}),
    new (_reactRefreshWebpackPlugin().default)({
      overlay: {
        sockPath: `_hmr/${envId}`,
        // TODO: check why webpackHotDevClient and react-error-overlay are not responding for runtime
        // errors
        entry: require.resolve('./react-hot-dev-client'),
        module: require.resolve('./refresh')
      },
      // // having no value for include, exclude === revert to the defaults!
      // // original/defaults values:
      // include: /\.([cm]js|[jt]sx?|flow)$/i,
      // exclude: /node_modules/,
      include: componentsDirs,
      exclude: [// prevent recursion:
      /react-refresh-webpack-plugin/i, // file type filtering was done by `include`, so need to negative-filter them out here
      // A lookbehind assertion (`?<!`) has to be fixed width
      /(?<!\.mdx)(?<!\.js)$/i]
    })]
  };
}

//# sourceMappingURL=webpack.config.component.dev.js.map