import { Component } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { EnvsMain } from '@teambit/envs';
import { Parser } from './parser';
import { Module } from './schemas';
import { SemanticSchema } from './semantic-schema';
export declare type ParserSlot = SlotRegistry<Parser>;
export declare type SchemaConfig = {
    defaultParser: string;
};
export declare class SchemaMain {
    private parserSlot;
    private envs;
    private config;
    constructor(parserSlot: ParserSlot, envs: EnvsMain, config: SchemaConfig);
    getDefaultParser(): Parser;
    parseModule(path: string): Module;
    getSchema(component: Component): Promise<SemanticSchema>;
    registerParser(parser: Parser): SchemaMain;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static defaultConfig: {
        defaultParser: string;
    };
    static slots: ((registerFn: () => string) => SlotRegistry<Parser>)[];
    static provider([envs]: [EnvsMain], config: SchemaConfig, [parserSlot]: [ParserSlot]): Promise<SchemaMain>;
}
