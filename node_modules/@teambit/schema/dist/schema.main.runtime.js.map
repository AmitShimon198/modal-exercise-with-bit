{"version":3,"sources":["schema.main.runtime.ts"],"names":["SchemaMain","constructor","parserSlot","envs","config","getDefaultParser","get","defaultParser","parseModule","path","parsers","toArray","maybeParser","find","parser","match","extension","getSchema","component","env","getEnv","getSchemaExtractor","Error","name","schemaExtractor","extract","exports","registerParser","register","provider","schema","MainRuntime","EnvsAspect","Slot","withType","SchemaAspect","addRuntime"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAHA;;AAiBA;AACA;AACA;AACO,MAAMA,UAAN,CAAiB;AACtBC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,UAJC,EAMDC,IANC,EAQDC,MARC,EAST;AAAA,SALQF,UAKR,GALQA,UAKR;AAAA,SAHQC,IAGR,GAHQA,IAGR;AAAA,SADQC,MACR,GADQA,MACR;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,gBAAgB,GAAW;AACzB,WAAO,KAAKH,UAAL,CAAgBI,GAAhB,CAAoB,KAAKF,MAAL,CAAYG,aAAhC,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,WAAW,CAACC,IAAD,EAAuB;AAChC,UAAMC,OAAO,GAAG,KAAKR,UAAL,CAAgBS,OAAhB,EAAhB;AACA,QAAIC,WAAW,GAAGF,OAAO,CAACG,IAAR,CAAa,CAAC,GAAGC,MAAH,CAAD,KAAgB;AAC7C,YAAMC,KAAK,GAAGN,IAAI,CAACM,KAAL,CAAWD,MAAM,CAACE,SAAlB,CAAd;AACA,aAAOD,KAAP;AACD,KAHiB,CAAlB;;AAKA,QAAI,CAACH,WAAL,EAAkB;AAChBA,MAAAA,WAAW,GAAG,CAAC,KAAKR,MAAL,CAAYG,aAAb,EAA4B,KAAKF,gBAAL,EAA5B,CAAd;AACD;;AAED,UAAM,GAAGS,MAAH,IAAaF,WAAnB;AACA,WAAOE,MAAM,CAACN,WAAP,CAAmBC,IAAnB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACiB,QAATQ,SAAS,CAACC,SAAD,EAAgD;AAC7D,UAAMC,GAAG,GAAG,KAAKhB,IAAL,CAAUiB,MAAV,CAAiBF,SAAjB,EAA4BC,GAAxC;;AACA,QAAI,OAAOA,GAAG,CAACE,kBAAX,KAAkC,WAAtC,EAAmD;AACjD,YAAM,IAAIC,KAAJ,CAAW,kCAAiCH,GAAG,CAACI,IAAK,EAArD,CAAN;AACD;;AACD,UAAMC,eAAgC,GAAGL,GAAG,CAACE,kBAAJ,EAAzC;AACA,UAAMG,eAAe,CAACC,OAAhB,CAAwBP,SAAxB,CAAN;AAEA,WAAO;AACLQ,MAAAA,OAAO,EAAE;AADJ,KAAP;AAGD;AAED;AACF;AACA;;;AACEC,EAAAA,cAAc,CAACb,MAAD,EAA6B;AACzC,SAAKZ,UAAL,CAAgB0B,QAAhB,CAAyBd,MAAzB;AACA,WAAO,IAAP;AACD;;AAYoB,eAARe,QAAQ,CAAC,CAAC1B,IAAD,CAAD,EAAqBC,MAArB,EAA2C,CAACF,UAAD,CAA3C,EAAuE;AAC1F,UAAM4B,MAAM,GAAG,IAAI9B,UAAJ,CAAeE,UAAf,EAA2BC,IAA3B,EAAiCC,MAAjC,CAAf,CAD0F,CAE1F;AACA;AACA;AACA;;AAEA,WAAO0B,MAAP;AACD;;AAhFqB;;;gCAAX9B,U,aA8DM+B,kB;gCA9DN/B,U,kBAgEW,CAACgC,kBAAD,C;gCAhEXhC,U,mBAkEY;AACrBO,EAAAA,aAAa,EAAE;AADM,C;gCAlEZP,U,WAsEI,CAACiC,gBAAKC,QAAL,EAAD,C;;AAajBC,uBAAaC,UAAb,CAAwBpC,UAAxB","sourcesContent":["import { MainRuntime } from '@teambit/cli';\nimport { Component } from '@teambit/component';\nimport { Slot, SlotRegistry } from '@teambit/harmony';\n// import { Workspace, WorkspaceAspect } from '@teambit/workspace';\nimport { EnvsAspect, EnvsMain } from '@teambit/envs';\nimport { Parser } from './parser';\nimport { SchemaAspect } from './schema.aspect';\nimport { Module } from './schemas';\nimport { SemanticSchema } from './semantic-schema';\nimport { SchemaExtractor } from './schema-extractor';\n\nexport type ParserSlot = SlotRegistry<Parser>;\n\nexport type SchemaConfig = {\n  /**\n   * default parser\n   */\n  defaultParser: string;\n};\n\n/**\n * extension for extracting component schemas.\n */\nexport class SchemaMain {\n  constructor(\n    /**\n     * parsers slot.\n     */\n    private parserSlot: ParserSlot,\n\n    private envs: EnvsMain,\n\n    private config: SchemaConfig\n  ) {}\n\n  /**\n   * get the default parser.\n   */\n  getDefaultParser(): Parser {\n    return this.parserSlot.get(this.config.defaultParser) as Parser;\n  }\n\n  /**\n   * parse a module into a component schema.\n   */\n  parseModule(path: string): Module {\n    const parsers = this.parserSlot.toArray();\n    let maybeParser = parsers.find(([, parser]) => {\n      const match = path.match(parser.extension);\n      return match;\n    });\n\n    if (!maybeParser) {\n      maybeParser = [this.config.defaultParser, this.getDefaultParser()];\n    }\n\n    const [, parser] = maybeParser;\n    return parser.parseModule(path);\n  }\n\n  /**\n   * get a schema of a component.\n   * @param component target component.\n   */\n  async getSchema(component: Component): Promise<SemanticSchema> {\n    const env = this.envs.getEnv(component).env;\n    if (typeof env.getSchemaExtractor === 'undefined') {\n      throw new Error(`No SchemaExtractor defined for ${env.name}`);\n    }\n    const schemaExtractor: SchemaExtractor = env.getSchemaExtractor();\n    await schemaExtractor.extract(component);\n\n    return {\n      exports: [],\n    };\n  }\n\n  /**\n   * register a new parser.\n   */\n  registerParser(parser: Parser): SchemaMain {\n    this.parserSlot.register(parser);\n    return this;\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [EnvsAspect];\n\n  static defaultConfig = {\n    defaultParser: 'teambit.typescript/typescript',\n  };\n\n  static slots = [Slot.withType<Parser>()];\n\n  static async provider([envs]: [EnvsMain], config: SchemaConfig, [parserSlot]: [ParserSlot]) {\n    const schema = new SchemaMain(parserSlot, envs, config);\n    // workspace.onComponentLoad(async (component) => {\n    //   const apiSchema = await schema.getSchema(component);\n    //   return {};\n    // });\n\n    return schema;\n  }\n}\n\nSchemaAspect.addRuntime(SchemaMain);\n"]}