{"version":3,"sources":["scope-component-loader.ts"],"names":["ScopeComponentLoader","constructor","scope","logger","componentsCache","maxSize","get","id","fromCache","getFromCache","idStr","toString","debug","legacyId","_legacy","modelComponent","legacyScope","getModelComponentIfExist","changeScope","name","undefined","versionStr","version","latest","newId","changeVersion","loadVersion","objects","snap","createSnapFromVersion","state","createStateFromVersion","tagMap","getTagMap","component","Component","set","getFromConsumerComponent","consumerComponent","getModelComponent","resolveComponentId","pendingVersion","getRemoteComponent","compImport","ScopeComponentsImporter","objectList","getAll","forEach","obj","setCache","getConsumerComponent","getState","hash","load","Ref","getSnap","getVersionObject","err","code","errMsg","error","Error","clearCache","deleteAll","isEqual","TagMap","Object","keys","versionsIncludeOrphaned","tag","Tag","SemVer","Snap","Date","parseInt","log","date","parents","map","p","displayName","username","email","message","State","Config","mainFile","extensions","componentExtension","createAspectList","ComponentFS","fromVinyls","files","dependencies"],"mappings":"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","sourcesContent":["import { Component, ComponentFS, ComponentID, Config, Snap, State, Tag, TagMap } from '@teambit/component';\nimport { Logger } from '@teambit/logger';\nimport { SemVer } from 'semver';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport ScopeComponentsImporter from '@teambit/legacy/dist/scope/component-ops/scope-components-importer';\nimport { ModelComponent, Version } from '@teambit/legacy/dist/scope/models';\nimport { Ref } from '@teambit/legacy/dist/scope/objects';\nimport { getMaxSizeForComponents, InMemoryCache } from '@teambit/legacy/dist/cache/in-memory-cache';\nimport { createInMemoryCache } from '@teambit/legacy/dist/cache/cache-factory';\nimport type { ScopeMain } from './scope.main.runtime';\n\nexport class ScopeComponentLoader {\n  private componentsCache: InMemoryCache<Component>; // cache loaded components\n  constructor(private scope: ScopeMain, private logger: Logger) {\n    this.componentsCache = createInMemoryCache({ maxSize: getMaxSizeForComponents() });\n  }\n\n  async get(id: ComponentID): Promise<Component | undefined> {\n    const fromCache = this.getFromCache(id);\n    if (fromCache) {\n      return fromCache;\n    }\n    const idStr = id.toString();\n    this.logger.debug(`ScopeComponentLoader.get, loading ${idStr}`);\n    const legacyId = id._legacy;\n    let modelComponent = await this.scope.legacyScope.getModelComponentIfExist(id._legacy);\n    // Search with scope name for bare scopes\n    if (!modelComponent && !legacyId.scope) {\n      id = id.changeScope(this.scope.name);\n      modelComponent = await this.scope.legacyScope.getModelComponentIfExist(id._legacy);\n    }\n    if (!modelComponent) return undefined;\n\n    // :TODO move to head snap once we have it merged, for now using `latest`.\n    const versionStr = id.version && id.version !== 'latest' ? id.version : modelComponent.latest();\n    const newId = id.changeVersion(versionStr);\n    const version = await modelComponent.loadVersion(versionStr, this.scope.legacyScope.objects);\n    const snap = this.createSnapFromVersion(version);\n    const state = await this.createStateFromVersion(id, version);\n    const tagMap = await this.getTagMap(modelComponent);\n\n    const component = new Component(newId, snap, state, tagMap, this.scope);\n    this.componentsCache.set(idStr, component);\n    return component;\n  }\n\n  async getFromConsumerComponent(consumerComponent: ConsumerComponent): Promise<Component> {\n    const legacyId = consumerComponent.id;\n    const modelComponent = await this.scope.legacyScope.getModelComponent(legacyId);\n    // :TODO move to head snap once we have it merged, for now using `latest`.\n    const id = await this.scope.resolveComponentId(legacyId);\n    const version =\n      consumerComponent.pendingVersion ||\n      (await modelComponent.loadVersion(legacyId.version as string, this.scope.legacyScope.objects));\n    const snap = this.createSnapFromVersion(version);\n    const state = await this.createStateFromVersion(id, version);\n    const tagMap = await this.getTagMap(modelComponent);\n\n    return new Component(id, snap, state, tagMap, this.scope);\n  }\n\n  /**\n   * get a component from a remote without importing it\n   */\n  async getRemoteComponent(id: ComponentID): Promise<Component> {\n    const compImport = new ScopeComponentsImporter(this.scope.legacyScope);\n    const objectList = await compImport.getRemoteComponent(id._legacy);\n    // it's crucial to add all objects to the Repository cache. otherwise, later, when it asks\n    // for the consumerComponent from the legacyScope, it won't work.\n    objectList?.getAll().forEach((obj) => this.scope.legacyScope.objects.setCache(obj));\n    const consumerComponent = await this.scope.legacyScope.getConsumerComponent(id._legacy);\n    return this.getFromConsumerComponent(consumerComponent);\n  }\n\n  async getState(id: ComponentID, hash: string): Promise<State> {\n    const version = (await this.scope.legacyScope.objects.load(new Ref(hash))) as Version;\n    return this.createStateFromVersion(id, version);\n  }\n\n  async getSnap(id: ComponentID, hash: string): Promise<Snap> {\n    const getVersionObject = async (): Promise<Version> => {\n      try {\n        const snap = await this.scope.legacyScope.objects.load(new Ref(hash), true);\n        return snap as Version;\n      } catch (err: any) {\n        if (err.code === 'ENOENT') {\n          const errMsg = `fatal: snap \"${hash}\" file for component \"${id.toString()}\" was not found in the filesystem`;\n          this.logger.error(errMsg, err);\n          throw new Error(errMsg);\n        } else {\n          throw err;\n        }\n      }\n    };\n    const version = await getVersionObject();\n    return this.createSnapFromVersion(version);\n  }\n\n  clearCache() {\n    this.componentsCache.deleteAll();\n  }\n\n  /**\n   * make sure that not only the id-str match, but also the legacy-id.\n   * this is needed because the ComponentID.toString() is the same whether or not the legacy-id has\n   * scope-name, as it includes the defaultScope if the scope is empty.\n   * as a result, when out-of-sync is happening and the id is changed to include scope-name in the\n   * legacy-id, the component is the cache has the old id.\n   */\n  private getFromCache(id: ComponentID): Component | undefined {\n    const idStr = id.toString();\n    const fromCache = this.componentsCache.get(idStr);\n    if (fromCache && fromCache.id._legacy.isEqual(id._legacy)) {\n      return fromCache;\n    }\n    return undefined;\n  }\n\n  private async getTagMap(modelComponent: ModelComponent): Promise<TagMap> {\n    const tagMap = new TagMap();\n    Object.keys(modelComponent.versionsIncludeOrphaned).forEach((versionStr: string) => {\n      const tag = new Tag(modelComponent.versionsIncludeOrphaned[versionStr].toString(), new SemVer(versionStr));\n      tagMap.set(tag.version, tag);\n    });\n    return tagMap;\n  }\n\n  private createSnapFromVersion(version: Version): Snap {\n    return new Snap(\n      version.hash().toString(),\n      new Date(parseInt(version.log.date)),\n      version.parents.map((p) => p.toString()),\n      {\n        displayName: version.log.username || 'unknown',\n        email: version.log.email || 'unknown@anywhere',\n      },\n      version.log.message\n    );\n  }\n\n  private async createStateFromVersion(id: ComponentID, version: Version): Promise<State> {\n    const consumerComponent = await this.scope.legacyScope.getConsumerComponent(id._legacy);\n    const state = new State(\n      // We use here the consumerComponent.extensions instead of version.extensions\n      // because as part of the conversion to consumer component the artifacts are initialized as Artifact instances\n      new Config(version.mainFile, consumerComponent.extensions),\n      this.scope.componentExtension.createAspectList(consumerComponent.extensions, this.scope.name),\n      ComponentFS.fromVinyls(consumerComponent.files),\n      version.dependencies,\n      consumerComponent\n    );\n    return state;\n  }\n}\n"]}