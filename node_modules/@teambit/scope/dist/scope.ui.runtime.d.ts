import type { ComponentUI, ComponentModel } from '@teambit/component';
import { SlotRegistry } from '@teambit/harmony';
import { ReactRouterUI } from '@teambit/react-router';
import { RouteSlot } from '@teambit/ui-foundation.ui.react-router.slot-router';
import { SidebarUI, SidebarItem, SidebarItemSlot } from '@teambit/sidebar';
import { ComponentTreeNode } from '@teambit/component-tree';
import { UIRootUI as UIRoot, UiUI } from '@teambit/ui';
import { ComponentType, ReactNode } from 'react';
import { MenuItemSlot, MenuItem } from '@teambit/ui-foundation.ui.main-dropdown';
import { RouteProps } from 'react-router-dom';
import { MenuWidget, MenuWidgetSlot } from '@teambit/ui-foundation.ui.menu';
import { CommandBarUI, ComponentSearcher } from '@teambit/command-bar';
import { ScopeModel } from '@teambit/scope.models.scope-model';
export declare type ScopeBadge = ComponentType;
export declare type ScopeBadgeSlot = SlotRegistry<ScopeBadge[]>;
export declare type ScopeContextType = ComponentType<{
    scope: ScopeModel;
    children: ReactNode;
}>;
export declare type SidebarSlot = SlotRegistry<ComponentTreeNode>;
export declare type ScopeOverview = ComponentType;
export declare type ScopeOverviewSlot = SlotRegistry<ScopeOverview>;
export declare type Corner = ComponentType;
export declare type CornerSlot = SlotRegistry<Corner>;
export declare type OverviewLine = ComponentType;
export declare type OverviewLineSlot = SlotRegistry<OverviewLine[]>;
export declare class ScopeUI {
    private routeSlot;
    private componentUi;
    private menuSlot;
    private sidebar;
    private sidebarSlot;
    private commandBarUI;
    private componentSearcher;
    private scopeBadgeSlot;
    private menuWidgetSlot;
    private sidebarItemSlot;
    private menuItemSlot;
    private cornerSlot;
    private overviewSlot;
    constructor(routeSlot: RouteSlot, componentUi: ComponentUI, menuSlot: RouteSlot, sidebar: SidebarUI, sidebarSlot: SidebarSlot, commandBarUI: CommandBarUI, componentSearcher: ComponentSearcher, scopeBadgeSlot: ScopeBadgeSlot, menuWidgetSlot: MenuWidgetSlot, sidebarItemSlot: SidebarItemSlot, menuItemSlot: MenuItemSlot, cornerSlot: CornerSlot, overviewSlot: OverviewLineSlot);
    private setSidebarToggle;
    registerBadge(...badges: ScopeBadge[]): this;
    registerOverviewLine(...lines: OverviewLine[]): this;
    registerRoute(route: RouteProps): this;
    private registerExplicitRoutes;
    registerMenuWidget(...menuItems: MenuWidget[]): void;
    registerCorner(corner: Corner): void;
    replaceOverview(): void;
    replaceDescription(): void;
    replaceMetadataSection(): void;
    registerMetadataItem(): void;
    replaceComponentGrid(): void;
    registerMetadata(): void;
    private _context;
    addContext(context: ScopeContextType): void;
    getContext(): ScopeContextType | undefined;
    registerMenuItem: (menuItems: MenuItem[]) => void;
    registerSidebarLink: (...links: SidebarItem[]) => void;
    uiRoot(): UIRoot;
    setComponents: (components: ComponentModel[]) => void;
    private menuItems;
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static slots: (((registerFn: () => string) => SlotRegistry<RouteProps<string, {
        [x: string]: string | undefined;
    }>>) | ((registerFn: () => string) => SlotRegistry<ComponentTreeNode>) | ((registerFn: () => string) => SlotRegistry<MenuItemSlot>) | ((registerFn: () => string) => SlotRegistry<SidebarItemSlot>) | ((registerFn: () => string) => SlotRegistry<ScopeBadge>) | ((registerFn: () => string) => SlotRegistry<MenuWidget[]>) | ((registerFn: () => string) => SlotRegistry<CornerSlot>))[];
    static provider([ui, componentUi, sidebar, commandBarUI, reactRouterUI]: [
        UiUI,
        ComponentUI,
        SidebarUI,
        CommandBarUI,
        ReactRouterUI
    ], config: any, [routeSlot, menuSlot, sidebarSlot, scopeBadgeSlot, menuWidgetSlot, menuItemSlot, sidebarItemSlot, cornerSlot, overviewSlot,]: [
        RouteSlot,
        RouteSlot,
        SidebarSlot,
        ScopeBadgeSlot,
        MenuWidgetSlot,
        MenuItemSlot,
        SidebarItemSlot,
        CornerSlot,
        OverviewLineSlot
    ]): Promise<ScopeUI>;
}
export default ScopeUI;
