"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.ScopeUI = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _component() {
  const data = require("@teambit/component");

  _component = function () {
    return data;
  };

  return data;
}

function _harmony() {
  const data = require("@teambit/harmony");

  _harmony = function () {
    return data;
  };

  return data;
}

function _reactRouter() {
  const data = _interopRequireDefault(require("@teambit/react-router"));

  _reactRouter = function () {
    return data;
  };

  return data;
}

function _sidebar() {
  const data = require("@teambit/sidebar");

  _sidebar = function () {
    return data;
  };

  return data;
}

function _ui() {
  const data = require("@teambit/ui");

  _ui = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _designUiSurfacesMenu() {
  const data = require("@teambit/design.ui.surfaces.menu.link-item");

  _designUiSurfacesMenu = function () {
    return data;
  };

  return data;
}

function _commandBar() {
  const data = _interopRequireWildcard(require("@teambit/command-bar"));

  _commandBar = function () {
    return data;
  };

  return data;
}

function _menu() {
  const data = require("./ui/menu");

  _menu = function () {
    return data;
  };

  return data;
}

function _scope() {
  const data = require("./scope.aspect");

  _scope = function () {
    return data;
  };

  return data;
}

function _scope2() {
  const data = require("./ui/scope");

  _scope2 = function () {
    return data;
  };

  return data;
}

function _componentsDrawer() {
  const data = require("./ui/components-drawer");

  _componentsDrawer = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

class ScopeUI {
  constructor(
  /**
   * route slot.
   */
  routeSlot,
  /**
   * component ui extension.
   */
  componentUi,
  /**
   * menu slot
   */
  menuSlot, sidebar, sidebarSlot, commandBarUI, componentSearcher, scopeBadgeSlot, menuWidgetSlot,
  /**
   * sidebar link slot
   */
  sidebarItemSlot,
  /**
   * main dropdown item slot
   */
  menuItemSlot,
  /**
   * corner slot
   */
  cornerSlot,
  /**
   * overview line slot to add new lines beneath the overview section
   */
  overviewSlot) {
    this.routeSlot = routeSlot;
    this.componentUi = componentUi;
    this.menuSlot = menuSlot;
    this.sidebar = sidebar;
    this.sidebarSlot = sidebarSlot;
    this.commandBarUI = commandBarUI;
    this.componentSearcher = componentSearcher;
    this.scopeBadgeSlot = scopeBadgeSlot;
    this.menuWidgetSlot = menuWidgetSlot;
    this.sidebarItemSlot = sidebarItemSlot;
    this.menuItemSlot = menuItemSlot;
    this.cornerSlot = cornerSlot;
    this.overviewSlot = overviewSlot;
    (0, _defineProperty2().default)(this, "setSidebarToggle", () => {});
    (0, _defineProperty2().default)(this, "_context", void 0);
    (0, _defineProperty2().default)(this, "registerMenuItem", menuItems => {
      this.menuItemSlot.register(menuItems);
    });
    (0, _defineProperty2().default)(this, "registerSidebarLink", (...links) => {
      this.sidebarItemSlot.register(links);
    });
    (0, _defineProperty2().default)(this, "setComponents", components => {
      this.componentSearcher.update(components);
    });
    (0, _defineProperty2().default)(this, "menuItems", [{
      category: 'general',
      title: 'Open command bar',
      keyChar: 'mod+k',
      handler: () => {
        var _this$commandBarUI;

        return (_this$commandBarUI = this.commandBarUI) === null || _this$commandBarUI === void 0 ? void 0 : _this$commandBarUI.run('command-bar.open');
      }
    }, {
      category: 'general',
      title: 'Toggle component list',
      keyChar: 'alt+s',
      handler: () => {
        var _this$commandBarUI2;

        return (_this$commandBarUI2 = this.commandBarUI) === null || _this$commandBarUI2 === void 0 ? void 0 : _this$commandBarUI2.run('sidebar.toggle');
      }
    }]);
  }

  /**
   * register a new badge into the scope overview.
   */
  registerBadge(...badges) {
    this.scopeBadgeSlot.register(badges);
    return this;
  }
  /**
   * register a new line beneath the scope overview section.
   */


  registerOverviewLine(...lines) {
    this.overviewSlot.register(lines);
    return this;
  }
  /**
   * register a route to the scope.
   */


  registerRoute(route) {
    this.routeSlot.register(route);
    return this;
  }

  registerExplicitRoutes() {
    this.routeSlot.register({
      path: this.componentUi.routePath,
      children: this.componentUi.getComponentUI(_scope().ScopeAspect.id)
    });
    this.menuSlot.register([{
      path: this.componentUi.routePath,
      children: this.componentUi.getMenu(_scope().ScopeAspect.id)
    }, {
      exact: true,
      path: '/',
      children: /*#__PURE__*/_react().default.createElement(_menu().ScopeMenu, {
        widgetSlot: this.menuWidgetSlot,
        menuItemSlot: this.menuItemSlot
      })
    }]);
  }

  registerMenuWidget(...menuItems) {
    this.menuWidgetSlot.register(menuItems);
  }

  registerCorner(corner) {
    this.cornerSlot.register(corner);
  }
  /**
   * register a scope overview.
   */


  replaceOverview() {}
  /**
   * register description.
   */


  replaceDescription() {}
  /**
   * register metadata section.
   */


  replaceMetadataSection() {}
  /**
   * register a metadata item.
   */


  registerMetadataItem() {}

  replaceComponentGrid() {}
  /**
   * register metadata.
   */


  registerMetadata() {}

  /**
   * add a new context to the scope.
   */
  addContext(context) {
    this._context = () => context;
  }

  getContext() {
    if (!this._context) return undefined;
    return this._context();
  }

  uiRoot() {
    this.sidebar.registerDrawer(new (_componentsDrawer().ComponentsDrawer)(this.sidebarSlot));
    this.commandBarUI.addSearcher(this.componentSearcher);
    const [setKeyBindHandler] = this.commandBarUI.addCommand({
      id: 'sidebar.toggle',
      // TODO - extract to a component!
      handler: () => {},
      displayName: 'Toggle component list',
      keybinding: 'alt+s'
    });
    this.setSidebarToggle = setKeyBindHandler;
    return {
      routes: [{
        path: '/',
        children: /*#__PURE__*/_react().default.createElement(_scope2().Scope, {
          routeSlot: this.routeSlot,
          menuSlot: this.menuSlot,
          sidebar: /*#__PURE__*/_react().default.createElement(this.sidebar.render, {
            itemSlot: this.sidebarItemSlot
          }),
          scopeUi: this,
          badgeSlot: this.scopeBadgeSlot,
          overviewLineSlot: this.overviewSlot,
          context: this.getContext(),
          onSidebarTogglerChange: this.setSidebarToggle,
          cornerSlot: this.cornerSlot
        })
      }]
    };
  }
  /** registers available components */


  static async provider([ui, componentUi, sidebar, commandBarUI, reactRouterUI], config, [routeSlot, menuSlot, sidebarSlot, scopeBadgeSlot, menuWidgetSlot, menuItemSlot, sidebarItemSlot, cornerSlot, overviewSlot]) {
    const componentSearcher = new (_commandBar().ComponentSearcher)(reactRouterUI.navigateTo);
    const scopeUi = new ScopeUI(routeSlot, componentUi, menuSlot, sidebar, sidebarSlot, commandBarUI, componentSearcher, scopeBadgeSlot, menuWidgetSlot, sidebarItemSlot, menuItemSlot, cornerSlot, overviewSlot);
    scopeUi.registerExplicitRoutes();
    scopeUi.registerMenuItem(scopeUi.menuItems);
    scopeUi.registerMenuWidget(() => /*#__PURE__*/_react().default.createElement(_menu().ScopeUseBox, null));
    ui.registerRoot(scopeUi.uiRoot.bind(scopeUi));
    scopeUi.registerSidebarLink(() => /*#__PURE__*/_react().default.createElement(_designUiSurfacesMenu().MenuLinkItem, {
      exact: true,
      href: "/",
      icon: "comps"
    }, "Gallery"));
    return scopeUi;
  }

}

exports.ScopeUI = ScopeUI;
(0, _defineProperty2().default)(ScopeUI, "dependencies", [_ui().UIAspect, _component().ComponentAspect, _sidebar().SidebarAspect, _commandBar().default, _reactRouter().default]);
(0, _defineProperty2().default)(ScopeUI, "runtime", _ui().UIRuntime);
(0, _defineProperty2().default)(ScopeUI, "slots", [_harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType(), _harmony().Slot.withType()]);
var _default = ScopeUI;
exports.default = _default;

_scope().ScopeAspect.addRuntime(ScopeUI);

//# sourceMappingURL=scope.ui.runtime.js.map