"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TestCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _exceptions() {
  const data = require("@teambit/legacy/dist/consumer/exceptions");

  _exceptions = function () {
    return data;
  };

  return data;
}

function _timer() {
  const data = require("@teambit/legacy/dist/toolbox/timer");

  _timer = function () {
    return data;
  };

  return data;
}

function _ink() {
  const data = require("ink");

  _ink = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

function _exceptions2() {
  const data = require("./exceptions");

  _exceptions2 = function () {
    return data;
  };

  return data;
}

class TestCmd {
  constructor(tester, workspace, logger) {
    this.tester = tester;
    this.workspace = workspace;
    this.logger = logger;
    (0, _defineProperty2().default)(this, "name", 'test [pattern]');
    (0, _defineProperty2().default)(this, "description", 'test set of components in your workspace');
    (0, _defineProperty2().default)(this, "alias", 'at');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "shortDescription", '');
    (0, _defineProperty2().default)(this, "options", [['w', 'watch', 'start the tester in watch mode.'], ['d', 'debug', 'start the tester in debug mode.'], ['', 'junit <filepath>', 'write tests results as JUnit XML format into the specified file path'], ['', 'coverage', 'show code coverage data'], ['e', 'env <id>', 'test only the given env'], ['s', 'scope <scope>', 'name of the scope to test'] // TODO: we need to reduce this redundant casting every time.
    ]);
  }

  async render([userPattern], {
    watch = false,
    debug = false,
    env,
    scope,
    junit,
    coverage = false
  }) {
    this.logger.off();

    const timer = _timer().Timer.create();

    const scopeName = typeof scope === 'string' ? scope : undefined;
    timer.start();
    if (!this.workspace) throw new (_exceptions().ConsumerNotFound)();
    const pattern = userPattern && userPattern.toString();
    const components = pattern || scopeName ? await this.workspace.byPattern(pattern || '*', scopeName) : await this.workspace.list();
    if (!components.length) throw new (_exceptions2().NoMatchingComponents)(pattern);
    this.logger.console(`testing total of ${components.length} components in workspace '${_chalk().default.cyan(this.workspace.name)}'`);
    let code = 0;

    if (watch && !debug) {
      await this.tester.watch(components, {
        watch,
        debug,
        env,
        coverage
      });
    } else {
      var _tests$results;

      const tests = await this.tester.test(components, {
        watch,
        debug,
        env,
        junit,
        coverage
      });
      tests === null || tests === void 0 ? void 0 : (_tests$results = tests.results) === null || _tests$results === void 0 ? void 0 : _tests$results.forEach(test => {
        var _test$data, _test$data$errors;

        return (_test$data = test.data) !== null && _test$data !== void 0 && (_test$data$errors = _test$data.errors) !== null && _test$data$errors !== void 0 && _test$data$errors.length ? code = 1 : null;
      });
    }

    const {
      seconds
    } = timer.stop();
    if (watch) return /*#__PURE__*/_react().default.createElement(_ink().Box, null);
    return {
      code,
      data: /*#__PURE__*/_react().default.createElement(_ink().Box, null, /*#__PURE__*/_react().default.createElement(_ink().Text, null, "tested "), /*#__PURE__*/_react().default.createElement(_ink().Text, {
        color: "cyan"
      }, components.length, " "), /*#__PURE__*/_react().default.createElement(_ink().Text, null, "components in "), /*#__PURE__*/_react().default.createElement(_ink().Text, {
        color: "cyan"
      }, seconds, " "), /*#__PURE__*/_react().default.createElement(_ink().Text, null, "seconds."))
    };
  }

}

exports.TestCmd = TestCmd;

//# sourceMappingURL=test.cmd.js.map