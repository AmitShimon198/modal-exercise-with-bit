{"version":3,"sources":["test.cmd.tsx"],"names":["TestCmd","constructor","tester","workspace","logger","render","userPattern","watch","debug","env","scope","junit","coverage","off","timer","Timer","create","scopeName","undefined","start","ConsumerNotFound","pattern","toString","components","byPattern","list","length","NoMatchingComponents","console","chalk","cyan","name","code","tests","test","results","forEach","data","errors","seconds","stop"],"mappings":"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","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport chalk from 'chalk';\nimport { Logger } from '@teambit/logger';\nimport { Workspace } from '@teambit/workspace';\nimport { ConsumerNotFound } from '@teambit/legacy/dist/consumer/exceptions';\nimport { Timer } from '@teambit/legacy/dist/toolbox/timer';\nimport { Box, Text } from 'ink';\nimport React from 'react';\nimport { NoMatchingComponents } from './exceptions';\n\nimport type { TesterMain } from './tester.main.runtime';\n\ntype TestFlags = {\n  watch: boolean;\n  debug: boolean;\n  env?: string;\n  scope?: string;\n  junit?: string;\n  coverage?: boolean;\n};\n\nexport class TestCmd implements Command {\n  name = 'test [pattern]';\n  description = 'test set of components in your workspace';\n  alias = 'at';\n  group = 'development';\n  shortDescription = '';\n  options = [\n    ['w', 'watch', 'start the tester in watch mode.'],\n    ['d', 'debug', 'start the tester in debug mode.'],\n    ['', 'junit <filepath>', 'write tests results as JUnit XML format into the specified file path'],\n    ['', 'coverage', 'show code coverage data'],\n    ['e', 'env <id>', 'test only the given env'],\n    ['s', 'scope <scope>', 'name of the scope to test'],\n    // TODO: we need to reduce this redundant casting every time.\n  ] as CommandOptions;\n\n  constructor(private tester: TesterMain, private workspace: Workspace, private logger: Logger) {}\n\n  async render(\n    [userPattern]: [string],\n    { watch = false, debug = false, env, scope, junit, coverage = false }: TestFlags\n  ) {\n    this.logger.off();\n    const timer = Timer.create();\n    const scopeName = typeof scope === 'string' ? scope : undefined;\n    timer.start();\n    if (!this.workspace) throw new ConsumerNotFound();\n    const pattern = userPattern && userPattern.toString();\n    const components =\n      pattern || scopeName ? await this.workspace.byPattern(pattern || '*', scopeName) : await this.workspace.list();\n\n    if (!components.length) throw new NoMatchingComponents(pattern);\n\n    this.logger.console(\n      `testing total of ${components.length} components in workspace '${chalk.cyan(this.workspace.name)}'`\n    );\n\n    let code = 0;\n    if (watch && !debug) {\n      await this.tester.watch(components, {\n        watch,\n        debug,\n        env,\n        coverage,\n      });\n    } else {\n      const tests = await this.tester.test(components, {\n        watch,\n        debug,\n        env,\n        junit,\n        coverage,\n      });\n      tests?.results?.forEach((test) => (test.data?.errors?.length ? (code = 1) : null));\n    }\n    const { seconds } = timer.stop();\n\n    if (watch) return <Box></Box>;\n    return {\n      code,\n      data: (\n        <Box>\n          <Text>tested </Text>\n          <Text color=\"cyan\">{components.length} </Text>\n          <Text>components in </Text>\n          <Text color=\"cyan\">{seconds} </Text>\n          <Text>seconds.</Text>\n        </Box>\n      ),\n    };\n  }\n}\n"]}