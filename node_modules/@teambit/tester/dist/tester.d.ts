import { Component, ComponentID, ComponentMap } from '@teambit/component';
import { ExecutionContext } from '@teambit/envs';
import { AbstractVinyl } from '@teambit/legacy/dist/consumer/component/sources';
import { TestsResult } from '@teambit/tests-results';
export declare type Tests = {
    components: ComponentsResults[];
    errors?: Error[];
};
export declare type ComponentsResults = {
    componentId: ComponentID;
    results?: TestsResult;
    loading?: boolean;
};
export declare type SpecFiles = ComponentMap<AbstractVinyl[]>;
export declare type ComponentPatternsMap = ComponentMap<{
    path: string;
    relative: string;
}[]>;
export interface TesterContext extends ExecutionContext {
    release: boolean;
    components: Component[];
    quiet?: boolean;
    specFiles: SpecFiles;
    rootPath: string;
    debug?: boolean;
    ui?: boolean;
    watch?: boolean;
    coverage?: boolean;
    patterns: ComponentPatternsMap;
}
export interface Tester {
    displayName?: string;
    icon?: string;
    displayConfig?(): string;
    configPath?: string;
    id: string;
    onTestRunComplete?(callback: CallbackFn): Promise<void>;
    test(context: TesterContext): Promise<Tests>;
    watch?(context: TesterContext): Promise<Tests>;
    version(): string;
}
export declare type CallbackFn = (testSuite: Tests) => void;
