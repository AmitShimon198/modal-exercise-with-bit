import { CLIMain } from '@teambit/cli';
import { Component } from '@teambit/component';
import { EnvsExecutionResult, EnvsMain } from '@teambit/envs';
import { LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { GraphqlMain } from '@teambit/graphql';
import { BuilderMain } from '@teambit/builder';
import { UiMain } from '@teambit/ui';
import { DevFilesMain } from '@teambit/dev-files';
import { TestsResult } from '@teambit/tests-results';
import { ComponentsResults, CallbackFn, Tests } from './tester';
import { TesterService } from './tester.service';
import { TesterTask } from './tester.task';
export declare type TesterExtensionConfig = {
    testRegex: string;
    watchOnStart: boolean;
    patterns: string[];
};
export declare type TesterOptions = {
    watch: boolean;
    debug: boolean;
    ui?: boolean;
    env?: string;
    junit?: string;
    coverage?: boolean;
    callback?: CallbackFn;
};
export declare class TesterMain {
    private graphql;
    private envs;
    private workspace;
    readonly service: TesterService;
    readonly task: TesterTask;
    private devFiles;
    private builder;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    constructor(graphql: GraphqlMain, envs: EnvsMain, workspace: Workspace, service: TesterService, task: TesterTask, devFiles: DevFilesMain, builder: BuilderMain);
    _testsResults: {
        [componentId: string]: ComponentsResults;
    } | undefined[];
    test(components: Component[], opts?: TesterOptions): Promise<EnvsExecutionResult<Tests>>;
    private generateJUnit;
    watch(components: Component[], opts?: TesterOptions): Promise<EnvsExecutionResult<Tests>>;
    uiWatch(): Promise<EnvsExecutionResult<Tests>>;
    getTestsResults(component: Component): Promise<{
        testsResults?: TestsResult;
        loading: boolean;
    } | undefined>;
    private getTestsResultsFromState;
    getTestFiles(component: Component): import("@teambit/legacy/dist/consumer/component/sources").AbstractVinyl[];
    private getOptions;
    static defaultConfig: {
        patterns: string[];
        watchOnStart: boolean;
    };
    static provider([cli, envs, workspace, loggerAspect, graphql, ui, devFiles, builder]: [
        CLIMain,
        EnvsMain,
        Workspace,
        LoggerMain,
        GraphqlMain,
        UiMain,
        DevFilesMain,
        BuilderMain
    ], config: TesterExtensionConfig): Promise<TesterMain>;
}
