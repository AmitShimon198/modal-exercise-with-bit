import { Logger } from '@teambit/logger';
import { EnvService, ExecutionContext, EnvDefinition } from '@teambit/envs';
import { Workspace } from '@teambit/workspace';
import { PubSub } from 'graphql-subscriptions';
import { DevFilesMain } from '@teambit/dev-files';
import { Tests, CallbackFn } from './tester';
import { TesterOptions } from './tester.main.runtime';
export declare const OnTestsChanged = "OnTestsChanged";
export declare type TesterDescriptor = {
    id: string;
    displayName: string;
    icon: string;
    config: string;
};
export declare class TesterService implements EnvService<Tests, TesterDescriptor> {
    readonly workspace: Workspace;
    readonly patterns: string[];
    private logger;
    private pubsub;
    private devFiles;
    name: string;
    constructor(workspace: Workspace, patterns: string[], logger: Logger, pubsub: PubSub, devFiles: DevFilesMain);
    _callback: CallbackFn | undefined;
    render(env: EnvDefinition): JSX.Element;
    getDescriptor(environment: EnvDefinition): {
        id: string;
        displayName: string;
        icon: string;
        config: string;
        version: string;
    } | undefined;
    onTestRunComplete(callback: CallbackFn): void;
    run(context: ExecutionContext, options: TesterOptions): Promise<Tests>;
}
