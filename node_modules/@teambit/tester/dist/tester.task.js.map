{"version":3,"sources":["tester.task.ts"],"names":["JUNIT_PATH","TesterTask","constructor","aspectId","devFiles","CompilerAspect","id","execute","context","tester","env","getTester","componentsSpecFiles","ComponentMap","as","components","component","testCount","toArray","reduce","acc","specs","length","artifacts","componentsResults","specFilesWithCapsule","componentSpecFiles","get","Error","map","specFile","capsule","capsuleNetwork","graphCapsules","getCapsule","compiler","getCompiler","distPath","getDistPathBySrcPath","relative","path","testerContext","Object","assign","release","specFiles","rootPath","capsulesRootDir","patterns","testsResults","test","Promise","all","compResult","junit","componentId","toString","fs","writeFile","writeNpmIgnore","name","globPatterns","componentTests","componentErrors","results","testFiles","errors","file","error","failureMessage","push","tests","forEach","failure","metadata","dir","NPM_IGNORE_FILE","npmIgnorePath","npmIgnoreEntriesStr","appendFile"],"mappings":"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","sourcesContent":["import { BuildContext, BuiltTaskResult, BuildTask } from '@teambit/builder';\nimport fs from 'fs-extra';\nimport { join } from 'path';\nimport { Compiler, CompilerAspect } from '@teambit/compiler';\nimport { DevFilesMain } from '@teambit/dev-files';\nimport { ComponentMap } from '@teambit/component';\nimport { Tester } from './tester';\nimport { detectTestFiles } from './utils';\nimport { testsResultsToJUnitFormat } from './utils/junit-generator';\n\nconst JUNIT_PATH = '__bit_junit.xml';\n\n/**\n * tester build task. Allows to test components during component build.\n */\nexport class TesterTask implements BuildTask {\n  readonly name = 'TestComponents';\n  readonly dependencies = [CompilerAspect.id];\n  constructor(readonly aspectId: string, private devFiles: DevFilesMain) {}\n\n  async execute(context: BuildContext): Promise<BuiltTaskResult> {\n    const tester: Tester = context.env.getTester();\n    const componentsSpecFiles = ComponentMap.as(context.components, (component) => {\n      return detectTestFiles(component, this.devFiles);\n    });\n\n    const testCount = componentsSpecFiles.toArray().reduce((acc, [, specs]) => acc + specs.length, 0);\n    if (testCount === 0)\n      return {\n        artifacts: [],\n        componentsResults: [],\n      };\n\n    const specFilesWithCapsule = ComponentMap.as(context.components, (component) => {\n      const componentSpecFiles = componentsSpecFiles.get(component);\n      if (!componentSpecFiles) throw new Error('capsule not found');\n      const [, specs] = componentSpecFiles;\n      return specs.map((specFile) => {\n        const capsule = context.capsuleNetwork.graphCapsules.getCapsule(component.id);\n        if (!capsule) throw new Error('capsule not found');\n        const compiler: Compiler = context.env.getCompiler();\n        const distPath = compiler.getDistPathBySrcPath(specFile.relative);\n\n        // TODO: fix spec type file need to capsule will return files with type AbstractVinyl\n        return { path: join(capsule.path, distPath), relative: distPath };\n      });\n    });\n\n    const testerContext = Object.assign(context, {\n      release: true,\n      specFiles: specFilesWithCapsule,\n      rootPath: context.capsuleNetwork.capsulesRootDir,\n      patterns: specFilesWithCapsule,\n    });\n\n    // TODO: remove after fix AbstractVinyl on capsule\n    // @ts-ignore\n    const testsResults = await tester.test(testerContext);\n\n    // write junit files\n    await Promise.all(\n      testsResults.components.map(async (compResult) => {\n        const junit = testsResultsToJUnitFormat([compResult]);\n        const capsule = context.capsuleNetwork.graphCapsules.getCapsule(compResult.componentId);\n        if (!capsule) {\n          throw new Error(`unable to find ${compResult.componentId.toString()} in capsules`);\n        }\n        await fs.writeFile(join(capsule.path, JUNIT_PATH), junit);\n        await this.writeNpmIgnore(capsule.path);\n      })\n    );\n\n    return {\n      artifacts: [\n        {\n          name: 'junit',\n          globPatterns: [JUNIT_PATH],\n        },\n      ], // @ts-ignore\n      componentsResults: testsResults.components.map((componentTests) => {\n        const componentErrors = componentTests.results?.testFiles.reduce((errors: string[], file) => {\n          if (file?.error?.failureMessage) {\n            errors.push(file.error.failureMessage);\n          }\n          file.tests.forEach((test) => {\n            if (test.error) errors.push(test.error);\n            if (test.failure) errors.push(test.failure);\n          });\n\n          return errors;\n        }, []);\n        const component = context.capsuleNetwork.graphCapsules.getCapsule(componentTests.componentId)?.component;\n        if (!component) {\n          throw new Error(`unable to find ${componentTests.componentId.toString()} in capsules`);\n        }\n        return {\n          component,\n          metadata: { tests: componentTests.results },\n          errors: componentErrors,\n        };\n      }),\n    };\n  }\n\n  private async writeNpmIgnore(dir: string) {\n    const NPM_IGNORE_FILE = '.npmignore';\n    const npmIgnorePath = join(dir, NPM_IGNORE_FILE);\n    const npmIgnoreEntriesStr = `\\n${JUNIT_PATH}\\n`;\n    await fs.appendFile(npmIgnorePath, npmIgnoreEntriesStr);\n  }\n}\n"]}