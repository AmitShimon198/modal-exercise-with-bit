{"version":3,"sources":["junit-generator.ts"],"names":["testsResultsToJUnitFormat","components","builder","junitReportBuilder","newBuilder","forEach","compResult","suite","testSuite","name","componentId","toString","results","start","timestamp","Date","toISOString","testFiles","testFile","error","testCase","className","file","tests","test","failure","status","skipped","duration","time","build"],"mappings":";;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,SAASA,yBAAT,CAAmCC,UAAnC,EAA4E;AACjF,QAAMC,OAAO,GAAGC,8BAAmBC,UAAnB,EAAhB;;AACAH,EAAAA,UAAU,CAACI,OAAX,CAAoBC,UAAD,IAAgB;AAAA;;AACjC,UAAMC,KAAK,GAAGL,OAAO,CAACM,SAAR,GAAoBC,IAApB,CAAyBH,UAAU,CAACI,WAAX,CAAuBC,QAAvB,EAAzB,CAAd;;AACA,+BAAIL,UAAU,CAACM,OAAf,gDAAI,oBAAoBC,KAAxB,EAA+B;AAAA;;AAC7BN,MAAAA,KAAK,CAACO,SAAN,CAAgB,IAAIC,IAAJ,yBAAST,UAAU,CAACM,OAApB,yDAAS,qBAAoBC,KAA7B,EAAoCG,WAApC,EAAhB;AACD;;AACD,4BAAAV,UAAU,CAACM,OAAX,8EAAoBK,SAApB,CAA8BZ,OAA9B,CAAuCa,QAAD,IAAc;AAClD,UAAIA,QAAQ,CAACC,KAAb,EAAoB;AAClB,cAAMC,QAAQ,GAAGb,KAAK,CAACa,QAAN,GAAiBC,SAAjB,CAA2BH,QAAQ,CAACI,IAApC,EAA0Cb,IAA1C,CAA+CS,QAAQ,CAACI,IAAxD,CAAjB;AACAF,QAAAA,QAAQ,CAACD,KAAT,CAAe,0BAAUD,QAAQ,CAACC,KAAT,CAAeA,KAAzB,CAAf;AACD;;AACDD,MAAAA,QAAQ,CAACK,KAAT,CAAelB,OAAf,CAAwBmB,IAAD,IAAU;AAC/B,cAAMJ,QAAQ,GAAGb,KAAK,CAACa,QAAN,GAAiBC,SAAjB,CAA2BH,QAAQ,CAACI,IAApC,EAA0Cb,IAA1C,CAA+Ce,IAAI,CAACf,IAApD,CAAjB;;AACA,YAAIe,IAAI,CAACL,KAAT,EAAgB;AACdC,UAAAA,QAAQ,CAACD,KAAT,CAAe,0BAAUK,IAAI,CAACL,KAAf,CAAf;AACD;;AACD,YAAIK,IAAI,CAACC,OAAT,EAAkB;AAChBL,UAAAA,QAAQ,CAACK,OAAT,CAAiB,0BAAUD,IAAI,CAACC,OAAf,CAAjB;AACD;;AACD,YAAID,IAAI,CAACE,MAAL,KAAgB,SAAhB,IAA6BF,IAAI,CAACE,MAAL,KAAgB,SAAjD,EAA4D;AAC1DN,UAAAA,QAAQ,CAACO,OAAT;AACD;;AACD,YAAIH,IAAI,CAACI,QAAT,EAAmB;AACjBR,UAAAA,QAAQ,CAACS,IAAT,CAAcL,IAAI,CAACI,QAAL,GAAgB,IAA9B;AACD;AACF,OAdD;AAeD,KApBD;AAqBD,GA1BD;AA2BA,SAAO1B,OAAO,CAAC4B,KAAR,EAAP;AACD","sourcesContent":["import junitReportBuilder from 'junit-report-builder';\nimport stripAnsi from 'strip-ansi';\nimport { ComponentsResults } from '../tester';\n\nexport function testsResultsToJUnitFormat(components: ComponentsResults[]): string {\n  const builder = junitReportBuilder.newBuilder();\n  components.forEach((compResult) => {\n    const suite = builder.testSuite().name(compResult.componentId.toString());\n    if (compResult.results?.start) {\n      suite.timestamp(new Date(compResult.results?.start).toISOString());\n    }\n    compResult.results?.testFiles.forEach((testFile) => {\n      if (testFile.error) {\n        const testCase = suite.testCase().className(testFile.file).name(testFile.file);\n        testCase.error(stripAnsi(testFile.error.error as string));\n      }\n      testFile.tests.forEach((test) => {\n        const testCase = suite.testCase().className(testFile.file).name(test.name);\n        if (test.error) {\n          testCase.error(stripAnsi(test.error));\n        }\n        if (test.failure) {\n          testCase.failure(stripAnsi(test.failure));\n        }\n        if (test.status === 'skipped' || test.status === 'pending') {\n          testCase.skipped();\n        }\n        if (test.duration) {\n          testCase.time(test.duration / 1000);\n        }\n      });\n    });\n  });\n  return builder.build();\n}\n"]}