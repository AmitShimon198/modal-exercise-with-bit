import ts, { TsConfigSourceFile } from 'typescript';
import { Compiler } from '@teambit/compiler';
import { Logger, LoggerMain } from '@teambit/logger';
import { SchemaExtractor, SchemaMain } from '@teambit/schema';
import { PackageJsonProps } from '@teambit/pkg';
import { TypescriptConfigMutator } from '@teambit/typescript.modules.ts-config-mutator';
import { TypeScriptCompilerOptions } from './compiler-options';
export declare type TsMode = 'build' | 'dev';
export declare type TsConfigTransformContext = {};
export declare type TsConfigTransformer = (config: TypescriptConfigMutator, context: TsConfigTransformContext) => TypescriptConfigMutator;
export declare class TypescriptMain {
    private logger;
    constructor(logger: Logger);
    createCompiler(options: TypeScriptCompilerOptions, transformers?: TsConfigTransformer[], tsModule?: typeof ts): Compiler;
    createSchemaExtractor(tsconfig: TsConfigSourceFile): SchemaExtractor;
    getPackageJsonProps(): PackageJsonProps;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([schema, loggerExt]: [SchemaMain, LoggerMain]): Promise<TypescriptMain>;
}
export declare function runTransformersWithContext(config: TypescriptConfigMutator, transformers: TsConfigTransformer[] | undefined, context: TsConfigTransformContext): TypescriptConfigMutator;
