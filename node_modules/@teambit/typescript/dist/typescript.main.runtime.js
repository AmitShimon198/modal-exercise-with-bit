"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runTransformersWithContext = runTransformersWithContext;
exports.TypescriptMain = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _typescript() {
  const data = _interopRequireDefault(require("typescript"));

  _typescript = function () {
    return data;
  };

  return data;
}

function _cli() {
  const data = require("@teambit/cli");

  _cli = function () {
    return data;
  };

  return data;
}

function _logger() {
  const data = require("@teambit/logger");

  _logger = function () {
    return data;
  };

  return data;
}

function _schema() {
  const data = require("@teambit/schema");

  _schema = function () {
    return data;
  };

  return data;
}

function _typescriptModules() {
  const data = require("@teambit/typescript.modules.ts-config-mutator");

  _typescriptModules = function () {
    return data;
  };

  return data;
}

function _typescript2() {
  const data = require("./typescript.extractor");

  _typescript2 = function () {
    return data;
  };

  return data;
}

function _typescript3() {
  const data = require("./typescript.aspect");

  _typescript3 = function () {
    return data;
  };

  return data;
}

function _typescript4() {
  const data = require("./typescript.compiler");

  _typescript4 = function () {
    return data;
  };

  return data;
}

function _typescript5() {
  const data = require("./typescript.parser");

  _typescript5 = function () {
    return data;
  };

  return data;
}

class TypescriptMain {
  constructor(logger) {
    this.logger = logger;
  }
  /**
   * create a new compiler.
   */


  createCompiler(options, transformers = [], tsModule = _typescript().default) {
    const configMutator = new (_typescriptModules().TypescriptConfigMutator)(options);
    const transformerContext = {};
    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);
    return new (_typescript4().TypescriptCompiler)(_typescript3().TypescriptAspect.id, this.logger, afterMutation.raw, tsModule);
  }
  /**
   * create an instance of a typescript semantic schema extractor.
   */


  createSchemaExtractor(tsconfig) {
    return new (_typescript2().TypeScriptExtractor)(tsconfig);
  }
  /**
   * add the default package json properties to the component
   * :TODO @gilad why do we need this DSL? can't I just get the args here.
   */


  getPackageJsonProps() {
    return {
      main: 'dist/{main}.js',
      types: '{main}.ts'
    };
  }

  static async provider([schema, loggerExt]) {
    schema.registerParser(new (_typescript5().TypeScriptParser)());
    const logger = loggerExt.createLogger(_typescript3().TypescriptAspect.id);
    return new TypescriptMain(logger);
  }

}

exports.TypescriptMain = TypescriptMain;
(0, _defineProperty2().default)(TypescriptMain, "runtime", _cli().MainRuntime);
(0, _defineProperty2().default)(TypescriptMain, "dependencies", [_schema().SchemaAspect, _logger().LoggerAspect]);

_typescript3().TypescriptAspect.addRuntime(TypescriptMain);

function runTransformersWithContext(config, transformers = [], context) {
  if (!Array.isArray(transformers)) return config;
  const newConfig = transformers.reduce((acc, transformer) => {
    return transformer(acc, context);
  }, config);
  return newConfig;
}

//# sourceMappingURL=typescript.main.runtime.js.map