{"version":3,"sources":["typescript.main.runtime.ts"],"names":["TypescriptMain","constructor","logger","createCompiler","options","transformers","tsModule","ts","configMutator","TypescriptConfigMutator","transformerContext","afterMutation","runTransformersWithContext","clone","TypescriptCompiler","TypescriptAspect","id","raw","createSchemaExtractor","tsconfig","TypeScriptExtractor","getPackageJsonProps","main","types","provider","schema","loggerExt","registerParser","TypeScriptParser","createLogger","MainRuntime","SchemaAspect","LoggerAspect","addRuntime","config","context","Array","isArray","newConfig","reduce","acc","transformer"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAaO,MAAMA,cAAN,CAAqB;AAC1BC,EAAAA,WAAW,CAASC,MAAT,EAAyB;AAAA,SAAhBA,MAAgB,GAAhBA,MAAgB;AAAE;AACtC;AACF;AACA;;;AACEC,EAAAA,cAAc,CACZC,OADY,EAEZC,YAAmC,GAAG,EAF1B,EAGZC,QAAQ,GAAGC,qBAHC,EAIF;AACV,UAAMC,aAAa,GAAG,KAAIC,4CAAJ,EAA4BL,OAA5B,CAAtB;AACA,UAAMM,kBAA4C,GAAG,EAArD;AACA,UAAMC,aAAa,GAAGC,0BAA0B,CAACJ,aAAa,CAACK,KAAd,EAAD,EAAwBR,YAAxB,EAAsCK,kBAAtC,CAAhD;AACA,WAAO,KAAII,iCAAJ,EAAuBC,gCAAiBC,EAAxC,EAA4C,KAAKd,MAAjD,EAAyDS,aAAa,CAACM,GAAvE,EAA4EX,QAA5E,CAAP;AACD;AAED;AACF;AACA;;;AACEY,EAAAA,qBAAqB,CAACC,QAAD,EAAgD;AACnE,WAAO,KAAIC,kCAAJ,EAAwBD,QAAxB,CAAP;AACD;AAED;AACF;AACA;AACA;;;AACEE,EAAAA,mBAAmB,GAAqB;AACtC,WAAO;AACLC,MAAAA,IAAI,EAAE,gBADD;AAELC,MAAAA,KAAK,EAAE;AAFF,KAAP;AAID;;AAKoB,eAARC,QAAQ,CAAC,CAACC,MAAD,EAASC,SAAT,CAAD,EAAgD;AACnED,IAAAA,MAAM,CAACE,cAAP,CAAsB,KAAIC,+BAAJ,GAAtB;AACA,UAAM1B,MAAM,GAAGwB,SAAS,CAACG,YAAV,CAAuBd,gCAAiBC,EAAxC,CAAf;AAEA,WAAO,IAAIhB,cAAJ,CAAmBE,MAAnB,CAAP;AACD;;AA1CyB;;;gCAAfF,c,aAkCM8B,kB;gCAlCN9B,c,kBAmCW,CAAC+B,sBAAD,EAAeC,sBAAf,C;;AAUxBjB,gCAAiBkB,UAAjB,CAA4BjC,cAA5B;;AAEO,SAASY,0BAAT,CACLsB,MADK,EAEL7B,YAAmC,GAAG,EAFjC,EAGL8B,OAHK,EAIoB;AACzB,MAAI,CAACC,KAAK,CAACC,OAAN,CAAchC,YAAd,CAAL,EAAkC,OAAO6B,MAAP;AAClC,QAAMI,SAAS,GAAGjC,YAAY,CAACkC,MAAb,CAAoB,CAACC,GAAD,EAAMC,WAAN,KAAsB;AAC1D,WAAOA,WAAW,CAACD,GAAD,EAAML,OAAN,CAAlB;AACD,GAFiB,EAEfD,MAFe,CAAlB;AAGA,SAAOI,SAAP;AACD","sourcesContent":["import ts, { TsConfigSourceFile } from 'typescript';\nimport { MainRuntime } from '@teambit/cli';\nimport { Compiler } from '@teambit/compiler';\nimport { Logger, LoggerAspect, LoggerMain } from '@teambit/logger';\nimport { SchemaAspect, SchemaExtractor, SchemaMain } from '@teambit/schema';\nimport { PackageJsonProps } from '@teambit/pkg';\nimport { TypescriptConfigMutator } from '@teambit/typescript.modules.ts-config-mutator';\n\nimport { TypeScriptExtractor } from './typescript.extractor';\nimport { TypeScriptCompilerOptions } from './compiler-options';\nimport { TypescriptAspect } from './typescript.aspect';\nimport { TypescriptCompiler } from './typescript.compiler';\nimport { TypeScriptParser } from './typescript.parser';\n\nexport type TsMode = 'build' | 'dev';\n\nexport type TsConfigTransformContext = {\n  // mode: TsMode;\n};\n\nexport type TsConfigTransformer = (\n  config: TypescriptConfigMutator,\n  context: TsConfigTransformContext\n) => TypescriptConfigMutator;\n\nexport class TypescriptMain {\n  constructor(private logger: Logger) {}\n  /**\n   * create a new compiler.\n   */\n  createCompiler(\n    options: TypeScriptCompilerOptions,\n    transformers: TsConfigTransformer[] = [],\n    tsModule = ts\n  ): Compiler {\n    const configMutator = new TypescriptConfigMutator(options);\n    const transformerContext: TsConfigTransformContext = {};\n    const afterMutation = runTransformersWithContext(configMutator.clone(), transformers, transformerContext);\n    return new TypescriptCompiler(TypescriptAspect.id, this.logger, afterMutation.raw, tsModule);\n  }\n\n  /**\n   * create an instance of a typescript semantic schema extractor.\n   */\n  createSchemaExtractor(tsconfig: TsConfigSourceFile): SchemaExtractor {\n    return new TypeScriptExtractor(tsconfig);\n  }\n\n  /**\n   * add the default package json properties to the component\n   * :TODO @gilad why do we need this DSL? can't I just get the args here.\n   */\n  getPackageJsonProps(): PackageJsonProps {\n    return {\n      main: 'dist/{main}.js',\n      types: '{main}.ts',\n    };\n  }\n\n  static runtime = MainRuntime;\n  static dependencies = [SchemaAspect, LoggerAspect];\n\n  static async provider([schema, loggerExt]: [SchemaMain, LoggerMain]) {\n    schema.registerParser(new TypeScriptParser());\n    const logger = loggerExt.createLogger(TypescriptAspect.id);\n\n    return new TypescriptMain(logger);\n  }\n}\n\nTypescriptAspect.addRuntime(TypescriptMain);\n\nexport function runTransformersWithContext(\n  config: TypescriptConfigMutator,\n  transformers: TsConfigTransformer[] = [],\n  context: TsConfigTransformContext\n): TypescriptConfigMutator {\n  if (!Array.isArray(transformers)) return config;\n  const newConfig = transformers.reduce((acc, transformer) => {\n    return transformer(acc, context);\n  }, config);\n  return newConfig;\n}\n"]}