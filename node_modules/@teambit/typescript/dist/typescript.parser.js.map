{"version":3,"sources":["typescript.parser.ts"],"names":["TypeScriptParser","getExports","sourceFile","exports","statements","filter","statement","modifiers","find","modifier","kind","ts","SyntaxKind","ExportKeyword","exportModels","map","child","declarationList","declarations","text","name","Export","undefined","withoutEmpty","exportModel","parseModule","modulePath","ast","createSourceFile","ScriptTarget","Latest","Module"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAQO,MAAMA,gBAAN,CAAyC;AAAA;AAAA,uDAC3B,uBAD2B;AAAA;;AAG9CC,EAAAA,UAAU,CAACC,UAAD,EAAmC;AAC3C,UAAMC,OAAO,GAAGD,UAAU,CAACE,UAAX,CAAsBC,MAAtB,CAA8BC,SAAD,IAAe;AAC1D,UAAI,CAACA,SAAS,CAACC,SAAf,EAA0B,OAAO,KAAP;AAC1B,aAAOD,SAAS,CAACC,SAAV,CAAoBC,IAApB,CAA0BC,QAAD,IAAc;AAC5C,eAAOA,QAAQ,CAACC,IAAT,KAAkBC,sBAAGC,UAAH,CAAcC,aAAvC;AACD,OAFM,CAAP;AAGD,KALe,CAAhB;AAOA,UAAMC,YAAY,GAAGX,OAAO,CAACY,GAAR,CAAaT,SAAD,IAAe;AAC9C;AACA,UAAI,uCAAoBA,SAApB,CAAJ,EAAoC;AAClC,cAAMU,KAAK,GAAIV,SAAD,CAAiCW,eAAjC,CAAiDC,YAAjD,CAA8D,CAA9D,CAAd;AACA,cAAMC,IAAI,GAAIH,KAAD,CAAeI,IAAf,CAAoBD,IAAjC;AACA,eAAO,KAAIE,gBAAJ,EAAWF,IAAX,CAAP;AACD;;AAED,UAAI,yCAAsBb,SAAtB,CAAJ,EAAsC;AACpC,YAAI,CAACA,SAAS,CAACc,IAAf,EAAqB,OAAOE,SAAP;AACrB,eAAO,KAAID,gBAAJ,EAAWf,SAAS,CAACc,IAAV,CAAeD,IAA1B,CAAP;AACD;;AAED,UAAI,sCAAmBb,SAAnB,CAAJ,EAAmC;AACjC,YAAI,CAACA,SAAS,CAACc,IAAf,EAAqB,OAAOE,SAAP;AACrB,eAAO,KAAID,gBAAJ,EAAWf,SAAS,CAACc,IAAV,CAAeD,IAA1B,CAAP;AACD;;AAED,aAAOG,SAAP;AACD,KAnBoB,CAArB;AAoBA,UAAMC,YAAY,GAAGT,YAAY,CAACT,MAAb,CAAqBmB,WAAD,IAAiBA,WAAW,KAAKF,SAArD,CAArB,CA5B2C,CA6B3C;;AACA,WAAOC,YAAP;AACD;;AAEDE,EAAAA,WAAW,CAACC,UAAD,EAAqB;AAC9B,UAAMC,GAAG,GAAGhB,sBAAGiB,gBAAH,CAAoBF,UAApB,EAAgC,6BAAaA,UAAb,EAAyB,MAAzB,CAAhC,EAAkEf,sBAAGkB,YAAH,CAAgBC,MAAlF,CAAZ;;AAEA,WAAO,KAAIC,gBAAJ,EAAW,KAAK9B,UAAL,CAAgB0B,GAAhB,CAAX,CAAP;AACD;;AAxC6C","sourcesContent":["import { Export, Module, Parser } from '@teambit/schema';\nimport { readFileSync } from 'fs-extra';\nimport ts, {\n  isClassDeclaration,\n  isFunctionDeclaration,\n  isVariableStatement,\n  SourceFile,\n  VariableStatement,\n} from 'typescript';\n\nexport class TypeScriptParser implements Parser {\n  public extension = /^.*\\.(js|jsx|ts|tsx)$/;\n\n  getExports(sourceFile: SourceFile): Export[] {\n    const exports = sourceFile.statements.filter((statement) => {\n      if (!statement.modifiers) return false;\n      return statement.modifiers.find((modifier) => {\n        return modifier.kind === ts.SyntaxKind.ExportKeyword;\n      });\n    });\n\n    const exportModels = exports.map((statement) => {\n      // todo refactor to a registry of variable statements.\n      if (isVariableStatement(statement)) {\n        const child = (statement as VariableStatement).declarationList.declarations[0];\n        const text = (child as any).name.text;\n        return new Export(text);\n      }\n\n      if (isFunctionDeclaration(statement)) {\n        if (!statement.name) return undefined;\n        return new Export(statement.name.text);\n      }\n\n      if (isClassDeclaration(statement)) {\n        if (!statement.name) return undefined;\n        return new Export(statement.name.text);\n      }\n\n      return undefined;\n    });\n    const withoutEmpty = exportModels.filter((exportModel) => exportModel !== undefined);\n    // @ts-ignore\n    return withoutEmpty;\n  }\n\n  parseModule(modulePath: string) {\n    const ast = ts.createSourceFile(modulePath, readFileSync(modulePath, 'utf8'), ts.ScriptTarget.Latest);\n\n    return new Module(this.getExports(ast));\n  }\n}\n"]}