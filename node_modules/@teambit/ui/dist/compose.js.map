{"version":3,"sources":["compose.tsx"],"names":["Compose","props","components","children","arrayified","map","tuple","Array","isArray","undefined","reduceRight","acc","Comp","forwardProps"],"mappings":";;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAUA;AACA;AACA;AACA;AACO,SAASA,OAAT,CAAiBC,KAAjB,EAA+B;AACpC,QAAM;AAAEC,IAAAA,UAAU,GAAG,EAAf;AAAmBC,IAAAA;AAAnB,MAAgCF,KAAtC;AAEA,QAAMG,UAA4B,GAAGF,UAAU,CAACG,GAAX,CAAgBC,KAAD,IAAYC,KAAK,CAACC,OAAN,CAAcF,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,EAAQG,SAAR,CAA1D,CAArC;AAEA,sBACE,gEACGL,UAAU,CAACM,WAAX,CAAuB,CAACC,GAAD,EAAM,CAACC,IAAD,EAAOC,YAAP,CAAN,KAA+B;AACrD,wBAAO,+BAAC,IAAD,EAAUA,YAAV,EAAyBF,GAAzB,CAAP;AACD,GAFA,EAEER,QAFF,CADH,CADF;AAOD","sourcesContent":["import React, { ReactNode, ComponentType } from 'react';\n\ntype ComponentTuple<T = any> = [Component: ComponentType<T>, props?: T];\nexport type Wrapper<T = any> = ComponentType<T> | ComponentTuple<T>;\ninterface Props<T = any> {\n  /** Compose these components. Can be a ReactComponent, or a [ReactComponent, Props] tuple */\n  components: Wrapper<T>[];\n  children?: ReactNode;\n}\n\n/**\n * A react Component composer. equivalent to `(n+1) => <a[n+1]> <Compose(a[n]) /> </a[n+1]>`.\n * Component can be a React Component, or a `[Component, { ...props }]` tuple.\n */\nexport function Compose(props: Props) {\n  const { components = [], children } = props;\n\n  const arrayified: ComponentTuple[] = components.map((tuple) => (Array.isArray(tuple) ? tuple : [tuple, undefined]));\n\n  return (\n    <>\n      {arrayified.reduceRight((acc, [Comp, forwardProps]) => {\n        return <Comp {...forwardProps}>{acc}</Comp>;\n      }, children)}\n    </>\n  );\n}\n"]}