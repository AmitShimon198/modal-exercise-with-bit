{"version":3,"sources":["create-root.ts"],"names":["createRoot","aspectDefs","rootExtensionName","rootAspect","UIAspect","id","runtime","config","rootId","identifiers","getIdentifiers","idSetters","getIdSetters","createImports","JSON","stringify","join","defs","filter","def","runtimePath","getImportStatements","pathProp","suffix","map","aspectDef","getIdentifier","getId","undefined","val","component","local","getCoreIdentifier","aspectPath","getRegularAspectIdentifier","base","replace","path","name","split"],"mappings":"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","sourcesContent":["import { AspectDefinition } from '@teambit/aspect-loader';\nimport { toWindowsCompatiblePath } from '@teambit/toolbox.path.to-windows-compatible-path';\nimport { camelCase } from 'lodash';\nimport { parse } from 'path';\n\nimport { UIAspect } from './ui.aspect';\n\nexport async function createRoot(\n  aspectDefs: AspectDefinition[],\n  rootExtensionName?: string,\n  rootAspect = UIAspect.id,\n  runtime = 'ui',\n  config = {}\n) {\n  const rootId = rootExtensionName ? `'${rootExtensionName}'` : '';\n  const identifiers = getIdentifiers(aspectDefs, 'Aspect');\n\n  const idSetters = getIdSetters(aspectDefs, 'Aspect');\n\n  return `\n${createImports(aspectDefs)}\n\nconst isBrowser = typeof window !== \"undefined\";\nconst config = JSON.parse('${toWindowsCompatiblePath(JSON.stringify(config))}');\n${idSetters.join('\\n')}\n\nexport function render(...props){\n  return Harmony.load([${identifiers.join(', ')}], '${runtime}', config)\n    .then((harmony) => {\n      return harmony\n      .run()\n      .then(() => {\n        const rootExtension = harmony.get('${rootAspect}');\n\n        if (isBrowser) {\n          return rootExtension.render(${rootId}, ...props);\n        } else {\n          return rootExtension.renderSsr(${rootId}, ...props);\n        }\n      })\n      .catch((err) => {\n        throw err;\n      });\n    });\n}\n\nif (isBrowser) render();\n`;\n}\n\nfunction createImports(aspectDefs: AspectDefinition[]) {\n  const defs = aspectDefs.filter((def) => def.runtimePath);\n\n  return `import { Harmony } from '@teambit/harmony';\n${getImportStatements(aspectDefs, 'aspectPath', 'Aspect')}\n${getImportStatements(defs, 'runtimePath', 'Runtime')}`;\n}\n\nfunction getImportStatements(aspectDefs: AspectDefinition[], pathProp: string, suffix: string): string {\n  return aspectDefs\n    .map(\n      (aspectDef) =>\n        `import ${getIdentifier(aspectDef, suffix)} from '${toWindowsCompatiblePath(aspectDef[pathProp])}';`\n    )\n    .join('\\n');\n}\n\nfunction getIdentifiers(aspectDefs: AspectDefinition[], suffix: string): string[] {\n  return aspectDefs.map((aspectDef) => `${getIdentifier(aspectDef, suffix)}`);\n}\n\nfunction getIdSetters(defs: AspectDefinition[], suffix: string) {\n  return defs\n    .map((def) => {\n      if (!def.getId) return undefined;\n      return `${getIdentifier(def, suffix)}.id = '${def.getId}';`;\n    })\n    .filter((val) => !!val);\n}\n\nfunction getIdentifier(aspectDef: AspectDefinition, suffix: string): string {\n  if (!aspectDef.component && !aspectDef.local) {\n    return getCoreIdentifier(aspectDef.aspectPath, suffix);\n  }\n  return getRegularAspectIdentifier(aspectDef, suffix);\n}\n\nfunction getRegularAspectIdentifier(aspectDef: AspectDefinition, suffix: string): string {\n  return camelCase(`${parse(aspectDef.aspectPath).base.replace(/\\./, '__').replace('@', '__')}${suffix}`);\n}\n\nfunction getCoreIdentifier(path: string, suffix: string): string {\n  return camelCase(`${parse(path).name.split('.')[0]}${suffix}`);\n}\n"]}