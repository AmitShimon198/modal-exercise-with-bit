{"version":3,"sources":["open-browser.ts"],"names":["OpenBrowser","constructor","logger","Object","freeze","NONE","BROWSER","SCRIPT","open","url","action","value","args","getBrowserEnv","Actions","executeNodeScript","startBrowserProcess","Error","process","env","BROWSER_ARGS","split","toLowerCase","endsWith","scriptPath","extraArgs","argv","slice","child","execPath","stdio","on","code","info","chalk","red","cyan","browser","shouldTryOpenChromiumWithAppleScript","platform","OSX_CHROME","supportedChromiumBrowsers","chromiumBrowser","encodeURI","cwd","__dirname","err","undefined","length","concat","options","app","wait","catch"],"mappings":"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","sourcesContent":["import { execSync } from 'child_process';\nimport chalk from 'chalk';\nimport spawn from 'cross-spawn';\nimport open from 'open';\nimport { Logger } from '@teambit/logger';\n\nexport class OpenBrowser {\n  constructor(private logger: Logger) {}\n  OSX_CHROME = 'google chrome';\n\n  Actions = Object.freeze({\n    NONE: 0,\n    BROWSER: 1,\n    SCRIPT: 2,\n  });\n\n  /**\n   * Reads the BROWSER environment variable and decides what to do with it. Returns\n   * true if it opened a browser or ran a node.js script, otherwise false.\n   */\n  open(url: string) {\n    const { action, value, args } = this.getBrowserEnv();\n    switch (action) {\n      case this.Actions.NONE:\n        // Special case: BROWSER=\"none\" will prevent opening completely.\n        return false;\n      case this.Actions.SCRIPT:\n        return this.executeNodeScript(value, url);\n      case this.Actions.BROWSER:\n        return this.startBrowserProcess(value, url, args);\n      default:\n        throw new Error('Not implemented.');\n    }\n  }\n\n  private getBrowserEnv() {\n    // Attempt to honor this environment variable.\n    // It is specific to the operating system.\n    // See https://github.com/sindresorhus/open#app for documentation.\n    const value = process.env.BROWSER;\n    const args = process.env.BROWSER_ARGS ? process.env.BROWSER_ARGS.split(' ') : [];\n    let action;\n    if (!value) {\n      // Default.\n      action = this.Actions.BROWSER;\n    } else if (value.toLowerCase().endsWith('.js')) {\n      action = this.Actions.SCRIPT;\n    } else if (value.toLowerCase() === 'none') {\n      action = this.Actions.NONE;\n    } else {\n      action = this.Actions.BROWSER;\n    }\n    return { action, value, args };\n  }\n\n  private executeNodeScript(scriptPath, url) {\n    const extraArgs = process.argv.slice(2);\n    const child = spawn(process.execPath, [scriptPath, ...extraArgs, url], {\n      stdio: 'inherit',\n    });\n    child.on('close', (code) => {\n      if (code !== 0) {\n        this.logger.info(chalk.red('The script specified as BROWSER environment variable failed.'));\n        this.logger.info(`${chalk.cyan(scriptPath)} exited with code ${code}.`);\n      }\n    });\n    return true;\n  }\n\n  private startBrowserProcess(browser: any, url: string, args: any) {\n    // If we're on OS X, the user hasn't specifically\n    // requested a different browser, we can try opening\n    // Chrome with AppleScript. This lets us reuse an\n    // existing tab when possible instead of creating a new one.\n    const shouldTryOpenChromiumWithAppleScript =\n      process.platform === 'darwin' && (typeof browser !== 'string' || browser === this.OSX_CHROME);\n\n    if (shouldTryOpenChromiumWithAppleScript) {\n      // Will use the first open browser found from list\n      const supportedChromiumBrowsers = [\n        'Google Chrome Canary',\n        'Google Chrome',\n        'Microsoft Edge',\n        'Brave Browser',\n        'Vivaldi',\n        'Chromium',\n      ];\n\n      for (const chromiumBrowser of supportedChromiumBrowsers) {\n        try {\n          // Try our best to reuse existing tab\n          // on OSX Chromium-based browser with AppleScript\n          execSync(`ps cax | grep \"${chromiumBrowser}\"`);\n          execSync(`osascript openChrome.applescript \"${encodeURI(url)}\" \"${chromiumBrowser}\"`, {\n            cwd: __dirname,\n            stdio: 'ignore',\n          });\n          return true;\n        } catch (err: any) {\n          // Ignore errors.\n        }\n      }\n    }\n\n    // Another special case: on OS X, check if BROWSER has been set to \"open\".\n    // In this case, instead of passing `open` to `opn` (which won't work),\n    // just ignore it (thus ensuring the intended behavior, i.e. opening the system browser):\n    // https://github.com/facebook/create-react-app/pull/1690#issuecomment-283518768\n    if (process.platform === 'darwin' && browser === 'open') {\n      browser = undefined;\n    }\n\n    // If there are arguments, they must be passed as array with the browser\n    if (typeof browser === 'string' && args.length > 0) {\n      browser = [browser].concat(args);\n    }\n\n    // Fallback to open\n    // (It will always open new tab)\n    try {\n      const options = { app: browser, wait: false, url: true };\n      open(url, options).catch(() => {}); // Prevent `unhandledRejection` error.\n      return true;\n    } catch (err: any) {\n      return false;\n    }\n  }\n}\n"]}