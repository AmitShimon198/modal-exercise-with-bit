import { ReactNode, ComponentType } from 'react';
import { BrowserData } from './ssr/request-browser';
import { RequestServer } from './ssr/request-server';
import { ContextProps } from './ui.ui.runtime';
export declare type RenderLifecycle<RenderCtx = any, Serialized = any> = {
    serverInit?: (state: {
        browser?: BrowserData;
        server?: RequestServer;
    }) => RenderCtx | void | undefined | Promise<RenderCtx | void | undefined>;
    onBeforeRender?: (ctx: RenderCtx, app: ReactNode) => RenderCtx | void | undefined | Promise<RenderCtx | void | undefined>;
    serialize?: (ctx: RenderCtx, app: ReactNode) => {
        json: string;
    } | Promise<{
        json: string;
    }> | undefined;
    deserialize?: (data?: string) => Serialized;
    browserInit?: (deserializedData: Serialized) => RenderCtx | void | undefined | Promise<RenderCtx | void | undefined>;
    onBeforeHydrate?: (context: RenderCtx, app: ReactNode) => RenderCtx | void | undefined | Promise<RenderCtx | void | undefined>;
    onHydrate?: (context: RenderCtx, ref: HTMLElement | null) => void;
    reactContext?: ComponentType<ContextProps<RenderCtx>>;
};
