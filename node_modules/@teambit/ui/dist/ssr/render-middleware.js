"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createSsrMiddleware = createSsrMiddleware;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function fs() {
  const data = _interopRequireWildcard(require("fs-extra"));

  fs = function () {
    return data;
  };

  return data;
}

function _requestBrowser() {
  const data = require("./request-browser");

  _requestBrowser = function () {
    return data;
  };

  return data;
}

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

const denyList = /^\/favicon.ico$/;

async function createSsrMiddleware({
  root,
  port,
  title,
  logger
}) {
  const runtime = await loadRuntime(root, {
    logger
  });
  if (!runtime) return undefined;
  const {
    render
  } = runtime;

  const assets = _objectSpread(_objectSpread({}, runtime.assets), {}, {
    title
  });

  return async function serverRenderMiddleware(req, res, next) {
    const {
      query,
      url
    } = req;
    const browser = (0, _requestBrowser().requestToObj)(req, port);

    if (denyList.test(url)) {
      logger.debug(`[ssr] skipping static denyList file ${url}`);
      next();
      return;
    }

    if (query.rendering === 'client') {
      logger.debug(`[ssr] skipping ${url}`);
      next();
      return;
    }

    logger.debug(`[ssr] ${req.method} ${url}`);
    const server = {
      port,
      request: req,
      response: res
    };
    const props = {
      assets,
      browser,
      server
    };

    try {
      const rendered = await render(props);
      res.set('Cache-Control', 'no-cache');
      res.send(rendered);
      logger.debug(`[ssr] success '${url}'`);
    } catch (e) {
      logger.error(`[ssr] failed at '${url}'`, e);
      next();
    }
  };
}

async function loadRuntime(root, {
  logger
}) {
  let render;
  let assets;

  try {
    const entryFilepath = _path().default.join(root, 'ssr', 'index.js');

    if (!fs().existsSync(entryFilepath)) {
      logger.warn(`[ssr] - Skipping setup - failed finding ssr bundle at "${entryFilepath}"`);
      return undefined;
    }

    const manifestFilepath = _path().default.join(root, 'asset-manifest.json');

    if (!fs().existsSync(manifestFilepath)) {
      logger.warn('[ssr] - Failed finding asset manifest file. Skipping setup.');
      return undefined;
    }

    assets = await parseManifest(manifestFilepath);

    if (!assets) {
      logger.warn('[ssr] - failed parsing assets manifest. Skipping setup.');
      return undefined;
    }

    const imported = await Promise.resolve(`${entryFilepath}`).then(s => _interopRequireWildcard(require(s)));
    render = imported === null || imported === void 0 ? void 0 : imported.render;

    if (!render || typeof render !== 'function') {
      logger.warn('[ssr] - index file does not export a render() function. Skipping setup.');
      return undefined;
    }
  } catch (e) {
    logger.error(e);
    return undefined;
  }

  return {
    render,
    assets
  };
}

async function parseManifest(filepath) {
  try {
    const file = await fs().readFile(filepath);
    const contents = file.toString();
    const parsed = JSON.parse(contents);
    const assets = getAssets(parsed);
    return assets;
  } catch (e) {
    return undefined;
  }
}

function getAssets(manifest) {
  var _manifest$entrypoints, _manifest$entrypoints2;

  const assets = {
    css: [],
    js: []
  };
  assets.css = (_manifest$entrypoints = manifest.entrypoints) === null || _manifest$entrypoints === void 0 ? void 0 : _manifest$entrypoints.filter(x => x.endsWith('css')).map(x => _path().default.join('/', x));
  assets.js = (_manifest$entrypoints2 = manifest.entrypoints) === null || _manifest$entrypoints2 === void 0 ? void 0 : _manifest$entrypoints2.filter(x => x.endsWith('js')).map(x => _path().default.join('/', x));
  return assets;
}

//# sourceMappingURL=render-middleware.js.map