{"version":3,"sources":["start.cmd.tsx"],"names":["StartCmd","constructor","ui","logger","render","uiRootName","userPattern","dev","port","rebuild","verbose","noBrowser","skipCompilation","off","appName","getUiName","invokePreStart","uiServer","createRuntime","pattern","then","server","buildOptions","launchBrowserOnStart","undefined","publicUrl","fullUrl","catch","error","invokeOnStart","clearConsole"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAaO,MAAMA,QAAN,CAAkC;AAevCC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,EAJC,EAMDC,MANC,EAOT;AAAA,SAHQD,EAGR,GAHQA,EAGR;AAAA,SADQC,MACR,GADQA,MACR;AAAA,kDArBK,wBAqBL;AAAA,yDApBY,iEAoBZ;AAAA,mDAnBM,GAmBN;AAAA,mDAlBM,aAkBN;AAAA,8DAjBiB,EAiBjB;AAAA,qDAhBQ,CACR,CAAC,GAAD,EAAM,KAAN,EAAa,8BAAb,CADQ,EAER,CAAC,GAAD,EAAM,eAAN,EAAuB,wBAAvB,CAFQ,EAGR,CAAC,GAAD,EAAM,SAAN,EAAiB,gBAAjB,CAHQ,EAIR,CAAC,GAAD,EAAM,SAAN,EAAiB,8DAAjB,CAJQ,EAKR,CAAC,EAAD,EAAK,YAAL,EAAmB,8CAAnB,CALQ,EAMR,CAAC,EAAD,EAAK,kBAAL,EAAyB,0DAAzB,CANQ,CAgBR;AAAE,GAtBmC,CAwBvC;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;AAEY,QAANC,MAAM,CACV,CAACC,UAAD,EAAaC,WAAb,CADU,EAEV;AAAEC,IAAAA,GAAF;AAAOC,IAAAA,IAAP;AAAaC,IAAAA,OAAb;AAAsBC,IAAAA,OAAtB;AAA+BC,IAAAA,SAA/B;AAA0CC,IAAAA;AAA1C,GAFU,EAGmB;AAC7B,SAAKT,MAAL,CAAYU,GAAZ;AACA,UAAMC,OAAO,GAAG,KAAKZ,EAAL,CAAQa,SAAR,CAAkBV,UAAlB,CAAhB;AACA,UAAM,KAAKH,EAAL,CAAQc,cAAR,CAAuB;AAAEJ,MAAAA;AAAF,KAAvB,CAAN;AACA,UAAMK,QAAQ,GAAG,KAAKf,EAAL,CAAQgB,aAAR,CAAsB;AACrCb,MAAAA,UADqC;AAErCc,MAAAA,OAAO,EAAEb,WAF4B;AAGrCC,MAAAA,GAHqC;AAIrCC,MAAAA,IAAI,EAAE,CAACA,IAJ8B;AAKrCC,MAAAA,OALqC;AAMrCC,MAAAA;AANqC,KAAtB,CAAjB;;AASA,QAAI,CAACC,SAAL,EAAgB;AACdM,MAAAA,QAAQ,CACLG,IADH,CACSC,MAAD,IAAY;AAAA;;AAChB,YAAI,0BAACA,MAAM,CAACC,YAAR,iDAAC,qBAAqBC,oBAAtB,CAAJ,EAAgD,OAAOC,SAAP;AAEhD,eAAO,qBAAK,KAAKtB,EAAL,CAAQuB,SAAR,IAAqBJ,MAAM,CAACK,OAAjC,CAAP;AACD,OALH,EAMGC,KANH,CAMUC,KAAD,IAAW,KAAKzB,MAAL,CAAYyB,KAAZ,CAAkBA,KAAlB,CANpB;AAOD,KArB4B,CAuB7B;AACA;;;AACA,SAAK1B,EAAL,CAAQ2B,aAAR;AACA,SAAK3B,EAAL,CAAQ4B,YAAR;AAEA,wBAAO,+BAAC,kCAAD;AAAiB,MAAA,OAAO,EAAEhB,OAA1B;AAAmC,MAAA,cAAc,EAAEG,QAAnD;AAA6D,MAAA,GAAG,EAAE,KAAKf,EAAL,CAAQuB;AAA1E,MAAP;AACD;;AAxEsC","sourcesContent":["import React from 'react';\nimport open from 'open';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { Logger } from '@teambit/logger';\nimport { UIServerConsole } from '@teambit/ui-foundation.cli.ui-server-console';\nimport type { UiMain } from './ui.main.runtime';\n\ntype StartArgs = [uiName: string, userPattern: string];\ntype StartFlags = {\n  dev: boolean;\n  port: string;\n  rebuild: boolean;\n  verbose: boolean;\n  noBrowser: boolean;\n  skipCompilation: boolean;\n};\n\nexport class StartCmd implements Command {\n  name = 'start [type] [pattern]';\n  description = 'Start a dev environment for a workspace or a specific component';\n  alias = 'c';\n  group = 'development';\n  shortDescription = '';\n  options = [\n    ['d', 'dev', 'start UI server in dev mode.'],\n    ['p', 'port [number]', 'port of the UI server.'],\n    ['r', 'rebuild', 'rebuild the UI'],\n    ['v', 'verbose', 'showing verbose output for inspection and prints stack trace'],\n    ['', 'no-browser', 'do not automatically open browser when ready'],\n    ['', 'skip-compilation', 'skip the auto-compilation before starting the web-server'],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * access to the extension instance.\n     */\n    private ui: UiMain,\n\n    private logger: Logger\n  ) {}\n\n  // async report([uiRootName, userPattern]: StartArgs, { dev, port, rebuild, verbose }: StartFlags): Promise<string> {\n  //   this.logger.off();\n  //   const pattern = userPattern && userPattern.toString();\n\n  //   const uiServer = await this.ui.createRuntime({\n  //     uiRootName,\n  //     pattern,\n  //     dev,\n  //     port: port ? parseInt(port) : undefined,\n  //     rebuild,\n  //     verbose,\n  //   });\n\n  //   return `Bit server has started on port ${uiServer.port}`;\n  // }\n\n  async render(\n    [uiRootName, userPattern]: StartArgs,\n    { dev, port, rebuild, verbose, noBrowser, skipCompilation }: StartFlags\n  ): Promise<React.ReactElement> {\n    this.logger.off();\n    const appName = this.ui.getUiName(uiRootName);\n    await this.ui.invokePreStart({ skipCompilation });\n    const uiServer = this.ui.createRuntime({\n      uiRootName,\n      pattern: userPattern,\n      dev,\n      port: +port,\n      rebuild,\n      verbose,\n    });\n\n    if (!noBrowser) {\n      uiServer\n        .then((server) => {\n          if (!server.buildOptions?.launchBrowserOnStart) return undefined;\n\n          return open(this.ui.publicUrl || server.fullUrl);\n        })\n        .catch((error) => this.logger.error(error));\n    }\n\n    // DO NOT CHANGE THIS - this meant to be an async hook.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.ui.invokeOnStart();\n    this.ui.clearConsole();\n\n    return <UIServerConsole appName={appName} futureUiServer={uiServer} url={this.ui.publicUrl} />;\n  }\n}\n"]}