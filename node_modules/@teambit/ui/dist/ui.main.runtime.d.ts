import type { AspectMain } from '@teambit/aspect';
import { ComponentType } from 'react';
import { AspectDefinition } from '@teambit/aspect-loader';
import { CacheMain } from '@teambit/cache';
import { CLIMain } from '@teambit/cli';
import type { ComponentMain } from '@teambit/component';
import { ExpressMain } from '@teambit/express';
import type { GraphqlMain } from '@teambit/graphql';
import { SlotRegistry, Harmony } from '@teambit/harmony';
import { Logger, LoggerMain } from '@teambit/logger';
import { PubsubMain } from '@teambit/pubsub';
import webpack from 'webpack';
import { UIRoot } from './ui-root';
import { UIServer } from './ui-server';
import { StartPlugin } from './start-plugin';
export declare type UIDeps = [PubsubMain, CLIMain, GraphqlMain, ExpressMain, ComponentMain, CacheMain, LoggerMain, AspectMain];
export declare type UIRootRegistry = SlotRegistry<UIRoot>;
export declare type PreStart = (preStartOpts: PreStartOpts) => Promise<void>;
export declare type PreStartOpts = {
    skipCompilation?: boolean;
};
export declare type OnStart = () => Promise<undefined | ComponentType<{}>>;
export declare type StartPluginSlot = SlotRegistry<StartPlugin>;
export declare type PublicDirOverwrite = (uiRoot: UIRoot) => Promise<string | undefined>;
export declare type BuildMethodOverwrite = (name: string, uiRoot: UIRoot, rebuild?: boolean) => Promise<string>;
export declare type PreStartSlot = SlotRegistry<PreStart>;
export declare type OnStartSlot = SlotRegistry<OnStart>;
export declare type PublicDirOverwriteSlot = SlotRegistry<PublicDirOverwrite>;
export declare type BuildMethodOverwriteSlot = SlotRegistry<BuildMethodOverwrite>;
export declare type UIConfig = {
    port?: number;
    portRange: [number, number];
    host: string;
    publicDir: string;
    publicUrl?: string;
};
export declare type RuntimeOptions = {
    verbose?: boolean;
    uiRootName?: string;
    pattern?: string;
    dev?: boolean;
    port?: number;
    rebuild?: boolean;
};
export declare class UiMain {
    private pubsub;
    private config;
    private graphql;
    private uiRootSlot;
    private express;
    private preStartSlot;
    private onStartSlot;
    private publicDirOverwriteSlot;
    private buildMethodOverwriteSlot;
    private componentExtension;
    private cache;
    private logger;
    private harmony;
    private startPluginSlot;
    constructor(pubsub: PubsubMain, config: UIConfig, graphql: GraphqlMain, uiRootSlot: UIRootRegistry, express: ExpressMain, preStartSlot: PreStartSlot, onStartSlot: OnStartSlot, publicDirOverwriteSlot: PublicDirOverwriteSlot, buildMethodOverwriteSlot: BuildMethodOverwriteSlot, componentExtension: ComponentMain, cache: CacheMain, logger: Logger, harmony: Harmony, startPluginSlot: StartPluginSlot);
    publicDir(uiRoot: UIRoot): Promise<string>;
    private getUiByName;
    build(uiRootName?: string): Promise<webpack.MultiStats | undefined>;
    registerStartPlugin(startPlugin: StartPlugin): this;
    private initiatePlugins;
    createRuntime({ uiRootName, pattern, dev, port, rebuild, verbose }: RuntimeOptions): Promise<UIServer>;
    private addSignalListener;
    getPort(port?: number): Promise<number>;
    private createUiServerStartedEvent;
    registerPreStart(preStartFn: PreStart): void;
    registerOnStart(onStartFn: OnStart): this;
    registerBuildUIOverwrite(fn: BuildMethodOverwrite): this;
    registerPublicDirOverwrite(fn: PublicDirOverwrite): this;
    private getOverwriteBuildFn;
    private getOverwritePublic;
    invokePreStart(preStartOpts: PreStartOpts): Promise<void>;
    invokeOnStart(): Promise<ComponentType[]>;
    registerUiRoot(uiRoot: UIRoot): void;
    getUi(uiRootName?: string): [string, UIRoot] | undefined;
    getUiName(uiRootName?: string): string | undefined;
    private possibleUis;
    createLink(aspectDefs: AspectDefinition[], rootExtensionName: string): Promise<string>;
    generateRoot(aspectDefs: AspectDefinition[], rootExtensionName: string, runtimeName?: string, rootAspect?: string): Promise<string>;
    private selectPort;
    private buildUI;
    buildUiHash(uiRoot: UIRoot, runtime?: string): Promise<string>;
    buildIfChanged(name: string, uiRoot: UIRoot, force: boolean | undefined): Promise<string>;
    clearConsole(): void;
    buildIfNoBundle(name: string, uiRoot: UIRoot): Promise<void>;
    get publicUrl(): string | undefined;
    private openBrowser;
    static defaultConfig: UIConfig;
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static slots: (((registerFn: () => string) => SlotRegistry<UIRoot>) | ((registerFn: () => string) => SlotRegistry<PreStart>) | ((registerFn: () => string) => SlotRegistry<OnStart>) | ((registerFn: () => string) => SlotRegistry<PublicDirOverwriteSlot>) | ((registerFn: () => string) => SlotRegistry<BuildMethodOverwriteSlot>) | ((registerFn: () => string) => SlotRegistry<StartPlugin>))[];
    static provider([pubsub, cli, graphql, express, componentExtension, cache, loggerMain]: UIDeps, config: any, [uiRootSlot, preStartSlot, onStartSlot, publicDirOverwriteSlot, buildMethodOverwriteSlot, proxyGetterSlot]: [
        UIRootRegistry,
        PreStartSlot,
        OnStartSlot,
        PublicDirOverwriteSlot,
        BuildMethodOverwriteSlot,
        StartPluginSlot
    ], harmony: Harmony): Promise<UiMain>;
}
