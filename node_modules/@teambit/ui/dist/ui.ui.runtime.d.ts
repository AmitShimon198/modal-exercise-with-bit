import type { GraphqlUI } from '@teambit/graphql';
import { SlotRegistry } from '@teambit/harmony';
import type { ReactRouterUI } from '@teambit/react-router';
import React, { ReactNode, ComponentType } from 'react';
import { UIRootFactory } from './ui-root.ui';
import type { SsrContent } from './ssr/ssr-content';
import { RenderLifecycle } from './render-lifecycle';
export declare type ContextProps<T = any> = {
    renderCtx?: T;
    children: ReactNode;
};
declare type HudSlot = SlotRegistry<ReactNode>;
declare type renderLifecycleSlot = SlotRegistry<RenderLifecycle>;
declare type UIRootRegistry = SlotRegistry<UIRootFactory>;
export declare class UiUI {
    private router;
    private uiRootSlot;
    private hudSlot;
    private lifecycleSlot;
    constructor(router: ReactRouterUI, uiRootSlot: UIRootRegistry, hudSlot: HudSlot, lifecycleSlot: renderLifecycleSlot);
    render(rootExtension: string): Promise<void>;
    renderSsr(rootExtension: string, { assets, browser, server }?: SsrContent): Promise<string>;
    registerHudItem: (element: ReactNode) => void;
    registerContext<T>(context: ComponentType<ContextProps<T>>): void;
    registerRoot(uiRoot: UIRootFactory): void;
    registerRenderHooks<T, Y>(hooks: RenderLifecycle<T, Y>): void;
    private triggerBrowserInit;
    private triggerServerInit;
    private getReactContexts;
    private onBeforeRender;
    private triggerBeforeHydrateHook;
    private triggerHydrateHook;
    private serialize;
    private deserialize;
    private getRoot;
    static slots: ((registerFn: () => string) => SlotRegistry<React.ReactNode>)[];
    static dependencies: import("@teambit/harmony").Aspect[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static provider([GraphqlUi, router]: [GraphqlUI, ReactRouterUI], config: any, [uiRootSlot, hudSlot, renderLifecycleSlot]: [UIRootRegistry, HudSlot, renderLifecycleSlot]): Promise<UiUI>;
}
export {};
