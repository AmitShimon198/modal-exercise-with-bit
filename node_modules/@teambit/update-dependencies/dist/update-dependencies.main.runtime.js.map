{"version":3,"sources":["update-dependencies.main.runtime.ts"],"names":["UpdateDependenciesMain","constructor","scope","logger","builder","dependencyResolver","onPostUpdateDependenciesSlot","updateDependenciesVersions","depsUpdateItemsRaw","updateDepsOptions","validateScopeIsNew","importAllMissing","depsUpdateItems","parseDevUpdatesItems","updateFutureVersion","updateAllDeps","addLogToComponents","simulation","legacyScope","legacyComponents","addBuildStatus","addComponentsToScope","updateComponents","components","component","loadComponentsAspect","builderDataMap","pipeResults","tagListener","throwOnError","seedersOnly","legacyBuildResults","builderDataMapToLegacyOnTagResults","publishedPackages","pipeWithError","find","pipe","hasErrors","buildStatus","BuildStatus","Failed","Succeed","saveDataIntoLocalScope","export","triggerOnPostUpdateDependencies","error","getErrorMessageFormatted","map","d","state","_consumer","registerOnPostUpdateDependencies","fn","register","skipNewScopeValidation","ids","listIds","length","Error","name","Promise","all","values","catch","err","componentIds","ComponentID","fromString","componentId","idsToImport","dependenciesIds","item","dependencies","dep","id","changeVersion","LATEST","push","import","sources","addSourceFromScope","depUpdateItem","legacyComp","getFromConsumerComponent","forEach","c","Pending","log","username","email","message","date","Date","now","toString","currentBitIds","_legacy","updateDependenciesVersionsOfComponent","updateDependencyResolver","setStatusLine","depUpdateItemRaw","load","ComponentNotFound","getDependencyWithExactVersion","versionToTag","depStr","compId","range","version","undefined","exactVersion","getExactVersionBySemverRange","modelComponent","getModelComponent","tag","releaseType","getVersionToAdd","getSnapToAdd","extractDepsFromLegacy","extId","DependencyResolverAspect","data","existingExtension","extensions","findExtension","Object","assign","extension","ExtensionDataEntry","depsBitIds","updatedIds","BitIds","fromArray","componentIdStr","legacyComponent","deps","get","devDependencies","dependenciesList","getDependencies","updatedBitId","searchWithoutVersion","depIdStr","packageName","findDependency","getPackageName","debug","ext","extensionId","enrichSource","objects","persist","shouldExport","isLegacy","codemod","changeLocallyAlthoughRemoteIsDifferent","includeDependencies","remoteName","idsWithFutureScope","allVersions","provider","cli","loggerMain","_","createLogger","UpdateDependenciesAspect","updateDependenciesMain","UpdateDependenciesCmd","MainRuntime","CLIAspect","ScopeAspect","LoggerAspect","BuilderAspect","Slot","withType","addRuntime"],"mappings":"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","sourcesContent":["import mapSeries from 'p-map-series';\nimport { SlotRegistry, Slot } from '@teambit/harmony';\nimport { flatten } from 'lodash';\nimport { CLIAspect, CLIMain, MainRuntime } from '@teambit/cli';\nimport { LoggerAspect, LoggerMain, Logger } from '@teambit/logger';\nimport { ScopeAspect, ScopeMain, ComponentNotFound } from '@teambit/scope';\nimport { BuilderAspect, BuilderMain } from '@teambit/builder';\nimport { Component, ComponentID } from '@teambit/component';\nimport {\n  getPublishedPackages,\n  updateComponentsByTagResult,\n  addFlattenedDependenciesToComponents,\n} from '@teambit/legacy/dist/scope/component-ops/tag-model-component';\nimport ConsumerComponent from '@teambit/legacy/dist/consumer/component';\nimport { BuildStatus, LATEST } from '@teambit/legacy/dist/constants';\nimport { BitIds } from '@teambit/legacy/dist/bit-id';\nimport { BitId } from '@teambit/legacy-bit-id';\nimport { getValidVersionOrReleaseType } from '@teambit/legacy/dist/utils/semver-helper';\nimport { DependencyResolverAspect, DependencyResolverMain } from '@teambit/dependency-resolver';\nimport { exportMany } from '@teambit/legacy/dist/scope/component-ops/export-scope-components';\nimport { ExtensionDataEntry } from '@teambit/legacy/dist/consumer/config';\nimport { UpdateDependenciesCmd } from './update-dependencies.cmd';\nimport { UpdateDependenciesAspect } from './update-dependencies.aspect';\n\nexport type UpdateDepsOptions = {\n  tag?: boolean;\n  simulation?: boolean;\n  output?: string;\n  message?: string;\n  username?: string;\n  email?: string;\n  push?: boolean;\n  skipNewScopeValidation?: boolean;\n};\n\nexport type DepUpdateItemRaw = {\n  componentId: string; // ids always have scope, so it's safe to parse them from string\n  dependencies: string[]; // e.g. [@teambit/compiler@~1.0.0, @teambit/tester@^1.0.0]\n  versionToTag?: string; // specific version or semver. e.g. '1.0.0', 'minor',\n};\n\nexport type DepUpdateItem = {\n  component: Component;\n  dependencies: ComponentID[];\n  versionToTag?: string;\n};\n\nexport type UpdateDepsResult = {\n  depsUpdateItems: DepUpdateItem[];\n  publishedPackages: string[];\n  error: string | null;\n};\n\ntype OnPostUpdateDependencies = (components: Component[]) => Promise<void>;\ntype OnPostUpdateDependenciesSlot = SlotRegistry<OnPostUpdateDependencies>;\n\nexport class UpdateDependenciesMain {\n  private depsUpdateItems: DepUpdateItem[];\n  private updateDepsOptions: UpdateDepsOptions;\n  constructor(\n    private scope: ScopeMain,\n    private logger: Logger,\n    private builder: BuilderMain,\n    private dependencyResolver: DependencyResolverMain,\n    private onPostUpdateDependenciesSlot: OnPostUpdateDependenciesSlot\n  ) {}\n\n  /**\n   * we assume this is running from a new bare scope. so we import everything and then start working.\n   * we don't want this to be running from the original scope (like bit-sign). this command tags or\n   * snaps the results, a process that takes some time due to the build pipeline. if we start the\n   * tag on the original scope, build and then save the tag to the filesystem, we might get another\n   * tag during the process and our tag could override it.\n   */\n  async updateDependenciesVersions(\n    depsUpdateItemsRaw: DepUpdateItemRaw[],\n    updateDepsOptions: UpdateDepsOptions\n  ): Promise<UpdateDepsResult> {\n    this.updateDepsOptions = updateDepsOptions;\n    await this.validateScopeIsNew();\n    await this.importAllMissing(depsUpdateItemsRaw);\n    this.depsUpdateItems = await this.parseDevUpdatesItems(depsUpdateItemsRaw);\n    await this.updateFutureVersion();\n    await this.updateAllDeps();\n    this.addLogToComponents();\n    if (!updateDepsOptions.simulation) {\n      await addFlattenedDependenciesToComponents(this.scope.legacyScope, this.legacyComponents);\n    }\n    this.addBuildStatus();\n    await this.addComponentsToScope();\n    await this.updateComponents();\n    await mapSeries(this.components, (component) => this.scope.loadComponentsAspect(component));\n    const { builderDataMap, pipeResults } = await this.builder.tagListener(\n      this.components,\n      { throwOnError: true }, // we might change it later to not throw.\n      { seedersOnly: true }\n    );\n    const legacyBuildResults = this.scope.builderDataMapToLegacyOnTagResults(builderDataMap);\n    updateComponentsByTagResult(this.legacyComponents, legacyBuildResults);\n    const publishedPackages = getPublishedPackages(this.legacyComponents);\n    const pipeWithError = pipeResults.find((pipe) => pipe.hasErrors());\n    const buildStatus = pipeWithError ? BuildStatus.Failed : BuildStatus.Succeed;\n    await this.saveDataIntoLocalScope(buildStatus);\n    await this.export();\n    await this.triggerOnPostUpdateDependencies();\n\n    return {\n      depsUpdateItems: this.depsUpdateItems,\n      publishedPackages,\n      error: pipeWithError ? pipeWithError.getErrorMessageFormatted() : null,\n    };\n  }\n\n  get legacyComponents(): ConsumerComponent[] {\n    return this.depsUpdateItems.map((d) => d.component.state._consumer);\n  }\n  get components(): Component[] {\n    return this.depsUpdateItems.map((d) => d.component);\n  }\n\n  registerOnPostUpdateDependencies(fn: OnPostUpdateDependencies) {\n    this.onPostUpdateDependenciesSlot.register(fn);\n  }\n\n  private async validateScopeIsNew() {\n    if (this.updateDepsOptions.skipNewScopeValidation) {\n      return;\n    }\n    const ids = await this.scope.listIds();\n    if (ids.length) {\n      // it means this scope is a real remote scope with components, not just cache\n      throw new Error(`unable to run update-dependencies command on an existing scope \"${this.scope.name}\".\nplease create a new scope (bit init --bare) and run it from there.\nto bypass this error, use --skip-new-scope-validation flag (not recommended. it could corrupt the components irreversibly)`);\n    }\n  }\n\n  private async triggerOnPostUpdateDependencies() {\n    await Promise.all(this.onPostUpdateDependenciesSlot.values().map((fn) => fn(this.components))).catch((err) =>\n      this.logger.error('got an error during on-post-updates hook', err)\n    );\n  }\n\n  private async importAllMissing(depsUpdateItemsRaw: DepUpdateItemRaw[]) {\n    const componentIds = depsUpdateItemsRaw.map((d) => ComponentID.fromString(d.componentId));\n    const idsToImport = componentIds;\n    if (!this.updateDepsOptions.simulation) {\n      const dependenciesIds = depsUpdateItemsRaw.map((item) =>\n        item.dependencies.map((dep) => ComponentID.fromString(dep)).map((id) => id.changeVersion(LATEST))\n      );\n      idsToImport.push(...flatten(dependenciesIds));\n    }\n    // do not use cache. for dependencies we must fetch the latest ModelComponent from the remote\n    // in order to match the semver later.\n    await this.scope.import(idsToImport, false);\n  }\n\n  private async addComponentsToScope() {\n    await mapSeries(this.legacyComponents, (component) => this.scope.legacyScope.sources.addSourceFromScope(component));\n  }\n\n  private async updateComponents() {\n    await mapSeries(this.depsUpdateItems, async (depUpdateItem) => {\n      const legacyComp: ConsumerComponent = depUpdateItem.component.state._consumer;\n      depUpdateItem.component = await this.scope.getFromConsumerComponent(legacyComp);\n    });\n  }\n\n  private addBuildStatus() {\n    this.legacyComponents.forEach((c) => {\n      c.buildStatus = BuildStatus.Pending;\n    });\n  }\n\n  private addLogToComponents() {\n    this.legacyComponents.forEach((component) => {\n      component.log = {\n        username: this.updateDepsOptions.username || 'ci',\n        email: this.updateDepsOptions.email || 'ci@bit.dev',\n        message: this.updateDepsOptions.message || 'update-dependencies',\n        date: Date.now().toString(),\n      };\n    });\n  }\n\n  private async updateAllDeps() {\n    const components = this.depsUpdateItems.map((d) => d.component);\n    // current bit ids are needed because we might update multiple components that are depend on\n    // each other. in which case, we want the dependency version to be the same as the currently\n    // tagged/snapped component.\n    const currentBitIds = components.map((c) => c.id._legacy);\n    await mapSeries(this.depsUpdateItems, async ({ component, dependencies }) => {\n      await this.updateDependenciesVersionsOfComponent(component, dependencies, currentBitIds);\n      await this.updateDependencyResolver(component);\n    });\n  }\n\n  private async parseDevUpdatesItems(depsUpdateItemsRaw: DepUpdateItemRaw[]): Promise<DepUpdateItem[]> {\n    this.logger.setStatusLine(`loading ${depsUpdateItemsRaw.length} components and their aspects...`);\n    return mapSeries(depsUpdateItemsRaw, async (depUpdateItemRaw) => {\n      const componentId = ComponentID.fromString(depUpdateItemRaw.componentId);\n      const component = await this.scope.load(componentId);\n      if (!component) throw new ComponentNotFound(componentId);\n      const dependencies = await Promise.all(\n        depUpdateItemRaw.dependencies.map((dep) => this.getDependencyWithExactVersion(dep))\n      );\n      return { component, dependencies, versionToTag: depUpdateItemRaw.versionToTag };\n    });\n  }\n\n  private async getDependencyWithExactVersion(depStr: string): Promise<ComponentID> {\n    const compId = ComponentID.fromString(depStr);\n    if (this.updateDepsOptions.simulation) {\n      // for simulation, we don't have the objects of the dependencies, so don't try to find the\n      // exact version, expect the entered version to be okay.\n      return compId;\n    }\n    const range = compId.version || '*'; // if not version specified, assume the latest\n    const id = compId.changeVersion(undefined);\n    const exactVersion = await this.scope.getExactVersionBySemverRange(id, range);\n    if (!exactVersion) {\n      throw new Error(`unable to find a version that satisfies \"${range}\" of \"${depStr}\"`);\n    }\n    return compId.changeVersion(exactVersion);\n  }\n\n  private async updateFutureVersion() {\n    this.logger.setStatusLine(`updateFutureVersion...`);\n    await mapSeries(this.depsUpdateItems, async (depUpdateItem) => {\n      const legacyComp: ConsumerComponent = depUpdateItem.component.state._consumer;\n      const modelComponent = await this.scope.legacyScope.getModelComponent(legacyComp.id);\n      if (this.updateDepsOptions.tag) {\n        const { releaseType, exactVersion } = getValidVersionOrReleaseType(depUpdateItem.versionToTag || 'patch');\n        legacyComp.version = modelComponent.getVersionToAdd(releaseType, exactVersion);\n      } else {\n        // snap is the default\n        legacyComp.version = modelComponent.getSnapToAdd();\n      }\n    });\n  }\n\n  private async updateDependencyResolver(component: Component) {\n    const dependencies = await this.dependencyResolver.extractDepsFromLegacy(component);\n    const extId = DependencyResolverAspect.id;\n    const data = { dependencies };\n    const existingExtension = component.state._consumer.extensions.findExtension(extId);\n    if (existingExtension) {\n      // Only merge top level of extension data\n      Object.assign(existingExtension.data, data);\n      return;\n    }\n    const extension = new ExtensionDataEntry(undefined, undefined, extId, undefined, data);\n    component.state._consumer.extensions.push(extension);\n  }\n\n  private async updateDependenciesVersionsOfComponent(\n    component: Component,\n    dependencies: ComponentID[],\n    currentBitIds: BitId[]\n  ) {\n    const depsBitIds = dependencies.map((d) => d._legacy);\n    const updatedIds = BitIds.fromArray([...currentBitIds, ...depsBitIds]);\n    const componentIdStr = component.id.toString();\n    const legacyComponent: ConsumerComponent = component.state._consumer;\n    const deps = [...legacyComponent.dependencies.get(), ...legacyComponent.devDependencies.get()];\n    const dependenciesList = await this.dependencyResolver.getDependencies(component);\n    deps.forEach((dep) => {\n      const updatedBitId = updatedIds.searchWithoutVersion(dep.id);\n      if (updatedBitId) {\n        const depIdStr = dep.id.toString();\n        const packageName = dependenciesList.findDependency(depIdStr)?.getPackageName?.();\n        if (!packageName) {\n          throw new Error(\n            `unable to find the package-name of \"${depIdStr}\" dependency inside the dependency-resolver data of \"${componentIdStr}\"`\n          );\n        }\n        this.logger.debug(`updating \"${componentIdStr}\", dependency ${depIdStr} to version ${updatedBitId.version}}`);\n        dep.id = updatedBitId;\n        dep.packageName = packageName;\n      }\n    });\n    legacyComponent.extensions.forEach((ext) => {\n      if (!ext.extensionId) return;\n      const updatedBitId = updatedIds.searchWithoutVersion(ext.extensionId);\n      if (updatedBitId) {\n        this.logger.debug(\n          `updating \"${componentIdStr}\", extension ${ext.extensionId.toString()} to version ${updatedBitId.version}}`\n        );\n        ext.extensionId = updatedBitId;\n      }\n    });\n  }\n\n  private async saveDataIntoLocalScope(buildStatus: BuildStatus) {\n    await mapSeries(this.legacyComponents, async (component) => {\n      component.buildStatus = buildStatus;\n      await this.scope.legacyScope.sources.enrichSource(component);\n    });\n    await this.scope.legacyScope.objects.persist();\n  }\n\n  private async export() {\n    const shouldExport = this.updateDepsOptions.push;\n    if (!shouldExport) return;\n    const ids = BitIds.fromArray(this.legacyComponents.map((c) => c.id));\n    await exportMany({\n      scope: this.scope.legacyScope,\n      isLegacy: false,\n      ids,\n      codemod: false,\n      changeLocallyAlthoughRemoteIsDifferent: false,\n      includeDependencies: false,\n      remoteName: null,\n      idsWithFutureScope: ids,\n      allVersions: false,\n    });\n  }\n\n  static runtime = MainRuntime;\n\n  static dependencies = [CLIAspect, ScopeAspect, LoggerAspect, BuilderAspect, DependencyResolverAspect];\n\n  static slots = [Slot.withType<OnPostUpdateDependenciesSlot>()];\n\n  static async provider(\n    [cli, scope, loggerMain, builder, dependencyResolver]: [\n      CLIMain,\n      ScopeMain,\n      LoggerMain,\n      BuilderMain,\n      DependencyResolverMain\n    ],\n    _,\n    [onPostUpdateDependenciesSlot]: [OnPostUpdateDependenciesSlot]\n  ) {\n    const logger = loggerMain.createLogger(UpdateDependenciesAspect.id);\n    const updateDependenciesMain = new UpdateDependenciesMain(\n      scope,\n      logger,\n      builder,\n      dependencyResolver,\n      onPostUpdateDependenciesSlot\n    );\n    cli.register(new UpdateDependenciesCmd(updateDependenciesMain, scope, logger));\n    return updateDependenciesMain;\n  }\n}\n\nUpdateDependenciesAspect.addRuntime(UpdateDependenciesMain);\n"]}