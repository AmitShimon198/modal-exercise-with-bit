"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.configFactory = configFactory;

function _webpack() {
  const data = _interopRequireDefault(require("webpack"));

  _webpack = function () {
    return data;
  };

  return data;
}

function _htmlWebpackPlugin() {
  const data = _interopRequireDefault(require("html-webpack-plugin"));

  _htmlWebpackPlugin = function () {
    return data;
  };

  return data;
}

function _webpackFallbacks() {
  const data = require("./webpack-fallbacks");

  _webpackFallbacks = function () {
    return data;
  };

  return data;
}

function _webpackFallbacksProvidePluginConfig() {
  const data = require("./webpack-fallbacks-provide-plugin-config");

  _webpackFallbacksProvidePluginConfig = function () {
    return data;
  };

  return data;
}

function _webpackFallbacksAliases() {
  const data = require("./webpack-fallbacks-aliases");

  _webpackFallbacksAliases = function () {
    return data;
  };

  return data;
}

function _html() {
  const data = require("./html");

  _html = function () {
    return data;
  };

  return data;
}

function configFactory(entries, rootPath) {
  return {
    mode: 'production',
    // Stop compilation early in production
    bail: true,
    // These are the "entry points" to our application.
    // This means they will be the "root" imports that are included in JS bundle.
    entry: entries.filter(Boolean),
    output: {
      // The build folder.
      path: `${rootPath}/public`,
      filename: 'static/js/[name].[contenthash:8].js',
      // There are also additional JS chunk files if you use code splitting.
      chunkFilename: 'static/js/[name].[contenthash:8].chunk.js',
      // webpack uses `publicPath` to determine where the app is being served from.
      // It requires a trailing slash, or the file assets will get an incorrect path.
      // We inferred the "public path" (such as / or /my-project) from homepage.
      publicPath: `` // this defaults to 'window', but by setting it to 'this' then
      // module chunks which are built will work in web workers as well.
      // Commented out to use the default (self) as according to tobias with webpack5 self is working with workers as well
      // globalObject: 'this',

    },
    resolve: {
      alias: _webpackFallbacksAliases().fallbacksAliases,
      // @ts-ignore
      fallback: _webpackFallbacks().fallbacks
    },
    plugins: [new (_htmlWebpackPlugin().default)(Object.assign({}, {
      inject: true,
      templateContent: (0, _html().html)('Preview')
    }, {
      minify: {
        removeComments: true,
        collapseWhitespace: true,
        removeRedundantAttributes: true,
        useShortDoctype: true,
        removeEmptyAttributes: true,
        removeStyleLinkTypeAttributes: true,
        keepClosingSlash: true,
        minifyJS: true,
        minifyCSS: true,
        minifyURLs: true
      }
    })), new (_webpack().default.ProvidePlugin)(_webpackFallbacksProvidePluginConfig().fallbacksProvidePluginConfig)]
  };
}

//# sourceMappingURL=webpack.config.js.map