{"version":3,"sources":["webpack.bundler.ts"],"names":["WebpackBundler","constructor","targets","configs","logger","webpack","run","compilers","map","config","longProcessLogger","createLongProcessLogger","length","componentOutput","compiler","components","getComponents","outputPath","logProgress","component","id","toString","join","Promise","resolve","err","stats","errors","stack","BitError","info","toJson","compilation","outputOptions","path","warnings","end","splitPath","split","pop","target","find","targetCandidate","Error"],"mappings":";;;;;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGO,MAAMA,cAAN,CAAwC;AAC7CC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,OAJC;AAMT;AACJ;AACA;AACYC,EAAAA,OATC,EAWDC,MAXC,EAaDC,OAbC,EAcT;AAAA,SAVQH,OAUR,GAVQA,OAUR;AAAA,SALQC,OAKR,GALQA,OAKR;AAAA,SAHQC,MAGR,GAHQA,MAGR;AAAA,SADQC,OACR,GADQA,OACR;AAAE;;AAEK,QAAHC,GAAG,GAA6B;AACpC,UAAMC,SAAS,GAAG,KAAKJ,OAAL,CAAaK,GAAb,CAAkBC,MAAD,IAAiB,KAAKJ,OAAL,CAAaI,MAAb,CAAlC,CAAlB;AACA,UAAMC,iBAAiB,GAAG,KAAKN,MAAL,CAAYO,uBAAZ,CAAoC,yBAApC,EAA+DJ,SAAS,CAACK,MAAzE,CAA1B;AACA,UAAMC,eAAe,GAAG,MAAM,2BAAUN,SAAV,EAAsBO,QAAD,IAAwB;AACzE,YAAMC,UAAU,GAAG,KAAKC,aAAL,CAAmBF,QAAQ,CAACG,UAA5B,CAAnB;AACAP,MAAAA,iBAAiB,CAACQ,WAAlB,CAA8BH,UAAU,CAACP,GAAX,CAAgBW,SAAD,IAAeA,SAAS,CAACC,EAAV,CAAaC,QAAb,EAA9B,EAAuDC,IAAvD,CAA4D,IAA5D,CAA9B;AACA,aAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B;AACA;AACA,eAAOV,QAAQ,CAACR,GAAT,CAAa,CAACmB,GAAD,EAAMC,KAAN,KAAgB;AAClC,cAAID,GAAJ,EAAS;AACP,mBAAOD,OAAO,CAAC;AACbG,cAAAA,MAAM,EAAE,CAAE,GAAEF,GAAG,CAACJ,QAAJ,EAAe,KAAII,GAAG,CAACG,KAAM,EAAjC,CADK;AAEbb,cAAAA;AAFa,aAAD,CAAd;AAID;;AACD,cAAI,CAACW,KAAL,EAAY,MAAM,KAAIG,oBAAJ,EAAa,qBAAb,CAAN;AACZ,gBAAMC,IAAI,GAAGJ,KAAK,CAACK,MAAN,EAAb;AACA,iBAAOP,OAAO,CAAC;AACbG,YAAAA,MAAM,EAAEG,IAAI,CAACH,MADA;AAEbV,YAAAA,UAAU,EAAES,KAAK,CAACM,WAAN,CAAkBC,aAAlB,CAAgCC,IAF/B;AAGbnB,YAAAA,UAHa;AAIboB,YAAAA,QAAQ,EAAEL,IAAI,CAACK;AAJF,WAAD,CAAd;AAMD,SAfM,CAAP;AAgBD,OAnBM,CAAP;AAoBD,KAvB6B,CAA9B;AAwBAzB,IAAAA,iBAAiB,CAAC0B,GAAlB;AACA,WAAOvB,eAAP;AACD;;AAEOG,EAAAA,aAAa,CAACC,UAAD,EAAqB;AACxC,UAAMoB,SAAS,GAAGpB,UAAU,CAACqB,KAAX,CAAiB,GAAjB,CAAlB;AACAD,IAAAA,SAAS,CAACE,GAAV;AACA,UAAML,IAAI,GAAGG,SAAS,CAACf,IAAV,CAAe,GAAf,CAAb;AACA,UAAMkB,MAAM,GAAG,KAAKtC,OAAL,CAAauC,IAAb,CAAmBC,eAAD,IAAqB;AACpD,aAAOR,IAAI,KAAKQ,eAAe,CAACzB,UAAhC;AACD,KAFc,CAAf;;AAIA,QAAI,CAACuB,MAAL,EAAa;AACX,YAAM,IAAIG,KAAJ,CAAW,yCAAwCT,IAAK,GAAxD,CAAN;AACD;;AAED,WAAOM,MAAM,CAACzB,UAAd;AACD;;AA7D4C","sourcesContent":["import { BitError } from '@teambit/bit-error';\nimport { Bundler, BundlerResult, Target } from '@teambit/bundler';\nimport { Logger } from '@teambit/logger';\nimport mapSeries from 'p-map-series';\nimport { Compiler, Configuration } from 'webpack';\n\nexport class WebpackBundler implements Bundler {\n  constructor(\n    /**\n     * targets to bundle.\n     */\n    private targets: Target[],\n\n    /**\n     * webpack configuration.\n     */\n    private configs: Configuration[],\n\n    private logger: Logger,\n\n    private webpack\n  ) {}\n\n  async run(): Promise<BundlerResult[]> {\n    const compilers = this.configs.map((config: any) => this.webpack(config));\n    const longProcessLogger = this.logger.createLongProcessLogger('running Webpack bundler', compilers.length);\n    const componentOutput = await mapSeries(compilers, (compiler: Compiler) => {\n      const components = this.getComponents(compiler.outputPath);\n      longProcessLogger.logProgress(components.map((component) => component.id.toString()).join(', '));\n      return new Promise((resolve) => {\n        // TODO: split to multiple processes to reduce time and configure concurrent builds.\n        // @see https://github.com/trivago/parallel-webpack\n        return compiler.run((err, stats) => {\n          if (err) {\n            return resolve({\n              errors: [`${err.toString()}\\n${err.stack}`],\n              components,\n            });\n          }\n          if (!stats) throw new BitError('unknown build error');\n          const info = stats.toJson();\n          return resolve({\n            errors: info.errors,\n            outputPath: stats.compilation.outputOptions.path,\n            components,\n            warnings: info.warnings,\n          });\n        });\n      });\n    });\n    longProcessLogger.end();\n    return componentOutput as BundlerResult[];\n  }\n\n  private getComponents(outputPath: string) {\n    const splitPath = outputPath.split('/');\n    splitPath.pop();\n    const path = splitPath.join('/');\n    const target = this.targets.find((targetCandidate) => {\n      return path === targetCandidate.outputPath;\n    });\n\n    if (!target) {\n      throw new Error(`Could not find component id for path \"${path}\"`);\n    }\n\n    return target.components;\n  }\n}\n"]}