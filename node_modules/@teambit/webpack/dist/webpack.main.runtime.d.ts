import { PubsubMain } from '@teambit/pubsub';
import { BundlerContext, BundlerMain, DevServer, DevServerContext, BundlerMode } from '@teambit/bundler';
import { Logger, LoggerMain } from '@teambit/logger';
import { Workspace } from '@teambit/workspace';
import { WebpackConfigMutator } from '@teambit/webpack.modules.config-mutator';
import { WebpackBundler } from './webpack.bundler';
export declare type WebpackConfigTransformContext = {
    mode: BundlerMode;
};
export declare type WebpackConfigTransformer = (config: WebpackConfigMutator, context: WebpackConfigTransformContext) => WebpackConfigMutator;
export declare class WebpackMain {
    pubsub: PubsubMain;
    private workspace;
    private bundler;
    logger: Logger;
    constructor(pubsub: PubsubMain, workspace: Workspace, bundler: BundlerMain, logger: Logger);
    createDevServer(context: DevServerContext, transformers?: WebpackConfigTransformer[]): DevServer;
    mergeConfig(target: any, source: any): any;
    createBundler(context: BundlerContext, transformers?: WebpackConfigTransformer[]): WebpackBundler;
    private createPreviewConfig;
    private createDevServerConfig;
    static slots: never[];
    static runtime: import("@teambit/harmony").RuntimeDefinition;
    static dependencies: import("@teambit/harmony").Aspect[];
    static provider([pubsub, workspace, bundler, logger]: [PubsubMain, Workspace, BundlerMain, LoggerMain]): Promise<WebpackMain>;
}
export declare function runTransformersWithContext(config: WebpackConfigMutator, transformers: WebpackConfigTransformer[] | undefined, context: WebpackConfigTransformContext): WebpackConfigMutator;
