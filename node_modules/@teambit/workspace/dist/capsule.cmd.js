"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CapsuleCmd = exports.CapsuleListCmd = exports.CapsuleCreateCmd = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2().default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

class CapsuleCreateCmd {
  constructor(workspace, isolator) {
    this.workspace = workspace;
    this.isolator = isolator;
    (0, _defineProperty2().default)(this, "name", 'create [componentIds...]');
    (0, _defineProperty2().default)(this, "description", `create capsules`);
    (0, _defineProperty2().default)(this, "group", 'capsules');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['b', 'base-dir <name>', 'set base dir of all capsules'], ['a', 'always-new', 'create new environment for capsule'], ['s', 'seeders-only', 'create capsules for the seeders only (not for the entire graph)'], ['i', 'id <name>', 'reuse capsule of certain name'], ['j', 'json', 'json format'], ['d', 'install-packages', 'install packages by the package-manager'], ['p', 'package-manager <name>', 'npm, yarn or pnpm, default to npm']]);
  }

  async create([componentIds = []], {
    baseDir,
    alwaysNew = false,
    id,
    installPackages = false,
    seedersOnly = false
  }) {
    // @todo: why it is not an array?
    if (componentIds && !Array.isArray(componentIds)) componentIds = [componentIds];
    const capsuleOptions = {
      baseDir,
      installOptions: {
        installPackages
      },
      alwaysNew,
      seedersOnly,
      includeFromNestedHosts: true,
      name: id
    };
    const ids = await this.workspace.resolveMultipleComponentIds(componentIds);
    const network = await this.isolator.isolateComponents(ids, capsuleOptions);
    const capsules = network.graphCapsules;
    return capsules;
  }

  async report([componentIds], opts) {
    // @ts-ignore
    const capsules = await this.create(componentIds, opts);
    const capsuleOutput = capsules.map(capsule => `${_chalk().default.bold(capsule.component.id.toString())} - ${capsule.path}`).join('\n');
    const title = `${capsules.length} capsule(s) were created successfully`;
    return `${_chalk().default.green(title)}\n${capsuleOutput}`;
  }

  async json([componentIds], opts) {
    // @ts-ignore
    const capsules = await this.create(componentIds, opts);
    return capsules.map(c => ({
      id: c.component.id.toString(),
      path: c.path
    }));
  }

}

exports.CapsuleCreateCmd = CapsuleCreateCmd;

class CapsuleListCmd {
  constructor(isolator, workspace) {
    this.isolator = isolator;
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'list');
    (0, _defineProperty2().default)(this, "description", `list all capsules`);
    (0, _defineProperty2().default)(this, "shortDescription", 'list all capsules');
    (0, _defineProperty2().default)(this, "group", 'capsules');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "options", [['j', 'json', 'json format']]);
  }

  async report() {
    const list = await this.isolator.list(this.workspace.path);
    const {
      workspaceCapsulesRootDir,
      scopeCapsulesRootDir,
      scopeAspectsCapsulesRootDir
    } = this.getCapsulesRootDirs(); // TODO: improve output

    return _chalk().default.green(`found ${_chalk().default.cyan(list.capsules.length.toString())} capsule(s) for workspace:  ${_chalk().default.cyan(list.workspace)}
workspace capsules root-dir:       ${_chalk().default.cyan(workspaceCapsulesRootDir)}
scope capsules root-dir:           ${_chalk().default.cyan(scopeCapsulesRootDir)}
scope's aspects capsules root-dir: ${_chalk().default.cyan(scopeAspectsCapsulesRootDir)}
use --json to get the list of all workspace capsules`);
  }

  async json() {
    const list = await this.isolator.list(this.workspace.path);
    const rootDirs = this.getCapsulesRootDirs();
    return _objectSpread(_objectSpread({}, list), rootDirs);
  }

  getCapsulesRootDirs() {
    const workspaceCapsulesRootDir = this.isolator.getCapsulesRootDir(this.workspace.path);
    const scopeCapsulesRootDir = this.isolator.getCapsulesRootDir(this.workspace.scope.path);
    const scopeAspectsCapsulesRootDir = this.isolator.getCapsulesRootDir(this.workspace.scope.getAspectCapsulePath());
    return {
      workspaceCapsulesRootDir,
      scopeCapsulesRootDir,
      scopeAspectsCapsulesRootDir
    };
  }

}

exports.CapsuleListCmd = CapsuleListCmd;

class CapsuleCmd {
  constructor() {
    (0, _defineProperty2().default)(this, "name", 'capsule <sub-command>');
    (0, _defineProperty2().default)(this, "shortDescription", 'manage capsules');
    (0, _defineProperty2().default)(this, "description", `manage capsules.
a capsule is a directory contains the component code, isolated from the workspace.
normally, capsules are created during the build process, the component files are copied and the packages are installed
via the configured package-manager. the purpose is to compile/test them in isolation to make sure they will work for
other users after publishing/exporting them.`);
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'capsules');
    (0, _defineProperty2().default)(this, "commands", []);
    (0, _defineProperty2().default)(this, "options", []);
  }

  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  async report(args) {
    // it should never be here. Yargs throws an error before reaching this method.
    return `Please specify a sub-command`;
  }

}

exports.CapsuleCmd = CapsuleCmd;

//# sourceMappingURL=capsule.cmd.js.map