{"version":3,"sources":["component-config-file.ts"],"names":["DEFAULT_INDENT","DEFAULT_NEWLINE","ComponentConfigFile","constructor","componentId","aspects","propagate","options","indent","newLine","defaultScope","load","componentDir","aspectListFactory","outsideDefaultScope","filePath","composePath","isExist","fs","pathExists","undefined","content","readFile","parsed","parseComponentJsonContent","amount","ComponentID","fromObject","ExtensionDataList","fromConfigObject","extensions","componentRootFolder","path","join","COMPONENT_CONFIG_FILE_NAME","write","json","toJson","override","AlreadyExistsError","writeJsonSync","spaces","EOL","toObject","toConfigObject","toString","str","dir","JSON","parse","err","Error","message"],"mappings":"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","sourcesContent":["import { ComponentID, AspectList } from '@teambit/component';\nimport { COMPONENT_CONFIG_FILE_NAME } from '@teambit/legacy/dist/constants';\nimport { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';\nimport { PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';\nimport detectIndent from 'detect-indent';\nimport detectNewline from 'detect-newline';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport stringifyPackage from 'stringify-package';\n\nimport { AlreadyExistsError } from './exceptions';\n\ninterface ComponentConfigFileOptions {\n  indent: number;\n  newLine: '\\r\\n' | '\\n' | undefined;\n}\n\ninterface WriteConfigFileOptions {\n  override?: boolean;\n}\n\ninterface ComponentConfigFileJson {\n  componentId: any;\n  // TODO: think if we want to change it to aspects\n  extensions: any;\n  propagate: boolean;\n  defaultScope?: string;\n}\n\nconst DEFAULT_INDENT = 2;\nconst DEFAULT_NEWLINE = '\\n';\n\nexport class ComponentConfigFile {\n  constructor(\n    public componentId: ComponentID,\n    public aspects: AspectList,\n    public propagate: boolean = false,\n    private options: ComponentConfigFileOptions = { indent: DEFAULT_INDENT, newLine: DEFAULT_NEWLINE },\n    public defaultScope?: string\n  ) {}\n\n  // TODO: remove consumer from here\n  static async load(\n    componentDir: PathOsBasedAbsolute,\n    aspectListFactory: (extensionDataList: ExtensionDataList) => Promise<AspectList>,\n    outsideDefaultScope?: string\n  ): Promise<ComponentConfigFile | undefined> {\n    const filePath = ComponentConfigFile.composePath(componentDir);\n    const isExist = await fs.pathExists(filePath);\n    if (!isExist) {\n      return undefined;\n    }\n    const content = await fs.readFile(filePath, 'utf-8');\n    const parsed: ComponentConfigFileJson = parseComponentJsonContent(content, componentDir);\n    const indent = detectIndent(content).amount;\n    const newLine = detectNewline(content);\n    const componentId = ComponentID.fromObject(parsed.componentId, parsed.defaultScope || outsideDefaultScope);\n    const aspects = await aspectListFactory(ExtensionDataList.fromConfigObject(parsed.extensions));\n\n    return new ComponentConfigFile(componentId, aspects, !!parsed.propagate, { indent, newLine }, parsed.defaultScope);\n  }\n\n  static composePath(componentRootFolder: string) {\n    return path.join(componentRootFolder, COMPONENT_CONFIG_FILE_NAME);\n  }\n\n  async write(componentDir: string, options: WriteConfigFileOptions = {}): Promise<void> {\n    const json = this.toJson();\n    const filePath = ComponentConfigFile.composePath(componentDir);\n    const isExist = await fs.pathExists(filePath);\n    if (isExist && !options.override) {\n      throw new AlreadyExistsError(filePath);\n    }\n    return fs.writeJsonSync(filePath, json, { spaces: this.options.indent, EOL: this.options.newLine });\n  }\n\n  toJson(): ComponentConfigFileJson {\n    return {\n      componentId: this.componentId.toObject(),\n      propagate: this.propagate,\n      defaultScope: this.defaultScope,\n      extensions: this.aspects.toConfigObject(),\n    };\n  }\n\n  toString(): string {\n    const json = this.toJson();\n    return stringifyPackage(json, this.options.indent, this.options.newLine);\n  }\n}\n\nfunction parseComponentJsonContent(str: string, dir: string) {\n  try {\n    return JSON.parse(str);\n  } catch (err: any) {\n    throw new Error(`failed parsing component.json file at ${dir}. original error: ${err.message}`);\n  }\n}\n"]}