{"version":3,"sources":["component-tree.widget.tsx"],"names":["ComponentTreeWidget","component","workspace","WorkspaceContext","workspaceComponent","getComponent","id","status","issuesCount"],"mappings":";;;;;;;;;;;;;;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAEA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;;;;AAEO,MAAMA,mBAAN,CAAuD;AAAA;AAAA,oDACnD,CAAC;AAAEC,MAAAA;AAAF,KAAD,KAA2C;AAClD,YAAMC,SAAS,GAAG,yBAAWC,oCAAX,CAAlB;AAEA,YAAMC,kBAAkB,GAAGF,SAAS,CAACG,YAAV,CAAuBJ,SAAS,CAACK,EAAjC,CAA3B;AACA,UAAI,CAACF,kBAAL,EAAyB,OAAO,IAAP;AAEzB,0BAAO,+BAAC,sCAAD;AAAyB,QAAA,MAAM,EAAEA,kBAAkB,CAACG,MAApD;AAA4D,QAAA,WAAW,EAAEH,kBAAkB,CAACI;AAA5F,QAAP;AACD,KAR2D;AAAA;;AAAA","sourcesContent":["import { ComponentTreeNode, ComponentTreeNodeProps } from '@teambit/component-tree';\nimport { ComponentStatusResolver } from '@teambit/component.ui.component-status-resolver';\nimport React, { useContext } from 'react';\n\nimport { WorkspaceContext } from './ui/workspace/workspace-context';\n\nexport class ComponentTreeWidget implements ComponentTreeNode {\n  widget = ({ component }: ComponentTreeNodeProps) => {\n    const workspace = useContext(WorkspaceContext);\n\n    const workspaceComponent = workspace.getComponent(component.id);\n    if (!workspaceComponent) return null;\n\n    return <ComponentStatusResolver status={workspaceComponent.status} issuesCount={workspaceComponent.issuesCount} />;\n  };\n}\n"]}