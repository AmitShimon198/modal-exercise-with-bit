"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("core-js/modules/es.array.iterator.js");

require("core-js/modules/es.promise.js");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _defineProperty2() {
  const data = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

  _defineProperty2 = function () {
    return data;
  };

  return data;
}

function _chalk() {
  const data = _interopRequireDefault(require("chalk"));

  _chalk = function () {
    return data;
  };

  return data;
}

function _ink() {
  const data = require("ink");

  _ink = function () {
    return data;
  };

  return data;
}

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function () {
    return data;
  };

  return data;
}

class EjectConfCmd {
  constructor(workspace) {
    this.workspace = workspace;
    (0, _defineProperty2().default)(this, "name", 'eject-conf [id]');
    (0, _defineProperty2().default)(this, "description", 'ejecting components configuration');
    (0, _defineProperty2().default)(this, "alias", '');
    (0, _defineProperty2().default)(this, "group", 'development');
    (0, _defineProperty2().default)(this, "shortDescription", 'eject the target component configuration file (e.g. create a `component.json` file)');
    (0, _defineProperty2().default)(this, "options", [['p', 'propagate', 'mark propagate true in the config file'], ['o', 'override', 'override file if exist']]);
  } // TODO: remove this ts-ignore
  // @ts-ignore


  async render(args, options) {
    const ejectResult = await this.json(args, options);
    const [componentId] = args;
    return /*#__PURE__*/_react().default.createElement(_ink().Text, {
      color: "yellow"
    }, "successfully ejected config for component ", componentId, " in path ", ejectResult.configPath);
  }

  async report(args, options) {
    const ejectResult = await this.json(args, options);
    const [componentId] = args;
    return `successfully ejected config for component ${_chalk().default.bold(componentId)} in path ${_chalk().default.green(ejectResult.configPath)}`;
  }

  async json([componentId], options) {
    const ejectOptions = options;

    if (ejectOptions.propagate === 'true') {
      ejectOptions.propagate = true;
    }

    if (ejectOptions.override === 'true') {
      ejectOptions.override = true;
    }

    const id = await this.workspace.resolveComponentId(componentId);
    const results = await this.workspace.ejectConfig(id, ejectOptions);
    return results;
  }

}

exports.default = EjectConfCmd;

//# sourceMappingURL=eject-conf.cmd.js.map