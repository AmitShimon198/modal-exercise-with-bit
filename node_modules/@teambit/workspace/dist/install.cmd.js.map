{"version":3,"sources":["install.cmd.tsx"],"names":["InstallCmd","constructor","workspace","logger","report","packages","options","startTime","Date","now","console","chalk","cyan","name","installOpts","variants","lifecycleType","type","dedupe","skipDedupe","import","skipImport","updateExisting","savePrefix","components","install","endTime","executionTime","calculateTime","toArray","length","toString","diff"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAae,MAAMA,UAAN,CAAoC;AAejDC,EAAAA,WAAW;AACT;AACJ;AACA;AACYC,EAAAA,SAJC;AAMT;AACJ;AACA;AACYC,EAAAA,MATC,EAUT;AAAA,SANQD,SAMR,GANQA,SAMR;AAAA,SADQC,MACR,GADQA,MACR;AAAA,kDAxBK,uBAwBL;AAAA,yDAvBY,4CAuBZ;AAAA,mDAtBM,IAsBN;AAAA,mDArBM,aAqBN;AAAA,8DApBiB,EAoBjB;AAAA,qDAnBQ,CACR,CAAC,GAAD,EAAM,qBAAN,EAA6B,mCAA7B,CADQ,EAER,CAAC,GAAD,EAAM,sBAAN,EAA8B,2CAA9B,CAFQ,EAGR,CAAC,GAAD,EAAM,kCAAN,EAA0C,gDAA1C,CAHQ,EAIR,CAAC,EAAD,EAAK,0BAAL,EAAiC,iEAAjC,CAJQ,EAKR,CAAC,EAAD,EAAK,0BAAL,EAAiC,4CAAjC,CALQ,EAMR,CAAC,EAAD,EAAK,0BAAL,EAAiC,6CAAjC,CANQ,CAmBR;AAAE;;AAEQ,QAANC,MAAM,CAAC,CAACC,QAAQ,GAAG,EAAZ,CAAD,EAA8BC,OAA9B,EAA0D;AACpE,UAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,EAAlB;AACA,SAAKN,MAAL,CAAYO,OAAZ,CAAqB,oDAAmDC,iBAAMC,IAAN,CAAW,KAAKV,SAAL,CAAeW,IAA1B,CAAgC,GAAxG;AACA,UAAMC,WAAoC,GAAG;AAC3CC,MAAAA,QAAQ,EAAET,OAAO,CAACS,QADyB;AAE3CC,MAAAA,aAAa,EAAEV,OAAO,CAACW,IAFoB;AAG3CC,MAAAA,MAAM,EAAE,CAACZ,OAAO,CAACa,UAH0B;AAI3CC,MAAAA,MAAM,EAAE,CAACd,OAAO,CAACe,UAJ0B;AAK3CC,MAAAA,cAAc,EAAEhB,OAAO,CAACgB,cALmB;AAM3CC,MAAAA,UAAU,EAAEjB,OAAO,CAACiB;AANuB,KAA7C;AAQA,UAAMC,UAAU,GAAG,MAAM,KAAKtB,SAAL,CAAeuB,OAAf,CAAuBpB,QAAvB,EAAiCS,WAAjC,CAAzB;AACA,UAAMY,OAAO,GAAGlB,IAAI,CAACC,GAAL,EAAhB;AACA,UAAMkB,aAAa,GAAGC,aAAa,CAACrB,SAAD,EAAYmB,OAAZ,CAAnC;AACA,WAAQ,0CAAyCf,iBAAMC,IAAN,CAC/CY,UAAU,CAACK,OAAX,GAAqBC,MAArB,CAA4BC,QAA5B,EAD+C,CAE/C,oBAAmBpB,iBAAMC,IAAN,CAAWe,aAAa,CAACI,QAAd,EAAX,CAAqC,UAF1D;AAGD;;AA5CgD;;;;AA+CnD,SAASH,aAAT,CAAuBrB,SAAvB,EAA0CmB,OAA1C,EAA2D;AACzD,QAAMM,IAAI,GAAGN,OAAO,GAAGnB,SAAvB;AACA,SAAOyB,IAAI,GAAG,IAAd;AACD","sourcesContent":["import { Command, CommandOptions } from '@teambit/cli';\nimport { DependencyLifecycleType } from '@teambit/dependency-resolver';\nimport { Logger } from '@teambit/logger';\nimport chalk from 'chalk';\n\nimport { Workspace, WorkspaceInstallOptions } from './workspace';\n\ntype InstallCmdOptions = {\n  variants: string;\n  type: DependencyLifecycleType;\n  skipDedupe: boolean;\n  skipImport: boolean;\n  updateExisting: boolean;\n  savePrefix: string;\n};\n\nexport default class InstallCmd implements Command {\n  name = 'install [packages...]';\n  description = 'install development workspace dependencies';\n  alias = 'in';\n  group = 'development';\n  shortDescription = '';\n  options = [\n    ['v', 'variants <variants>', 'add packages to specific variants'],\n    ['t', 'type [lifecycleType]', 'runtime (default), dev or peer dependency'],\n    ['u', 'update-existing [updateExisting]', 'update existing dependencies version and types'],\n    ['', 'save-prefix [savePrefix]', 'set the prefix to use when adding dependency to workspace.jsonc'],\n    ['', 'skip-dedupe [skipDedupe]', 'do not dedupe dependencies on installation'],\n    ['', 'skip-import [skipImport]', 'do not import bit objects post installation'],\n  ] as CommandOptions;\n\n  constructor(\n    /**\n     * workspace extension.\n     */\n    private workspace: Workspace,\n\n    /**\n     * logger extension.\n     */\n    private logger: Logger\n  ) {}\n\n  async report([packages = []]: [string[]], options: InstallCmdOptions) {\n    const startTime = Date.now();\n    this.logger.console(`Resolving component dependencies for workspace: '${chalk.cyan(this.workspace.name)}'`);\n    const installOpts: WorkspaceInstallOptions = {\n      variants: options.variants,\n      lifecycleType: options.type,\n      dedupe: !options.skipDedupe,\n      import: !options.skipImport,\n      updateExisting: options.updateExisting,\n      savePrefix: options.savePrefix,\n    };\n    const components = await this.workspace.install(packages, installOpts);\n    const endTime = Date.now();\n    const executionTime = calculateTime(startTime, endTime);\n    return `Successfully resolved dependencies for ${chalk.cyan(\n      components.toArray().length.toString()\n    )} component(s) in ${chalk.cyan(executionTime.toString())} seconds`;\n  }\n}\n\nfunction calculateTime(startTime: number, endTime: number) {\n  const diff = endTime - startTime;\n  return diff / 1000;\n}\n"]}