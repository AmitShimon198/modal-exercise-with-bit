{"version":3,"sources":["tag-cmd.ts"],"names":["Tag","BASE_DOCS_DOMAIN","report","id","message","ver","all","snapped","patch","minor","major","preRelease","force","verbose","ignoreUnresolvedDependencies","ignoreIssues","ignoreNewestVersion","skipTests","skipAutoTag","scope","build","soft","persist","disableDeployPipeline","disableTagPipeline","forceDeploy","incrementBy","BUILD_ON_CI","Boolean","getVersion","length","GeneralError","secondArg","semver","valid","disableTagAndSnapPipelines","releaseFlags","filter","x","releaseType","DEFAULT_BIT_RELEASE_TYPE","includeImported","params","ids","exactVersion","results","chalk","yellow","NOTHING_TO_TAG_MSG","taggedComponents","autoTaggedResults","warnings","newComponents","changedComponents","component","searchWithoutVersion","addedComponents","autoTaggedCount","warningsOutput","join","tagExplanationPersist","tagExplanationSoft","tagExplanation","isSoftTag","outputComponents","comps","map","componentOutput","toString","autoTag","result","triggeredBy","searchWithoutScopeAndVersion","autoTagComp","a","AUTO_TAGGED_MSG","publishOutput","publishedPackages","successTitle","green","successCompsStr","successOutput","softTagPrefix","outputIfExists","label","explanation","components","underline","newDesc","changedDesc","softTagClarification","bold"],"mappings":"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","sourcesContent":["import chalk from 'chalk';\nimport semver, { ReleaseType } from 'semver';\nimport { Command, CommandOptions } from '@teambit/cli';\nimport { tagAction } from '@teambit/legacy/dist/api/consumer';\nimport {\n  TagResults,\n  NOTHING_TO_TAG_MSG,\n  AUTO_TAGGED_MSG,\n  BasicTagParams,\n} from '@teambit/legacy/dist/api/consumer/lib/tag';\nimport { isString } from '@teambit/legacy/dist/utils';\nimport { DEFAULT_BIT_RELEASE_TYPE, BASE_DOCS_DOMAIN, WILDCARD_HELP } from '@teambit/legacy/dist/constants';\nimport GeneralError from '@teambit/legacy/dist/error/general-error';\nimport { isFeatureEnabled, BUILD_ON_CI } from '@teambit/legacy/dist/api/consumer/lib/feature-toggle';\n\nexport class Tag implements Command {\n  name = 'tag [id...]';\n  group = 'development';\n  shortDescription = 'record component changes and lock versions';\n  description = `record component changes and lock versions.\nif component ids are entered, you can specify a version per id using \"@\" sign, e.g. bit tag foo@1.0.0 bar@minor baz@major\nhttps://${BASE_DOCS_DOMAIN}/docs/tag-component-version\n${WILDCARD_HELP('tag')}`;\n  alias = 't';\n  loader = true;\n  options = [\n    ['m', 'message <message>', 'log message describing the user changes'],\n    ['a', 'all [version]', 'tag all new and modified components'],\n    ['s', 'scope [version]', 'tag all components of the current scope'],\n    ['', 'snapped [version]', 'tag components that their head is a snap (not a tag)'],\n    ['', 'ver <version>', 'tag specified components with the given version'],\n    ['p', 'patch', 'increment the patch version number'],\n    ['', 'minor', 'increment the minor version number'],\n    ['', 'major', 'increment the major version number'],\n    ['', 'pre-release [identifier]', 'EXPERIMENTAL. increment a pre-release version (e.g. 1.0.0-dev.1)'],\n    ['f', 'force', 'force-tag even if tests are failing and even when component has not changed'],\n    ['v', 'verbose', 'show specs output on failure'],\n    ['', 'ignore-unresolved-dependencies', 'DEPRECATED. use --ignore-issues instead'],\n    ['i', 'ignore-issues', 'ignore component issues (shown in \"bit status\" as \"issues found\")'],\n    ['I', 'ignore-newest-version', 'ignore existing of newer versions (default = false)'],\n    ['', 'skip-tests', 'skip running component tests during tag process'],\n    ['', 'skip-auto-tag', 'skip auto tagging dependents'],\n    ['', 'build', 'EXPERIMENTAL. not needed for now. run the pipeline build and complete the tag'],\n    ['', 'soft', 'do not persist. only keep note of the changes to be made'],\n    ['', 'persist', 'persist the changes generated by --soft tag'],\n    ['', 'disable-deploy-pipeline', 'DEPRECATED. use --disable-tag-pipeline instead'],\n    ['', 'disable-tag-pipeline', 'skip the tag pipeline to avoid publishing the components'],\n    ['', 'force-deploy', 'run the tag pipeline although the build failed'],\n    [\n      '',\n      'increment-by <number>',\n      '(default to 1) increment semver flag (patch/minor/major) by. e.g. incrementing patch by 2: 0.0.1 -> 0.0.3.',\n    ],\n  ] as CommandOptions;\n  migration = true;\n  remoteOp = true; // In case a compiler / tester is not installed\n\n  // eslint-disable-next-line complexity\n  async report(\n    [id = []]: [string[]],\n    {\n      message = '',\n      ver,\n      all = false,\n      snapped = false,\n      patch,\n      minor,\n      major,\n      preRelease,\n      force = false,\n      verbose = false,\n      ignoreUnresolvedDependencies,\n      ignoreIssues = false,\n      ignoreNewestVersion = false,\n      skipTests = false,\n      skipAutoTag = false,\n      scope,\n      build,\n      soft = false,\n      persist = false,\n      disableDeployPipeline = false,\n      disableTagPipeline = false,\n      forceDeploy = false,\n      incrementBy = 1,\n    }: {\n      all?: boolean | string;\n      snapped?: boolean | string;\n      ver?: string;\n      patch?: boolean;\n      minor?: boolean;\n      major?: boolean;\n      ignoreUnresolvedDependencies?: boolean;\n      ignoreIssues?: boolean;\n      scope?: string | boolean;\n      incrementBy?: number;\n      disableDeployPipeline?: boolean;\n      disableTagPipeline?: boolean;\n    } & Partial<BasicTagParams>\n  ): Promise<string> {\n    build = isFeatureEnabled(BUILD_ON_CI) ? Boolean(build) : true;\n    if (soft) build = false;\n    function getVersion(): string | undefined {\n      if (scope && isString(scope)) return scope;\n      if (all && isString(all)) return all;\n      if (snapped && isString(snapped)) return snapped;\n      return ver;\n    }\n\n    if (!id.length && !all && !snapped && !scope && !persist) {\n      throw new GeneralError('missing [id]. to tag all components, please use --all flag');\n    }\n    if (id.length && all) {\n      throw new GeneralError(\n        'you can use either a specific component [id] to tag a particular component or --all flag to tag them all'\n      );\n    }\n    if (typeof ignoreUnresolvedDependencies === 'boolean') {\n      ignoreIssues = ignoreUnresolvedDependencies;\n    }\n    if (id.length === 2) {\n      const secondArg = id[1];\n      // previously, the synopsis of this command was `bit tag [id] [version]`, show a descriptive\n      // error when users still use it.\n      if (semver.valid(secondArg)) {\n        throw new GeneralError(\n          `seems like you entered a version as the second arg, this is not supported anymore, please use \"@\" sign or --ver flag instead`\n        );\n      }\n    }\n    const disableTagAndSnapPipelines = disableTagPipeline || disableDeployPipeline;\n    if (disableTagAndSnapPipelines && forceDeploy) {\n      throw new GeneralError('you can use either force-deploy or disable-tag-pipeline, but not both');\n    }\n    if (all && persist) {\n      throw new GeneralError('you can use either --all or --persist, but not both');\n    }\n\n    const releaseFlags = [patch, minor, major, preRelease].filter((x) => x);\n    if (releaseFlags.length > 1) {\n      throw new GeneralError('you can use only one of the following - patch, minor, major, pre-release');\n    }\n\n    let releaseType: ReleaseType = DEFAULT_BIT_RELEASE_TYPE;\n    const includeImported = Boolean(scope && all);\n\n    if (major) releaseType = 'major';\n    else if (minor) releaseType = 'minor';\n    else if (patch) releaseType = 'patch';\n    else if (preRelease) releaseType = 'prerelease';\n\n    const params = {\n      ids: id,\n      all: Boolean(all),\n      snapped: Boolean(snapped),\n      message,\n      exactVersion: getVersion(),\n      releaseType,\n      preRelease: typeof preRelease === 'string' ? preRelease : '',\n      force,\n      verbose,\n      ignoreIssues,\n      ignoreNewestVersion,\n      skipTests,\n      skipAutoTag,\n      build,\n      soft,\n      persist,\n      scope,\n      includeImported,\n      disableTagAndSnapPipelines,\n      forceDeploy,\n      incrementBy,\n    };\n\n    const results = await tagAction(params);\n    if (!results) return chalk.yellow(NOTHING_TO_TAG_MSG);\n    const { taggedComponents, autoTaggedResults, warnings, newComponents }: TagResults = results;\n    const changedComponents = taggedComponents.filter((component) => !newComponents.searchWithoutVersion(component.id));\n    const addedComponents = taggedComponents.filter((component) => newComponents.searchWithoutVersion(component.id));\n    const autoTaggedCount = autoTaggedResults ? autoTaggedResults.length : 0;\n\n    const warningsOutput = warnings && warnings.length ? `${chalk.yellow(warnings.join('\\n'))}\\n\\n` : '';\n    const tagExplanationPersist = `\\n(use \"bit export [collection]\" to push these components to a remote\")\n(use \"bit untag\" to unstage versions)\\n`;\n    const tagExplanationSoft = `\\n(use \"bit tag --persist\" to persist the changes\")\n(use \"bit untag --soft\" to remove the soft-tags)\\n`;\n\n    const tagExplanation = results.isSoftTag ? tagExplanationSoft : tagExplanationPersist;\n\n    const outputComponents = (comps) => {\n      return comps\n        .map((component) => {\n          let componentOutput = `     > ${component.id.toString()}`;\n          const autoTag = autoTaggedResults.filter((result) =>\n            result.triggeredBy.searchWithoutScopeAndVersion(component.id)\n          );\n          if (autoTag.length) {\n            const autoTagComp = autoTag.map((a) => a.component.id.toString());\n            componentOutput += `\\n       ${AUTO_TAGGED_MSG}:\n            ${autoTagComp.join('\\n            ')}`;\n          }\n          return componentOutput;\n        })\n        .join('\\n');\n    };\n\n    const publishOutput = () => {\n      const { publishedPackages } = results;\n      if (!publishedPackages || !publishedPackages.length) return '';\n      const successTitle = `\\n\\n${chalk.green(\n        `published the following ${publishedPackages.length} component(s) successfully\\n`\n      )}`;\n      const successCompsStr = publishedPackages.join('\\n');\n      const successOutput = successCompsStr ? successTitle + successCompsStr : '';\n      return successOutput;\n    };\n\n    const softTagPrefix = results.isSoftTag ? 'soft-tagged ' : '';\n    const outputIfExists = (label, explanation, components) => {\n      if (!components.length) return '';\n      return `\\n${chalk.underline(softTagPrefix + label)}\\n(${explanation})\\n${outputComponents(components)}\\n`;\n    };\n\n    const newDesc = results.isSoftTag\n      ? 'set to be tagged first version for components'\n      : 'first version for components';\n    const changedDesc = results.isSoftTag\n      ? 'components that set to get a version bump'\n      : 'components that got a version bump';\n    const softTagClarification = results.isSoftTag\n      ? chalk.bold(\n          'keep in mind that this is a soft-tag (changes recorded to be tagged), to persist the changes use --persist flag'\n        )\n      : '';\n    return (\n      warningsOutput +\n      chalk.green(\n        `${taggedComponents.length + autoTaggedCount} component(s) ${results.isSoftTag ? 'soft-' : ''}tagged`\n      ) +\n      tagExplanation +\n      outputIfExists('new components', newDesc, addedComponents) +\n      outputIfExists('changed components', changedDesc, changedComponents) +\n      publishOutput() +\n      softTagClarification\n    );\n  }\n}\n"]}