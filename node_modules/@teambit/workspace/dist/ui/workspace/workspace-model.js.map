{"version":3,"sources":["workspace-model.ts"],"names":["Workspace","constructor","name","path","icon","components","getComponent","id","find","component","fullName","from","map","value","ComponentModel","empty"],"mappings":";;;;;;;AACA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AADA;AAqBO,MAAMA,SAAN,CAAgB;AACrBC,EAAAA,WAAW;AACT;AACJ;AACA;AACaC,EAAAA,IAJA;AAMT;AACJ;AACA;AACaC,EAAAA,IATA;AAWT;AACJ;AACA;AACaC,EAAAA,IAdA;AAgBT;AACJ;AACA;AACaC,EAAAA,UAnBA,EAoBT;AAAA,SAhBSH,IAgBT,GAhBSA,IAgBT;AAAA,SAXSC,IAWT,GAXSA,IAWT;AAAA,SANSC,IAMT,GANSA,IAMT;AAAA,SADSC,UACT,GADSA,UACT;AAAE;AAEJ;AACF;AACA;;;AACEC,EAAAA,YAAY,CAACC,EAAD,EAAkB;AAC5B,WAAO,KAAKF,UAAL,CAAgBG,IAAhB,CAAsBC,SAAD,IAAeA,SAAS,CAACF,EAAV,CAAaG,QAAb,KAA0BH,EAAE,CAACG,QAAjE,CAAP;AACD;;AAEU,SAAJC,IAAI,CAAC;AAAET,IAAAA,IAAF;AAAQC,IAAAA,IAAR;AAAcE,IAAAA,UAAd;AAA0BD,IAAAA;AAA1B,GAAD,EAAmD;AAC5D,WAAO,IAAIJ,SAAJ,CACLE,IADK,EAELC,IAFK,EAGLC,IAHK,EAILC,UAAU,CAACO,GAAX,CAAgBC,KAAD,IAAW;AACxB,aAAOC,4BAAeH,IAAf,CAAoBE,KAApB,CAAP;AACD,KAFD,CAJK,CAAP;AAQD;;AAEW,SAALE,KAAK,GAAG;AACb,WAAO,IAAIf,SAAJ,CAAc,EAAd,EAAkB,EAAlB,EAAsB,EAAtB,EAA0B,EAA1B,CAAP;AACD;;AA3CoB","sourcesContent":["// import { ComponentMeta } from '@teambit/component';\nimport { ComponentID, ComponentModel, ComponentModelProps } from '@teambit/component';\nimport { DeprecationInfo } from '@teambit/deprecation';\nimport { Descriptor } from '@teambit/envs';\n\nimport { ComponentStatus } from '../../workspace-component/component-status';\n\nexport type WorkspaceModelComponent = {\n  id: ComponentID;\n  status: ComponentStatus;\n  deprecation: DeprecationInfo;\n  env: Descriptor;\n};\n\nexport type WorkspaceProps = {\n  name: string;\n  path: string;\n  components: ComponentModelProps[];\n  icon: string;\n};\n\nexport class Workspace {\n  constructor(\n    /**\n     * name of the workspace.\n     */\n    readonly name: string,\n\n    /**\n     * absolute path of the workspace.\n     */\n    readonly path: string,\n\n    /**\n     * icon of the workspace.\n     */\n    readonly icon: string,\n\n    /**\n     * components container in the workspace.\n     */\n    readonly components: ComponentModel[]\n  ) {}\n\n  /**\n   * return a component from the workspace.\n   */\n  getComponent(id: ComponentID) {\n    return this.components.find((component) => component.id.fullName === id.fullName);\n  }\n\n  static from({ name, path, components, icon }: WorkspaceProps) {\n    return new Workspace(\n      name,\n      path,\n      icon,\n      components.map((value) => {\n        return ComponentModel.from(value);\n      })\n    );\n  }\n\n  static empty() {\n    return new Workspace('', '', '', []);\n  }\n}\n"]}