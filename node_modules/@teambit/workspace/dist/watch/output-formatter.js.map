{"version":3,"sources":["output-formatter.ts"],"names":["verboseComponentFilesArrayToString","componentFiles","reduce","outputString","filePath","resultsForExtensionArrayToString","resultsForExtension","verbose","resultForExtension","chalk","green","component","componentFilesAsString","formatWatchPathsSortByComponent","trackDirs","Object","keys","watchPath","underline","formatCompileResults","compileResults","length","map","compileResult","extensionId","results","buildResults"],"mappings":";;;;;;;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;AAGA,MAAMA,kCAAkC,GAAIC,cAAD,IAAoB;AAC7D,SAAOA,cAAc,CAACC,MAAf,CAAsB,CAACC,YAAD,EAAeC,QAAf,KAA6B,GAAED,YAAa,SAAQC,QAAS,IAAnF,EAAyF,EAAzF,CAAP;AACD,CAFD;;AAIA,MAAMC,gCAAgC,GAAG,CAACC,mBAAD,EAAsBC,OAAtB,KAAkC;AACzE,SAAOD,mBAAmB,CAACJ,MAApB,CACL,CAACC,YAAD,EAAeK,kBAAf,KACG,GAAEL,YAAa,GAAEM,iBAAMC,KAAN,CAAY,GAAZ,CAAiB,YAAWF,kBAAkB,CAACG,SAAU;AACjF,OAAOJ,OAAO,GAAGC,kBAAkB,CAACI,sBAAtB,GAA+C,EAAG,IAHvD,EAIL,EAJK,CAAP;AAMD,CAPD;;AASO,MAAMC,+BAA+B,GAAIC,SAAD,IAAe;AAC5D,SAAOC,MAAM,CAACC,IAAP,CAAYF,SAAZ,EAAuBZ,MAAvB,CACL,CAACC,YAAD,EAAec,SAAf,KACG,GAAEd,YAAa;AACtB,MAAMM,iBAAMC,KAAN,CAAY,GAAZ,CAAiB,aAAYI,SAAS,CAACG,SAAD,CAAY;AACxD,WAAWA,SAAU,MAJZ,EAKJ,IAAGR,iBAAMS,SAAN,CAAgB,wBAAhB,CAA0C,IALzC,CAAP;AAOD,CARM;;;;AAUA,SAASC,oBAAT,CAA8BC,cAA9B,EAAwEb,OAAxE,EAA0F;AAC/F,MAAI,CAACa,cAAc,CAACC,MAApB,EAA4B,OAAO,EAAP;AAC5B,SAAOD,cAAc,CAClBE,GADI,CACCC,aAAD;AAAA;;AAAA,WAAoB;AACvBC,MAAAA,WAAW,EAAED,aAAa,CAACC,WADJ;AAEvBlB,MAAAA,mBAAmB,2BAAEiB,aAAa,CAACE,OAAhB,oFAAE,sBAAuBA,OAAzB,2DAAE,uBAAgCH,GAAhC,CAAqCd,kBAAD,KAAyB;AAChFG,QAAAA,SAAS,EAAEH,kBAAkB,CAACG,SADkD;AAEhFC,QAAAA,sBAAsB,EAAEZ,kCAAkC,CAACQ,kBAAkB,CAACkB,YAApB;AAFsB,OAAzB,CAApC;AAFE,KAApB;AAAA,GADA,EAQJxB,MARI,CASH,CAACC,YAAD,EAAeoB,aAAf,KACG,GAAEpB,YAAa;AACxB,IAAIE,gCAAgC,CAACkB,aAAa,CAACjB,mBAAf,EAAoCC,OAApC,CAA6C,EAXxE,EAYF,IAAGE,iBAAMS,SAAN,CAAgB,sBAAhB,CAAwC,EAZzC,CAAP;AAcD","sourcesContent":["import chalk from 'chalk';\nimport { OnComponentEventResult } from '../on-component-events';\n\nconst verboseComponentFilesArrayToString = (componentFiles) => {\n  return componentFiles.reduce((outputString, filePath) => `${outputString} \\t - ${filePath}\\n`, ``);\n};\n\nconst resultsForExtensionArrayToString = (resultsForExtension, verbose) => {\n  return resultsForExtension.reduce(\n    (outputString, resultForExtension) =>\n      `${outputString}${chalk.green('√')}SUCCESS\\t${resultForExtension.component}\\n\n     ${verbose ? resultForExtension.componentFilesAsString : ''}\\n`,\n    ''\n  );\n};\n\nexport const formatWatchPathsSortByComponent = (trackDirs) => {\n  return Object.keys(trackDirs).reduce(\n    (outputString, watchPath) =>\n      `${outputString}\n    ${chalk.green('√')} SUCCESS\\t${trackDirs[watchPath]}\\n\n    \\t - ${watchPath}\\n\\n`,\n    ` ${chalk.underline('STATUS\\t\\tCOMPONENT ID')}\\n`\n  );\n};\n\nexport function formatCompileResults(compileResults: OnComponentEventResult[], verbose: boolean) {\n  if (!compileResults.length) return '';\n  return compileResults\n    .map((compileResult) => ({\n      extensionId: compileResult.extensionId,\n      resultsForExtension: compileResult.results?.results?.map((resultForExtension) => ({\n        component: resultForExtension.component,\n        componentFilesAsString: verboseComponentFilesArrayToString(resultForExtension.buildResults),\n      })),\n    }))\n    .reduce(\n      (outputString, compileResult) =>\n        `${outputString}\n  ${resultsForExtensionArrayToString(compileResult.resultsForExtension, verbose)}`,\n      ` ${chalk.underline('STATUS\\tCOMPONENT ID')}`\n    );\n}\n"]}