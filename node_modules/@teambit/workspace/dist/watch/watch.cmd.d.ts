import { Command, CommandOptions } from '@teambit/cli';
import type { Logger } from '@teambit/logger';
import type { PubsubMain } from '@teambit/pubsub';
import { Watcher } from './watcher';
import { OnComponentEventResult } from '../on-component-events';
export declare class WatchCommand implements Command {
    private pubsub;
    private logger;
    private watcher;
    msgs: {
        onAll: (event: any, path: any) => void;
        onStart: () => void;
        onReady: (workspace: any, watchPathsSortByComponent: any, verbose: any) => void;
        onChange: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration: any) => void;
        onAdd: (filePath: string, buildResults: OnComponentEventResult[], verbose: boolean, duration: any) => void;
        onUnlink: (p: any) => void;
        onError: (err: any) => void;
    };
    name: string;
    description: string;
    alias: string;
    group: string;
    shortDescription: string;
    options: CommandOptions;
    constructor(pubsub: PubsubMain, logger: Logger, watcher: Watcher);
    private registerToEvents;
    private eventsListener;
    report(cliArgs: [], { verbose }: {
        verbose?: boolean;
    }): Promise<string>;
}
