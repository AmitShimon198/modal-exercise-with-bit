/// <reference types="node" />
import { PubsubMain } from '@teambit/pubsub';
import { ComponentID } from '@teambit/component';
import { BitId } from '@teambit/legacy-bit-id';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { ChildProcess } from 'child_process';
import { PathLinux } from '@teambit/legacy/dist/utils/path';
import { Workspace } from '../workspace';
export declare type WatcherProcessData = {
    watchProcess: ChildProcess;
    compilerId: BitId;
    componentIds: BitId[];
};
export declare class Watcher {
    private workspace;
    private pubsub;
    private trackDirs;
    private verbose;
    private multipleWatchers;
    private fsWatcher;
    constructor(workspace: Workspace, pubsub: PubsubMain, trackDirs?: {
        [dir: PathLinux]: ComponentID;
    }, verbose?: boolean, multipleWatchers?: WatcherProcessData[]);
    watch(opts: {
        msgs: any;
        verbose?: boolean;
    }): Promise<void>;
    get consumer(): Consumer;
    watchAll(opts?: {
        msgs: any;
        verbose?: boolean;
    }): Promise<unknown>;
    private handleChange;
    private handleBitmapChanges;
    private executeWatchOperationsOnRemove;
    private executeWatchOperationsOnComponent;
    private creatOnComponentRemovedEvent;
    private creatOnComponentChangeEvent;
    private creatOnComponentAddEvent;
    private completeWatch;
    private isComponentWatchedExternally;
    private getComponentIdAndClearItsCache;
    private findTrackDirByFilePathRecursively;
    private createWatcher;
    setTrackDirs(): Promise<void>;
    private getPathsToWatch;
}
