import type { PubsubMain } from '@teambit/pubsub';
import { IssuesList } from '@teambit/component-issues';
import type { AspectLoaderMain, AspectDefinition } from '@teambit/aspect-loader';
import { ComponentMain, Component, ComponentFactory, ComponentID, ComponentMap, AspectList, AspectData, InvalidComponent } from '@teambit/component';
import { ComponentScopeDirMap } from '@teambit/config';
import { DependencyLifecycleType, DependencyResolverMain, LinkingOptions, LinkResults } from '@teambit/dependency-resolver';
import { EnvsMain } from '@teambit/envs';
import { GraphqlMain } from '@teambit/graphql';
import { Harmony } from '@teambit/harmony';
import { IsolatorMain } from '@teambit/isolator';
import { Logger } from '@teambit/logger';
import type { ScopeMain } from '@teambit/scope';
import { RequireableComponent } from '@teambit/harmony.modules.requireable-component';
import { ResolvedComponent } from '@teambit/harmony.modules.resolved-component';
import type { VariantsMain } from '@teambit/variants';
import LegacyGraph from '@teambit/legacy/dist/scope/graph/graph';
import { BitId } from '@teambit/legacy-bit-id';
import { LocalLaneId } from '@teambit/legacy/dist/lane-id/lane-id';
import { Consumer } from '@teambit/legacy/dist/consumer';
import { GetBitMapComponentOptions } from '@teambit/legacy/dist/consumer/bit-map/bit-map';
import type { AddActionResults, Warnings } from '@teambit/legacy/dist/consumer/component-ops/add-components/add-components';
import ComponentsList from '@teambit/legacy/dist/consumer/component/components-list';
import { ExtensionDataList } from '@teambit/legacy/dist/consumer/config/extension-data';
import { PathOsBased, PathOsBasedRelative, PathOsBasedAbsolute } from '@teambit/legacy/dist/utils/path';
import ConsumerComponent from '@teambit/legacy/dist/consumer/component';
import type { ComponentLog } from '@teambit/legacy/dist/scope/models/model-component';
import { OnComponentAdd, OnComponentChange, OnComponentEventResult, OnComponentLoad, OnComponentRemove } from './on-component-events';
import { WorkspaceExtConfig } from './types';
import { Watcher } from './watch/watcher';
import { ComponentStatus } from './workspace-component/component-status';
import { OnComponentAddSlot, OnComponentChangeSlot, OnComponentLoadSlot, OnComponentRemoveSlot } from './workspace.provider';
import { WorkspaceComponentLoader } from './workspace-component/workspace-component-loader';
export declare type EjectConfResult = {
    configPath: string;
};
export declare const ComponentAdded = "componentAdded";
export declare const ComponentChanged = "componentChanged";
export declare const ComponentRemoved = "componentRemoved";
export interface EjectConfOptions {
    propagate?: boolean;
    override?: boolean;
}
export declare type WorkspaceInstallOptions = {
    variants?: string;
    lifecycleType?: DependencyLifecycleType;
    dedupe: boolean;
    import: boolean;
    copyPeerToRuntimeOnRoot?: boolean;
    copyPeerToRuntimeOnComponents?: boolean;
    updateExisting: boolean;
    savePrefix?: string;
};
export declare type WorkspaceLinkOptions = LinkingOptions;
export declare type TrackData = {
    rootDir: PathOsBasedRelative;
    componentName?: string;
    mainFile?: string;
};
export declare type TrackResult = {
    componentName: string;
    files: string[];
    warnings: Warnings;
};
export declare class Workspace implements ComponentFactory {
    private pubsub;
    private config;
    consumer: Consumer;
    readonly scope: ScopeMain;
    private componentAspect;
    private isolator;
    private dependencyResolver;
    private variants;
    private aspectLoader;
    private logger;
    private componentList;
    private harmony;
    onComponentLoadSlot: OnComponentLoadSlot;
    private onComponentChangeSlot;
    private envs;
    private onComponentAddSlot;
    private onComponentRemoveSlot;
    private graphql;
    priority: boolean;
    owner?: string;
    componentsScopeDirsMap: ComponentScopeDirMap;
    componentLoader: WorkspaceComponentLoader;
    constructor(pubsub: PubsubMain, config: WorkspaceExtConfig, consumer: Consumer, scope: ScopeMain, componentAspect: ComponentMain, isolator: IsolatorMain, dependencyResolver: DependencyResolverMain, variants: VariantsMain, aspectLoader: AspectLoaderMain, logger: Logger, componentList: ComponentsList, harmony: Harmony, onComponentLoadSlot: OnComponentLoadSlot, onComponentChangeSlot: OnComponentChangeSlot, envs: EnvsMain, onComponentAddSlot: OnComponentAddSlot, onComponentRemoveSlot: OnComponentRemoveSlot, graphql: GraphqlMain);
    private validateConfig;
    readonly watcher: Watcher;
    get path(): string;
    private get modulesPath();
    get isLegacy(): boolean;
    onComponentLoad(loadFn: OnComponentLoad): this;
    registerOnComponentChange(onComponentChangeFunc: OnComponentChange): this;
    registerOnComponentAdd(onComponentAddFunc: OnComponentAdd): this;
    registerOnComponentRemove(onComponentRemoveFunc: OnComponentRemove): this;
    get name(): string;
    get icon(): string;
    hasModifiedDependencies(component: Component): Promise<boolean>;
    getComponentIssues(component: Component): IssuesList | null;
    getComponentStatus(component: Component): Promise<ComponentStatus>;
    list(filter?: {
        offset: number;
        limit: number;
    }): Promise<Component[]>;
    listInvalid(): Promise<InvalidComponent[]>;
    listIds(): Promise<ComponentID[]>;
    hasId(componentId: ComponentID): Promise<boolean>;
    hasName(name: string): Promise<boolean>;
    hasIdNested(componentId: ComponentID, includeCache?: boolean): Promise<boolean>;
    modified(): Promise<Component[]>;
    newComponents(): Promise<Component[]>;
    getAllComponentIds(): Promise<ComponentID[]>;
    getNewAndModifiedIds(): Promise<ComponentID[]>;
    getLogs(id: ComponentID): Promise<ComponentLog[]>;
    getLegacyGraph(ids?: ComponentID[]): Promise<LegacyGraph>;
    loadCapsules(bitIds: string[]): Promise<import("@teambit/isolator").Capsule[]>;
    load(ids: Array<BitId | string>): Promise<ResolvedComponent[]>;
    createAspectList(extensionDataList: ExtensionDataList): Promise<AspectList>;
    get(componentId: ComponentID, forCapsule?: boolean, legacyComponent?: ConsumerComponent, useCache?: boolean, storeInCache?: boolean): Promise<Component>;
    getEnvSystemDescriptor(component: Component): Promise<AspectData>;
    clearCache(): void;
    clearComponentCache(id: ComponentID): void;
    triggerOnComponentChange(id: ComponentID): Promise<OnComponentEventResult[]>;
    triggerOnComponentAdd(id: ComponentID): Promise<OnComponentEventResult[]>;
    triggerOnComponentRemove(id: ComponentID): Promise<OnComponentEventResult[]>;
    getState(id: ComponentID, hash: string): Promise<import("@teambit/component").State>;
    getSnap(id: ComponentID, hash: string): Promise<import("@teambit/component").Snap>;
    getCurrentLaneId(): LocalLaneId;
    getDefaultExtensions(): ExtensionDataList;
    ejectConfig(id: ComponentID, options: EjectConfOptions): Promise<EjectConfResult>;
    private resolveScopeAspectListIds;
    byPattern(pattern: string, scope?: string): Promise<Component[]>;
    getMany(ids: Array<ComponentID>, forCapsule?: boolean): Promise<Component[]>;
    getManyByLegacy(components: ConsumerComponent[]): Promise<Component[]>;
    importAndGetMany(ids: Array<ComponentID>, forCapsule?: boolean): Promise<Component[]>;
    add(componentPaths: PathOsBasedRelative[], id?: string, main?: string, override?: boolean): Promise<AddActionResults>;
    track(trackData: TrackData): Promise<TrackResult>;
    write(rootPath: string, component: Component): Promise<void>;
    writeBitMap(): Promise<void>;
    componentDir(componentId: ComponentID, bitMapOptions?: GetBitMapComponentOptions, options?: {
        relative: boolean;
    }): PathOsBased;
    private componentDirFromLegacyId;
    componentDirToAbsolute(relativeComponentDir: PathOsBasedRelative): PathOsBasedAbsolute;
    componentDefaultScope(componentId: ComponentID): Promise<string | undefined>;
    componentDefaultScopeFromComponentDirAndName(relativeComponentDir: PathOsBasedRelative, name: string): Promise<string | undefined>;
    get defaultScope(): string;
    private componentDefaultScopeFromComponentDirAndNameWithoutConfigFile;
    componentExtensions(componentId: ComponentID, componentFromScope?: Component): Promise<ExtensionDataList>;
    private resolveExtensionListIds;
    private isVendorComponentByComponentDir;
    private componentConfigFile;
    private componentConfigFileFromComponentDirAndName;
    getGraphWithoutCore(components: Component[]): Promise<LegacyGraph>;
    loadAspects(ids?: string[], throwOnError?: boolean): Promise<void>;
    resolveAspects(runtimeName?: string, componentIds?: ComponentID[]): Promise<AspectDefinition[]>;
    private groupIdsByWorkspaceAndScope;
    private groupComponentsByWorkspaceAndScope;
    loadExtensions(extensions: ExtensionDataList, throwOnError?: boolean): Promise<void>;
    getTempDir(id: string): string;
    requireComponents(components: Component[]): Promise<RequireableComponent[]>;
    private getComponentsDirectory;
    install(packages?: string[], options?: WorkspaceInstallOptions): Promise<ComponentMap<string>>;
    link(options?: WorkspaceLinkOptions): Promise<LinkResults>;
    private generateFilterFnForDepsFromLocalRemote;
    private importAndGetAspects;
    private importObjects;
    _reloadConsumer(): Promise<void>;
    getComponentPackagePath(component: ConsumerComponent | Component): string;
    get defaultDirectory(): string;
    get legacyDefaultDirectory(): string;
    resolveComponentId(id: string | ComponentID | BitId): Promise<ComponentID>;
    resolveMultipleComponentIds(ids: Array<string | ComponentID | BitId>): Promise<ComponentID[]>;
    resolveExtensionsList(extensions: ExtensionDataList): Promise<void[]>;
    addDefaultScopeToExtensionsList(extensions: ExtensionDataList): Promise<void[]>;
}
export default Workspace;
