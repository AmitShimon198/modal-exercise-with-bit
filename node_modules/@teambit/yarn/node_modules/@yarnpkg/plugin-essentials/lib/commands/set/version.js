"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.setVersion = exports.resolveTag = exports.resolveRange = void 0;
const tslib_1 = require("tslib");
const cli_1 = require("@yarnpkg/cli");
const core_1 = require("@yarnpkg/core");
const core_2 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const clipanion_1 = require("clipanion");
const semver_1 = tslib_1.__importDefault(require("semver"));
// eslint-disable-next-line arca/no-default-export
class SetVersionCommand extends cli_1.BaseCommand {
    constructor() {
        super(...arguments);
        this.onlyIfNeeded = clipanion_1.Option.Boolean(`--only-if-needed`, false, {
            description: `Only lock the Yarn version if it isn't already locked`,
        });
        this.version = clipanion_1.Option.String();
    }
    async execute() {
        const configuration = await core_1.Configuration.find(this.context.cwd, this.context.plugins);
        if (configuration.get(`yarnPath`) && this.onlyIfNeeded)
            return 0;
        const getBundlePath = () => {
            if (typeof core_1.YarnVersion === `undefined`)
                throw new clipanion_1.UsageError(`The --install flag can only be used without explicit version specifier from the Yarn CLI`);
            return `file://${process.argv[1]}`;
        };
        let bundleUrl;
        if (this.version === `self`)
            bundleUrl = getBundlePath();
        else if (this.version === `latest` || this.version === `berry` || this.version === `stable`)
            bundleUrl = `https://repo.yarnpkg.com/${await resolveTag(configuration, `stable`)}/packages/yarnpkg-cli/bin/yarn.js`;
        else if (this.version === `canary`)
            bundleUrl = `https://repo.yarnpkg.com/${await resolveTag(configuration, `canary`)}/packages/yarnpkg-cli/bin/yarn.js`;
        else if (this.version === `classic`)
            bundleUrl = `https://nightly.yarnpkg.com/latest.js`;
        else if (this.version.match(/^\.{0,2}[\\/]/) || fslib_1.npath.isAbsolute(this.version))
            bundleUrl = `file://${fslib_1.npath.resolve(this.version)}`;
        else if (core_2.semverUtils.satisfiesWithPrereleases(this.version, `>=2.0.0`))
            bundleUrl = `https://repo.yarnpkg.com/${this.version}/packages/yarnpkg-cli/bin/yarn.js`;
        else if (core_2.semverUtils.satisfiesWithPrereleases(this.version, `^0.x || ^1.x`))
            bundleUrl = `https://github.com/yarnpkg/yarn/releases/download/v${this.version}/yarn-${this.version}.js`;
        else if (core_2.semverUtils.validRange(this.version))
            bundleUrl = `https://repo.yarnpkg.com/${await resolveRange(configuration, this.version)}/packages/yarnpkg-cli/bin/yarn.js`;
        else
            throw new clipanion_1.UsageError(`Invalid version descriptor "${this.version}"`);
        const report = await core_1.StreamReport.start({
            configuration,
            stdout: this.context.stdout,
            includeLogs: !this.context.quiet,
        }, async (report) => {
            const filePrefix = `file://`;
            let bundleBuffer;
            if (bundleUrl.startsWith(filePrefix)) {
                report.reportInfo(core_1.MessageName.UNNAMED, `Downloading ${core_2.formatUtils.pretty(configuration, bundleUrl, core_1.FormatType.URL)}`);
                bundleBuffer = await fslib_1.xfs.readFilePromise(fslib_1.npath.toPortablePath(bundleUrl.slice(filePrefix.length)));
            }
            else {
                report.reportInfo(core_1.MessageName.UNNAMED, `Retrieving ${core_2.formatUtils.pretty(configuration, bundleUrl, core_1.FormatType.PATH)}`);
                bundleBuffer = await core_2.httpUtils.get(bundleUrl, { configuration });
            }
            await setVersion(configuration, null, bundleBuffer, { report });
        });
        return report.exitCode();
    }
}
exports.default = SetVersionCommand;
SetVersionCommand.paths = [
    [`set`, `version`],
];
SetVersionCommand.usage = clipanion_1.Command.Usage({
    description: `lock the Yarn version used by the project`,
    details: `
      This command will download a specific release of Yarn directly from the Yarn GitHub repository, will store it inside your project, and will change the \`yarnPath\` settings from your project \`.yarnrc.yml\` file to point to the new file.

      A very good use case for this command is to enforce the version of Yarn used by the any single member of your team inside a same project - by doing this you ensure that you have control on Yarn upgrades and downgrades (including on your deployment servers), and get rid of most of the headaches related to someone using a slightly different version and getting a different behavior than you.

      The version specifier can be:

      - a tag:
        - \`latest\` / \`berry\` / \`stable\` -> the most recent stable berry (\`>=2.0.0\`) release
        - \`canary\` -> the most recent canary (release candidate) berry (\`>=2.0.0\`) release
        - \`classic\` -> the most recent classic (\`^0.x || ^1.x\`) release

      - a semver range (e.g. \`2.x\`) -> the most recent version satisfying the range (limited to berry releases)

      - a semver version (e.g. \`2.4.1\`, \`1.22.1\`)

      - a local file referenced through either a relative or absolute path

      - \`self\` -> the version used to invoke the command
    `,
    examples: [[
            `Download the latest release from the Yarn repository`,
            `$0 set version latest`,
        ], [
            `Download the latest canary release from the Yarn repository`,
            `$0 set version canary`,
        ], [
            `Download the latest classic release from the Yarn repository`,
            `$0 set version classic`,
        ], [
            `Download the most recent Yarn 3 build`,
            `$0 set version 3.x`,
        ], [
            `Download a specific Yarn 2 build`,
            `$0 set version 2.0.0-rc.30`,
        ], [
            `Switch back to a specific Yarn 1 release`,
            `$0 set version 1.22.1`,
        ], [
            `Use a release from the local filesystem`,
            `$0 set version ./yarn.cjs`,
        ], [
            `Download the version used to invoke the command`,
            `$0 set version self`,
        ]],
});
async function resolveRange(configuration, request) {
    const data = await core_2.httpUtils.get(`https://repo.yarnpkg.com/tags`, { configuration, jsonResponse: true });
    const candidates = data.tags.filter(version => core_2.semverUtils.satisfiesWithPrereleases(version, request));
    if (candidates.length === 0)
        throw new clipanion_1.UsageError(`No matching release found for range ${core_2.formatUtils.pretty(configuration, request, core_2.formatUtils.Type.RANGE)}.`);
    // The tags on the website are sorted by semver descending
    return candidates[0];
}
exports.resolveRange = resolveRange;
async function resolveTag(configuration, request) {
    const data = await core_2.httpUtils.get(`https://repo.yarnpkg.com/tags`, { configuration, jsonResponse: true });
    if (!data.latest[request])
        throw new clipanion_1.UsageError(`Tag ${core_2.formatUtils.pretty(configuration, request, core_2.formatUtils.Type.RANGE)} not found`);
    return data.latest[request];
}
exports.resolveTag = resolveTag;
async function setVersion(configuration, bundleVersion, bundleBuffer, { report }) {
    var _a;
    if (bundleVersion === null) {
        await fslib_1.xfs.mktempPromise(async (tmpDir) => {
            const temporaryPath = fslib_1.ppath.join(tmpDir, `yarn.cjs`);
            await fslib_1.xfs.writeFilePromise(temporaryPath, bundleBuffer);
            const { stdout } = await core_2.execUtils.execvp(process.execPath, [fslib_1.npath.fromPortablePath(temporaryPath), `--version`], {
                cwd: tmpDir,
                env: { ...process.env, YARN_IGNORE_PATH: `1` },
            });
            bundleVersion = stdout.trim();
            if (!semver_1.default.valid(bundleVersion)) {
                throw new Error(`Invalid semver version. ${core_2.formatUtils.pretty(configuration, `yarn --version`, core_2.formatUtils.Type.CODE)} returned:\n${bundleVersion}`);
            }
        });
    }
    const projectCwd = (_a = configuration.projectCwd) !== null && _a !== void 0 ? _a : configuration.startingCwd;
    const releaseFolder = fslib_1.ppath.resolve(projectCwd, `.yarn/releases`);
    const absolutePath = fslib_1.ppath.resolve(releaseFolder, `yarn-${bundleVersion}.cjs`);
    const displayPath = fslib_1.ppath.relative(configuration.startingCwd, absolutePath);
    const projectPath = fslib_1.ppath.relative(projectCwd, absolutePath);
    const yarnPath = configuration.get(`yarnPath`);
    const updateConfig = yarnPath === null || yarnPath.startsWith(`${releaseFolder}/`);
    report.reportInfo(core_1.MessageName.UNNAMED, `Saving the new release in ${core_2.formatUtils.pretty(configuration, displayPath, `magenta`)}`);
    await fslib_1.xfs.removePromise(fslib_1.ppath.dirname(absolutePath));
    await fslib_1.xfs.mkdirPromise(fslib_1.ppath.dirname(absolutePath), { recursive: true });
    await fslib_1.xfs.writeFilePromise(absolutePath, bundleBuffer);
    await fslib_1.xfs.chmodPromise(absolutePath, 0o755);
    if (updateConfig) {
        await core_1.Configuration.updateConfiguration(projectCwd, {
            yarnPath: projectPath,
        });
        const manifest = (await core_1.Manifest.tryFind(projectCwd)) || new core_1.Manifest();
        if (bundleVersion && core_2.miscUtils.isTaggedYarnVersion(bundleVersion))
            manifest.packageManager = `yarn@${bundleVersion}`;
        const data = {};
        manifest.exportTo(data);
        const path = fslib_1.ppath.join(projectCwd, core_1.Manifest.fileName);
        const content = `${JSON.stringify(data, null, manifest.indent)}\n`;
        await fslib_1.xfs.changeFilePromise(path, content, {
            automaticNewlines: true,
        });
    }
}
exports.setVersion = setVersion;
