"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@yarnpkg/core");
const fslib_1 = require("@yarnpkg/fslib");
const nm_1 = require("@yarnpkg/nm");
const NodeModulesLinker_1 = require("./NodeModulesLinker");
const NodeModulesLinker_2 = require("./NodeModulesLinker");
const PnpLooseLinker_1 = require("./PnpLooseLinker");
const plugin = {
    hooks: {
        cleanGlobalArtifacts: async (configuration) => {
            const globalHardlinksDirectory = NodeModulesLinker_2.getGlobalHardlinksStore(configuration);
            await fslib_1.xfs.removePromise(globalHardlinksDirectory);
        },
    },
    configuration: {
        nmHoistingLimits: {
            description: `Prevent packages to be hoisted past specific levels`,
            type: core_1.SettingsType.STRING,
            values: [
                nm_1.NodeModulesHoistingLimits.WORKSPACES,
                nm_1.NodeModulesHoistingLimits.DEPENDENCIES,
                nm_1.NodeModulesHoistingLimits.NONE,
            ],
            default: nm_1.NodeModulesHoistingLimits.NONE,
        },
        nmMode: {
            description: `If set to "hardlinks-local" Yarn will utilize hardlinks to reduce disk space consumption inside "node_modules" directories. With "hardlinks-global" Yarn will use global content addressable storage to reduce "node_modules" size across all the projects using this option.`,
            type: core_1.SettingsType.STRING,
            values: [
                NodeModulesLinker_1.NodeModulesMode.CLASSIC,
                NodeModulesLinker_1.NodeModulesMode.HARDLINKS_LOCAL,
                NodeModulesLinker_1.NodeModulesMode.HARDLINKS_GLOBAL,
            ],
            default: NodeModulesLinker_1.NodeModulesMode.CLASSIC,
        },
    },
    linkers: [
        NodeModulesLinker_1.NodeModulesLinker,
        PnpLooseLinker_1.PnpLooseLinker,
    ],
};
// eslint-disable-next-line arca/no-default-export
exports.default = plugin;
